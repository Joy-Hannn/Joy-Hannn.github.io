<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计算机网络第六章（应用层）</title>
      <link href="/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC6%E7%AB%A0%EF%BC%88%E5%BA%94%E7%94%A8%E5%B1%82%EF%BC%89/"/>
      <url>/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC6%E7%AB%A0%EF%BC%88%E5%BA%94%E7%94%A8%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="6-1、应用层概述"><a href="#6-1、应用层概述" class="headerlink" title="6.1、应用层概述"></a>6.1、应用层概述</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192026.png" alt="image-20201023195112701"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201812.png" alt="image-20201023200511781"></p><p>我们在浏览器的地址中输入某个网站的域名后，就可以访问该网站的内容，这个就是<strong>万维网WWW应用</strong>，其相关的应用层协议为<strong>超文本传送协议HTTP</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201814.png" alt="image-20201023200819770"></p><p>用户在浏览器地址栏中输入的是“见名知意”的<strong>域名</strong>，而TCP&#x2F;IP的网际层使用<strong>IP地址</strong>来表示目的主机，从域名到IP地址的装转换，由属于<strong>应用层范畴的域名系统DNS</strong>，在后台帮用户完成</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201821.png" alt="image-20201023201028141"></p><p>常见的应用</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201823.png" alt="image-20201023201101024"></p><p>总结</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201830.png" alt="image-20201023201137047"></p><hr><h1 id="6-2、客户-x2F-服务器方式（C-x2F-S方式）和对等方式（P2P方式）"><a href="#6-2、客户-x2F-服务器方式（C-x2F-S方式）和对等方式（P2P方式）" class="headerlink" title="6.2、客户&#x2F;服务器方式（C&#x2F;S方式）和对等方式（P2P方式）"></a>6.2、客户&#x2F;服务器方式（C&#x2F;S方式）和对等方式（P2P方式）</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201833.png" alt="image-20201023201308269"></p><h2 id="客户-x2F-服务器方式（C-x2F-S方式）"><a href="#客户-x2F-服务器方式（C-x2F-S方式）" class="headerlink" title="客户&#x2F;服务器方式（C&#x2F;S方式）"></a>客户&#x2F;服务器方式（C&#x2F;S方式）</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201837.png" alt="image-20201023201610088"></p><h2 id="对等方式（P2P方式）"><a href="#对等方式（P2P方式）" class="headerlink" title="对等方式（P2P方式）"></a>对等方式（P2P方式）</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201842.png" alt="image-20201023202017683"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201843.png" alt="image-20201023202049202"></p><hr><h1 id="6-3、动态主机配置协议DHCP"><a href="#6-3、动态主机配置协议DHCP" class="headerlink" title="6.3、动态主机配置协议DHCP"></a>6.3、动态主机配置协议DHCP</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li>互联网广泛使用的<strong>动态主机配置协议 DHCP</strong> (Dynamic Host Configuration Protocol) 提供了<strong>即插即用连网</strong> (plug-and-play networking) 的机制。</li><li>这种机制允许一台计算机加入新的网络和获取 IP 地址，而不用手工配置。</li></ul><h2 id="DHCP的作用"><a href="#DHCP的作用" class="headerlink" title="DHCP的作用"></a>DHCP的作用</h2><p>在之前，如果要正常访问Web服务器，需要该主机手动配置网络的相关配置信息</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201849.png" alt="image-20201023205719672"></p><blockquote><p>如果主机数很多，就工作量大，容易出错</p></blockquote><p>如果我们给网络中添加一台DHCP服务器</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201852.png" alt="image-20201023210345650"></p><h2 id="DHCP的工作过程"><a href="#DHCP的工作过程" class="headerlink" title="DHCP的工作过程"></a>DHCP的工作过程</h2><p><strong>DHCP 使用客户 - 服务器方式</strong></p><ul><li>需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文<br>（DHCP DISCOVER），这时该主机就成为 DHCP 客户。</li><li>本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。</li><li>DHCP 服务器先在其数据库中查找该计算机的配置信息。若找到，则返回找到的信息。若找不到，则从服务器的 IP 地址池 (address pool) 中取一个地址分配给该计算机。DHCP服务器的回答报文叫做提供报文（DHCP OFFER）。</li></ul><p><strong>DHCP 工作方式</strong></p><ul><li>DHCP 使用客户-服务器方式，采用请求&#x2F;应答方式工作。</li><li>DHCP 基于 UDP 工作（DHCP报文在运输层会被封装成为UDP用户数据报），DHCP 服务器运行在 67 号端口， DHCP客户运行在 68 号端口。</li></ul><p><strong>DHCP交互过程</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201859.png" alt="image-20201023211525686"></p><blockquote><p><strong>DHCP客户端将广播发送DHCP发现报文（DHCP DISCOVER）</strong></p><ul><li>事务ID</li><li>DHCP客户端的MAC地址</li></ul><p><strong>封装该报文的IP数据报的源IP地址为0.0.0.0，这是因为主机目前还未分配到IP地址</strong>，因此使用该地址代替</p><p><strong>目的IP地址为广播地址255.255.255.255，之所以广播发送，是因为主机现在并不知道网络中有哪几个DHCP服务器</strong>。它们的IP地址各是什么</p><p><strong>DHCP服务器收到DHCP发现报文后，根据其中封装的DHCP客户端的MAC地址来查找自己的数据库</strong>，如果查到匹配信息，则使用这些配置信息来构建并发送DHCP提供报文，如果没有则采用默认配置信息来构建报文并发送</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201909.png" alt="image-20201023213058543"></p><blockquote><p><strong>DHCP服务端将广播发送DHCP提供报文（DHCP OFFER）</strong></p><ul><li>事务ID：DHCP客户端会与之前DHCP发现报文的事务ID做对比，来判断该DHCP提供报文是否是自己的</li><li>配置信息：<ul><li>IP地址：DHCP服务器从自己的IP地址池中挑选待租用给主机的IP地址（使用ARP来确保所选IP地址未被网络中其他主机占用）</li><li>子网掩码</li><li>地址租期</li><li>默认网关</li><li>DNS服务器</li></ul></li></ul><p>源IP地址：发送DHCP提供报文的DHCP服务器的IP</p><p>目的地址：因为目的主机还没分配到IP，所以使用广播地址</p></blockquote><p>在本例中，DHCP客户会收到两个DHCP服务器发来的DHCP提供报文，DHCP客户从中选择一个，一般选择先到的，并向所选择的DHCP服务器发送DHCP请求报文</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201910.png" alt="image-20201023214542329"></p><blockquote><p><strong>DHCP客户端将广播发送DHCP请求报文（DHCP REQUEST）</strong></p><ul><li>事务ID</li><li>DHCP客户端的MAC地址</li><li>接收的租约中的IP地址</li><li>提供此租约的DHCP服务器端的IP地址</li></ul><p>源地址：0.0.0.0，因为此时DHCP客户才从多个DHCP服务器中挑选一个作为自己的DHCP服务器。它首先要征得该服务器的同意，之后才能正式使用向该DHCP服务器租用的IP地址</p><p>目的地址：广播地址，这样可以一次性向所有DHCP服务器发送DHCP请求报文，来告知它们是否请求它们作为自己的DHCP服务器</p></blockquote><p>在本例中，假设DHCP客户端选择DHCP服务器1作为自己的DHCP服务器，DHCP服务器1接受该请求，于是DHCP服务器1给DHCP客户端发送DHCP确认报文</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201915.png" alt="image-20201023215341522"></p><blockquote><p>源地址：DHCP服务器1的IP地址</p><p>目的地址：广播地址</p><p><strong>DHCP客户收到该报文后就可以使用租用的IP地址</strong></p><p><strong>在使用前还会进行ARP检测</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201918.png" alt="image-20201023215652859"></p></blockquote><p>剩下流程图示</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201925.png" alt="image-20201023220114952"></p><h2 id="DHCP中继代理"><a href="#DHCP中继代理" class="headerlink" title="DHCP中继代理"></a>DHCP中继代理</h2><p>下图的网络拓扑中的各主机是否可以通过DHCP来自动获取到网络配置？</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201929.png" alt="image-20201023221111923"></p><blockquote><p>使用DHCP中继代理是因为我们不用给每一个网络上都设置一个DHCP服务器，这样会使DHCP服务器的数量太多</p></blockquote><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201936.png" alt="image-20201023221251022"></p><hr><h1 id="6-4、域名系统DNS"><a href="#6-4、域名系统DNS" class="headerlink" title="6.4、域名系统DNS"></a>6.4、域名系统DNS</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>域名相比IP地址更容易记忆</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201939.png" alt="image-20201023234832678"></p><p>因特网是否可以只使用一台DNS服务器？</p><p>不行</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201943.png" alt="image-20201023235123151"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201946.png" alt="image-20201023235231869"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201949.png" alt="image-20201023235457857"></p><blockquote><p>名称相同的域名其等级未必相同</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201952.png" alt="image-20201023235617575"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201954.png" alt="image-20201023235910545"></p><h2 id="域名解析过程"><a href="#域名解析过程" class="headerlink" title="域名解析过程"></a>域名解析过程</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201958.png" alt="image-20201024000255580"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202000.png" alt="image-20201024000335147"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202005.png" alt="image-20201024000408396"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202008.png" alt="image-20201024002135210"></p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202012.png" alt="image-20201024002224354"></p><hr><h1 id="6-5、文件传送协议FTP"><a href="#6-5、文件传送协议FTP" class="headerlink" title="6.5、文件传送协议FTP"></a>6.5、文件传送协议FTP</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202014.png" alt="image-20201024132745558"></p><h2 id="文件传送协议FTP的应用"><a href="#文件传送协议FTP的应用" class="headerlink" title="文件传送协议FTP的应用"></a>文件传送协议FTP的应用</h2><p>FTP采用C&#x2F;S方式（客户&#x2F;服务器方式）</p><p>FTP客户计算机可将各种类型的文件上传到FTP服务器计算机</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202021.png" alt="image-20201024133155327" style="zoom:50%;" /><p>FTP客户计算机也可以从FTP服务器计算机下载文件</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202024.png" alt="image-20201024133247537" style="zoom:50%;" /><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202027.png" alt="image-20201024133400777"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202029.png" alt="image-20201024133601943"></p><h2 id="FTP基本工作原理"><a href="#FTP基本工作原理" class="headerlink" title="FTP基本工作原理"></a>FTP基本工作原理</h2><p>FTP服务器监听熟知端口（端口号为 21），使客户进程能够连接上。</p><p>FTP客户随机选择一个临时端口号与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送FTP的相关控制命令（这条连接是FTP客户与服务器之间的命令通道）</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202033.png" alt="image-20201024134319922"></p><p>下图为建立数据通道的TCP连接</p><p>FTP服务器使用自己的熟知端口号20与其建立TCP连接，这条TCP连接用于FTP客户与服务器之间传送文件</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202036.png" alt="image-20201024134624114"></p><blockquote><p>上面例子是主动模式：建立数据通道时，FTP服务器主动连接FTP客户</p></blockquote><p>下图实例为被动模式</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202043.png" alt="image-20201024135018620" style="zoom:67%;" /><p>两种模式对比</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202048.png" alt="image-20201024135050743"></p><blockquote><p>注意两种模式都是</p><p>控制连接在整个会话期间保持打开状态</p><p>数据连接传输完毕后就关闭</p></blockquote><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202050.png" alt="image-20201024135848563"></p><hr><h1 id="6-6、电子邮件"><a href="#6-6、电子邮件" class="headerlink" title="6.6、电子邮件"></a>6.6、电子邮件</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202054.png" alt="image-20201024151757221"></p><h2 id="邮件发送和接收过程"><a href="#邮件发送和接收过程" class="headerlink" title="邮件发送和接收过程"></a>邮件发送和接收过程</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202057.png" alt="image-20201024152052056"></p><h2 id="简单邮件传送协议SMTP（Simple-Mail-Transfer-Protocol）的基本工作原理"><a href="#简单邮件传送协议SMTP（Simple-Mail-Transfer-Protocol）的基本工作原理" class="headerlink" title="简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理"></a>简单邮件传送协议SMTP（Simple Mail Transfer Protocol）的基本工作原理</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202103.png" alt="image-20201024152628966"></p><h2 id="电子邮件的信息格式"><a href="#电子邮件的信息格式" class="headerlink" title="电子邮件的信息格式"></a>电子邮件的信息格式</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202111.png" alt="image-20201024153425016"></p><h2 id="邮件读取"><a href="#邮件读取" class="headerlink" title="邮件读取"></a>邮件读取</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202114.png" alt="image-20201024153736033"></p><h2 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202118.png" alt="image-20201024154039565"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202119.png" alt="image-20201024154744175"></p><hr><h1 id="6-7、万维网WWW"><a href="#6-7、万维网WWW" class="headerlink" title="6.7、万维网WWW"></a>6.7、万维网WWW</h1><h2 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h2><p><strong>概述</strong></p><ul><li><strong>万维网</strong> WWW (World Wide Web) 并非某种特殊的计算机网络。</li><li>万维网是一个大规模的、联机式的<strong>信息储藏所</strong>。</li><li>万维网用链接的方法能非常方便地从互联网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。</li><li>这种访问方式称为“<strong>链接</strong>”。</li></ul><p><strong>万维网的工作方式</strong></p><ul><li>万维网以<strong>客户 - 服务器</strong>方式工作。</li><li><strong>浏览器</strong>就是在用户计算机上的万维网<strong>客户程序</strong>。万维网文档所驻留的计算机则运行<strong>服务器程序</strong>，因此这个计算机也称为<strong>万维网服务器</strong>。</li><li>客户程序向服务器程序发出请求，服务器程序向客户程序送回客户所要的<strong>万维网文档</strong>。</li><li>在一个客户程序主窗口上显示出的万维网文档称为<strong>页面</strong> (page)。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202132.png" alt="image-20201024170819303"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202134.png" alt="image-20201024171432743"></p><p><strong>万维网应用举例</strong></p><p>访问网页</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202137.png" alt="image-20201024170923530"></p><p><strong>怎样标志分布在整个互联网上的万维网文档？</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202140.png" alt="image-20201024171058583"></p><p><strong>万维网的文档</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202146.png" alt="image-20201024171724030"></p><h2 id="超文本传输协议HTTP（Hyper-Transfer-Protocol）"><a href="#超文本传输协议HTTP（Hyper-Transfer-Protocol）" class="headerlink" title="超文本传输协议HTTP（Hyper Transfer Protocol）"></a>超文本传输协议HTTP（Hyper Transfer Protocol）</h2><h3 id="概念和传输过程"><a href="#概念和传输过程" class="headerlink" title="概念和传输过程"></a>概念和传输过程</h3><ul><li>在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是<strong>超文本传送协议</strong> HTTP (HyperText Transfer Protocol)。</li><li>HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202149.png" alt="image-20201024222457800"></p><ul><li>每个万维网网点都有一个服务器进程，它不断地<strong>监听 TCP 的端口 80</strong>，以便发现是否有浏览器向它发出连接建立请求。</li><li>一旦监听到连接建立请求并建立了 TCP 连接之后，浏览器就向万维网服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应。</li><li>最后，TCP 连接就被释放了。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202152.png" alt="image-20201024222825888"></p><h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><p><strong>HTTP请求报文格式</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202155.png" alt="image-20201024224828528"></p><p><strong>HTTP响应报文格式</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202201.png" alt="image-20201024224920638"></p><h3 id="使用Cookie在服务器上记录用户信息"><a href="#使用Cookie在服务器上记录用户信息" class="headerlink" title="使用Cookie在服务器上记录用户信息"></a>使用Cookie在服务器上记录用户信息</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202203.png" alt="image-20201024224945200"></p><h3 id="万维网缓存与代理服务器"><a href="#万维网缓存与代理服务器" class="headerlink" title="万维网缓存与代理服务器"></a>万维网缓存与代理服务器</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202212.png" alt="image-20201024224632514"></p><p>如果该请求有缓存</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202209.png" alt="image-20201024224720124"></p><p>如果该请求没有缓存</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202214.png" alt="image-20201024225013288"></p><blockquote><p>若WEb缓存的命中率比较高</p><p>则会大大减小了该链路上的通信量，因而减少了访问因特网的时延</p></blockquote><p>假设原始服务器的文档被更改，这样代理服务器的文档就不是最新的</p><p>所以原始服务器通常会为每个响应的对象设定一个<strong>修改时间字段</strong>和一个<strong>有效日期字段</strong></p><p>若未过期</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202220.png" alt="image-20201024225504869"></p><p>若过期并且代理服务器的文档和原始服务器的<strong>文档一致</strong>，原始服务器则给代理服务器发送不包含实体主体的响应</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202225.png" alt="image-20201024225846863"></p><p>若过期并且代理服务器的文档和原始服务器的<strong>文档不一致</strong>，原始服务器则给代理服务器发送封装有该文档的响应报文</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202232.png" alt="image-20201024230242550"></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301202238.png" alt="image-20201024231143505"></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第五章（运输层）</title>
      <link href="/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC5%E7%AB%A0%EF%BC%88%E8%BF%90%E8%BE%93%E5%B1%82%EF%BC%89/"/>
      <url>/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC5%E7%AB%A0%EF%BC%88%E8%BF%90%E8%BE%93%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="5-1、运输层概述"><a href="#5-1、运输层概述" class="headerlink" title="5.1、运输层概述"></a>5.1、运输层概述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>进程之间的通信</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200836.png" alt="image-20201020211725185" style="zoom:67%;" /><ul><li>从通信和信息处理的角度看，运输层向它上面的应用层提供通信服务，<strong>它属于面向通信部分的最高层，同时也是用户功能中的最低层</strong>。</li><li>当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，<strong>只有位于网络边缘部分的主机的协议栈才有运输层</strong>，而网络核心部分中的路由器在转发分组时都只用到三层（到网络层）的功能。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200842.png" alt="image-20201020211339131"></p><p><strong>进程之间通信流程</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200844.png" alt="image-20201020213721054"></p><p>“逻辑通信”是指运输层之间的通信好像是沿水平方向传送数据，但事实上，这两条数据并没有一条水平方向的物理连接，要传送的数据是沿着图中上下多次的虚线方向传送的</p><blockquote><p>进程Ap1与Ap4之间进行基于网络的通信，进程Ap2与Ap3之间进行基于网络的通信</p><p>在运输层使用不同的端口，来对应不同的应用进程</p><p>然后通过网络层及其下层来传输应用层报文</p><p>接收方的运输层通过不同的端口，将收到的应用层报文，交付给应用层中相应的应用进程</p><p>这里端口并不是指看得见、摸得着的物理端口，而是指用来区分不同应用进程的标识符</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200847.png" alt="image-20201020220439303"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200849.png" alt="image-20201020220545411"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200853.png" alt="image-20201020222828878"></p><hr><h1 id="5-2、运输层端口号、复用与分用的概念"><a href="#5-2、运输层端口号、复用与分用的概念" class="headerlink" title="5.2、运输层端口号、复用与分用的概念"></a>5.2、运输层端口号、复用与分用的概念</h1><h2 id="为什么用端口号"><a href="#为什么用端口号" class="headerlink" title="为什么用端口号"></a>为什么用端口号</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200855.png" alt="image-20201020223242364"></p><h2 id="发送方的复用和接收方的分用"><a href="#发送方的复用和接收方的分用" class="headerlink" title="发送方的复用和接收方的分用"></a>发送方的复用和接收方的分用</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200856.png" alt="image-20201020223920225"></p><blockquote><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>发送</strong>数据称为 <strong>复用</strong></p><p><strong>多个进程（这里一个端口表示一个进程）</strong> 利用一个运输层协议（或者称为运输层接口）<strong>接收</strong>时叫做  <strong>分用</strong>。</p></blockquote><h2 id="TCP-x2F-IP体系的应用层常用协议所使用的运输层熟知端口号"><a href="#TCP-x2F-IP体系的应用层常用协议所使用的运输层熟知端口号" class="headerlink" title="TCP&#x2F;IP体系的应用层常用协议所使用的运输层熟知端口号"></a>TCP&#x2F;IP体系的应用层常用协议所使用的运输层熟知端口号</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200857.png" alt="image-20201020224521744"></p><h2 id="运输层传输流程"><a href="#运输层传输流程" class="headerlink" title="运输层传输流程"></a>运输层传输流程</h2><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200859.png" alt="image-20201020224658524"></p><blockquote><p>在浏览器输入域名，回车浏览</p><p>然后用户PC中的DNS客户端进程会发送一个DNS查询请求报文</p><p>DNS查询请求报文需要使用运输层的UDP协议</p><p>首部中的源端口字段的值，在短暂端口号49151~65535中挑选一个未被占用的，用来表示DNS客户端进程</p><p>首部中的目的端口字段的值：53，是DNS服务器端进程所使用的熟知端口号</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200900.png" alt="image-20201020225830336"></p><blockquote><p>之后，将UDP用户数据报封装在IP数据报中，通过以太网发送给DNS服务器</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200901.png" alt="image-20201020230059196"></p><blockquote><p>DNS服务器收到该IP数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为53，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS查询请求报文，交付给本服务器中的DNS服务器端进程</p><p>DNS服务器端进程解析DNS查询请求报文的内容，然后按其要求查找对应的IP地址</p><p>之后，会给用户PC发送DNS响应报文，DNS响应报文需要使用运输层的UDP协议封装成UDP用户数据报</p><p>其首部中的源端口字段的值设置为熟知端口号53，表明这是DNS服务器端进程所发送的UDP用户数据报，目的端口的值设置为49152，这是之前用户PC中发送DNS查询请求报文的DNS客户端进程所使用的短暂端口号</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200903.png" alt="image-20201020231032812"></p><blockquote><p>将UDP用户数据报封装在IP数据报中，通过以太网发送给用户PC</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200904.png" alt="image-20201020231308120"></p><blockquote><p>用户PC收到该数据报后，从中解封出UDP用户数据报</p><p>UDP首部中的目的端口号为49152，这表明应将该UDP用户数据报的数据载荷部分，也就是DNS响应报文，交付给用户PC中的DNS客户端进程</p><p>DNS客户端进程解析DNS响应报文的内容，就可知道自己之前所请求的Web服务器的域名对应的IP地址</p></blockquote><p>现在用户PC中的HTTP客户端进程可以向Web服务器发送HTTP请求报文（和DNS发送和接收流程差不多）</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200906.png" alt="image-20201020231935656"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200907.png" alt="image-20201020232517383"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200908.png" alt="image-20201020232132890"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200909.png" alt="image-20201020232548833"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200911.png" alt="image-20201020232337332"></p><hr><h1 id="5-3、UDP和TCP的对比"><a href="#5-3、UDP和TCP的对比" class="headerlink" title="5.3、UDP和TCP的对比"></a>5.3、UDP和TCP的对比</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li><strong>UDP</strong> 和 <strong>TCP</strong> 是TCP&#x2F;IP体系结构<strong>运输层</strong>中的两个重要协议</li><li>当运输层采用面向连接的 <strong>TCP</strong> 协议时，尽管下面的网络是不可靠的（只提供尽最大努力服务），但这种逻辑通信信道就相当于一条<strong>全双工的可靠信道</strong>。</li><li>当运输层采用无连接的 <strong>UDP</strong> 协议时，这种逻辑通信信道是一条<strong>不可靠信道</strong>。</li></ul><p>可靠信道与不可靠信道</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200912.png" alt="image-20201021192221061"></p><ul><li><p>两个对等运输实体在通信时传送的数据单位叫作<strong>运输协议数据单元</strong> TPDU (Transport Protocol Data Unit)。</p></li><li><p>TCP 传送的数据单位协议是 <strong>TCP 报文段</strong>(segment)。</p></li><li><p>UDP 传送的数据单位协议是 <strong>UDP 报文</strong>或<strong>用户数据报</strong>。</p></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200914.png" alt="image-20201021193640130"></p><p>UDP的通信是无连接的，不需要套接字（Socket）</p><p>TCP是面向连接的，TCP之间的通信必须要在两个套接字（Socket）之间建立连接</p><h2 id="用户数据报协议UDP（User-Datagram-Protocol）"><a href="#用户数据报协议UDP（User-Datagram-Protocol）" class="headerlink" title="用户数据报协议UDP（User Datagram Protocol）"></a>用户数据报协议UDP（User Datagram Protocol）</h2><p>可以发送广播</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200915.png" alt="image-20201021194104694" style="zoom: 50%;" /><p>可以向某个多播组发送多播</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200916.png" alt="image-20201021194225567" style="zoom:50%;" /><p>还可以发送单播</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200917.png" alt="image-20201021194341256" style="zoom:50%;" /><blockquote><p>UDP 支持单播、多播以及广播</p><p>换句话说，UDP支持一对一，一对多，以及一对全的通信</p></blockquote><p>运输过程</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200918.png" alt="image-20201021195034383"></p><blockquote><p>UDP对应用进程交下来的报文既不合并也不拆分，而是保留这些报文的边界</p><p> 换句话说，UDP是面向应用报文的</p></blockquote><p>UDP向上层提供无连接不可靠传输服务</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200919.png" alt="image-20201021204152175"></p><p>UDP结构</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200921.png" alt="image-20201021205214512"></p><h2 id="传输控制协议TCP（Transmission-Control-Protocol）"><a href="#传输控制协议TCP（Transmission-Control-Protocol）" class="headerlink" title="传输控制协议TCP（Transmission Control Protocol）"></a>传输控制协议TCP（Transmission Control Protocol）</h2><p>使用TCP协议的通信双方，在进行数据传输之前，必须使用“三报文握手”建立TCP连接</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200922.png" alt="image-20201021194557102" style="zoom:50%;" /><p>TCP连接建立成功后，通信双方之间就好像有一条可靠的通信信道，通信双方使用这条基于TCP连接的可靠信道进行通信</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200923.png" alt="image-20201021194749562" style="zoom:50%;" /><blockquote><p>很显然，TCP仅支持单播，也就是一对一的通信</p></blockquote><p>运输过程</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200924.png" alt="image-20201021195435677"></p><blockquote><p>发送方</p><ul><li><p>TCP会把应用进程交付下来的数据块看作是一连串无结构的字节流，TCP并不知道这些待传送的字节流的含义</p></li><li><p>并将他们编号，并存储在自己发送缓存中</p></li><li><p>TCP会根据发送策略，提取一定量的字节构建TCP报文并发送</p></li></ul><p>接收方</p><ul><li>一方面从所接受到的TCP报文段中，取出数据载荷部分并存储在接收缓存中；一方面将接收缓存中的一些字节交付给应用进程</li><li>TCP不保证接收方应用进程所收到的数据块与发送方发送的数据块，具有对应大小的关系（例如，发送方应用进程交给发送方的TCP共10个数据块，但接收方的TCP可能只用了4个数据块，就把收到的字节流交付给了上层的应用进程，但接收方收到的字节流必须和发送方应用进程发出的字节流完全一样）</li><li>接收方的应用进程必须有能力识别收到的字节流，把它还原成有意义的应用层数据</li></ul><p>TCP是面向字节流的，这正是TCP实现可靠传输、流量控制、以及拥塞控制的基础</p><p>本图只画了一个方向的数据流，在实际网络中，基于TCP连接的两端，可以同时进行TCP报文段的发送和接收</p></blockquote><p>TCP向上层提供面向连接的可靠传输服务</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200926.png" alt="image-20201021204508839"></p><p>TCP结构</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200929.png" alt="image-20201021205307406"></p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200932.png" alt="image-20201023004653315"></p><hr><h1 id="5-4、TCP的流量控制"><a href="#5-4、TCP的流量控制" class="headerlink" title="5.4、TCP的流量控制"></a>5.4、TCP的流量控制</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200934.png" alt="image-20201021223432091"></p><p>举例</p><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=60">具体流程的视频</a></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200935.png" alt="image-20201021231801076"></p><p>上图主机A现在可将发送缓存中序号1~200的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200936.png" alt="image-20201021231904707"></p><p>上图主机A现在可将发送缓存中序号201~500的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201028.png" alt="image-20201021231945653"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200938.png" alt="image-20201021232027721"></p><p>上图主机A现在可将发送缓存中序号501~600的字节数据全部删除，因为已经收到了主机B对它们的累计确认</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201018.png" alt="image-20201021232600497"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200940.png" alt="image-20201021232645300"></p><blockquote><p>上图如果零窗口探测报文在发送过程中如果丢失，还是能打破死锁局面</p><p>因为零窗口探测报文段也有重传计时器，重传计时器超时后，零窗口探测报文段会被重传</p></blockquote><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200944.png" alt="image-20201021234004254"></p><hr><h1 id="5-5、TCP的拥塞控制"><a href="#5-5、TCP的拥塞控制" class="headerlink" title="5.5、TCP的拥塞控制"></a>5.5、TCP的拥塞控制</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200945.png" alt="image-20201022141057083"></p><p><strong>网络拥塞往往是由许多因素引起的。例如：</strong></p><ol><li>点缓存的容量太小；</li><li>链路的容量不足；</li><li>处理机处理的速率太慢；</li><li>拥塞本身会进一步加剧拥塞；</li></ol><p><strong>拥塞控制的一般原理</strong></p><ul><li>拥塞控制的前提：网络能够承受现有的网络负荷。</li><li>实践证明，拥塞控制是很难设计的，因为它是一个<strong>动态问题</strong>。</li><li>分组的丢失是网络发生拥塞的<strong>征兆</strong>而不是原因。</li><li>在许多情况下，甚至正是<strong>拥塞控制本身</strong>成为引起网络性能恶化、甚至发生死锁的原因。</li></ul><p><strong>开环控制和闭环控制</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201132.png" alt="image-20201022142108309"></p><p><strong>监测网络的拥塞</strong></p><p>主要指标有：</p><ol><li>由于缺少缓存空间而被丢弃的分组的百分数；</li><li>平均队列长度；</li><li>超时重传的分组数；</li><li>平均分组时延；</li><li>分组时延的标准差，等等。</li></ol><p>上述这些指标的上升都标志着拥塞的增长。</p><h2 id="拥塞控制的算法"><a href="#拥塞控制的算法" class="headerlink" title="拥塞控制的算法"></a>拥塞控制的算法</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201135.png" alt="image-20201022141423443"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201136.png" alt="image-20201022141556134"></p><blockquote><p>真正的发送窗口值 &#x3D; Min (接收方窗口值，拥塞窗口值)</p></blockquote><p>下图的实例横纵坐标的意思</p><p>传输轮次：</p><ul><li>发送方给接收方发送数据报文段后，接收方给发送方发发回相应的确认报文段</li><li>一个传输轮次所经历的时间其实就是往返时间，往返时间并非是恒定的数值</li><li>使用传输轮次是为了强调把拥塞窗口所允许发送的报文段都连续发送出去，并受到了对已发送的最后一个报文段的确认</li></ul><p>拥塞窗口：</p><ul><li>它会随网络拥塞程度，以及所使用的拥塞控制算法动态变化</li></ul><h3 id="慢开始和拥塞避免"><a href="#慢开始和拥塞避免" class="headerlink" title="慢开始和拥塞避免"></a>慢开始和拥塞避免</h3><h4 id="慢开始（slow-start）"><a href="#慢开始（slow-start）" class="headerlink" title="慢开始（slow-start）"></a>慢开始（slow-start）</h4><ul><li>目的：用来确定网络的负载能力或拥塞程度。</li><li>算法的思路：由小到大逐渐增大拥塞窗口数值。</li><li>两个变量：<ul><li><strong>拥塞窗口（cwnd）</strong>：初始拥塞窗口值：2 种设置方法。窗口值逐渐增大。<ul><li>1 至 2 个最大报文段 （旧标准）</li><li>2 至 4 个最大报文段 （RFC 5681）</li></ul></li><li><strong>慢开始门限（ssthresh）</strong>：防止拥塞窗口增长过大引起网络拥塞。</li></ul></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201139.png" alt="image-20201022145631052"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201208.png" alt="image-20201022144725100"></p><blockquote><p>图中swnd是发送窗口</p><p>每经过一个传输轮次，拥塞窗口就加倍</p><p>窗口大小按<strong>指数增加</strong>，2的n-1次方</p></blockquote><h4 id="拥塞避免（congestion-avoidance）"><a href="#拥塞避免（congestion-avoidance）" class="headerlink" title="拥塞避免（congestion avoidance）"></a>拥塞避免（congestion avoidance）</h4><ul><li>思路：让拥塞窗口 cwnd <strong>缓慢地增大</strong>，避免出现拥塞。</li><li>每经过一个传输轮次，拥塞窗口 <strong>cwnd &#x3D; cwnd + 1</strong>。</li><li>使拥塞窗口 cwnd 按线性规律缓慢增长。</li><li>在拥塞避免阶段，具有 “<strong>加法增大</strong>” (Additive Increase) 的特点。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201213.png" alt="image-20201022150143886"></p><p>如果在发送过程中出现部分报文段丢失，这必然会造成发送方对这些丢失报文段的超时重传</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201215.png" alt="image-20201022145749592"></p><p>这个时候又回到了慢开始</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201223.png" alt="image-20201022145544163"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201225.png" alt="image-20201022145824004"></p><h4 id="两个算法完整示意图"><a href="#两个算法完整示意图" class="headerlink" title="两个算法完整示意图"></a>两个算法完整示意图</h4><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201234.png" alt="image-20201022150236926"></p><h3 id="快重传和快恢复"><a href="#快重传和快恢复" class="headerlink" title="快重传和快恢复"></a>快重传和快恢复</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201236.png" alt="image-20201022150902709"></p><h4 id="快重传（fast-retrasmit）"><a href="#快重传（fast-retrasmit）" class="headerlink" title="快重传（fast retrasmit）"></a>快重传（fast retrasmit）</h4><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201240.png" alt="image-20201022151250183"></p><h4 id="快恢复（fast-recovery）"><a href="#快恢复（fast-recovery）" class="headerlink" title="快恢复（fast recovery）"></a>快恢复（fast recovery）</h4><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201244.png" alt="image-20201022151819265"></p><h4 id="改进后的整体算法的示意图"><a href="#改进后的整体算法的示意图" class="headerlink" title="改进后的整体算法的示意图"></a>改进后的整体算法的示意图</h4><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201246.png" alt="image-20201022152041751"></p><hr><h1 id="5-6、TCP超时重传时间的选择"><a href="#5-6、TCP超时重传时间的选择" class="headerlink" title="5.6、TCP超时重传时间的选择"></a>5.6、TCP超时重传时间的选择</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201252.png" alt="image-20201022152651184"></p><blockquote><p>如果超时重传时间RTO的值设置得比RTT0的值小很多，这会引起报文段不必要的重传，使网络负荷增大</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201253.png" alt="image-20201022152708875"></p><blockquote><p>如果超时重传时间RTO的值设置得远大于RTT0的值，这会使重传时间推迟的太长，使网络的空闲时间增大，降低传输效率</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201255.png" alt="image-20201022153244047"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201256.png" alt="image-20201022153518218"></p><p><strong>RFC6298建议使用下式计算超时重传时间RTO</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201302.png" alt="image-20201022153758413"></p><p><strong>往返时间RTT的测量比较复杂</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201306.png" alt="image-20201022154045440"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201307.png" alt="image-20201022154137911"></p><p><strong>TCP超时重传的计算</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201308.png" alt="image-20201022154350745"></p><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201310.png" alt="image-20201022154418863"></p><hr><h1 id="5-7、TCP可靠传输的实现"><a href="#5-7、TCP可靠传输的实现" class="headerlink" title="5.7、TCP可靠传输的实现"></a>5.7、TCP可靠传输的实现</h1><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=63">本集具体讲解</a></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201317.png" alt="image-20201022161436801"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201318.png" alt="image-20201022161734997"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201320.png" alt="image-20201022164339902"></p><hr><h1 id="5-8、TCP的运输连接管理"><a href="#5-8、TCP的运输连接管理" class="headerlink" title="5.8、TCP的运输连接管理"></a>5.8、TCP的运输连接管理</h1><h2 id="概念-4"><a href="#概念-4" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201321.png" alt="image-20201022193215183"></p><h2 id="TCP的连接建立"><a href="#TCP的连接建立" class="headerlink" title="TCP的连接建立"></a>TCP的连接建立</h2><ul><li>TCP 建立连接的过程叫做<strong>握手</strong>。</li><li>握手需要在客户和服务器之间交换三个 TCP 报文段。称之为<strong>三报文握手</strong>。</li><li>采用<strong>三报文握手</strong>主要是为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li></ul><h3 id="TCP的连接建立要解决以下三个问题"><a href="#TCP的连接建立要解决以下三个问题" class="headerlink" title="TCP的连接建立要解决以下三个问题"></a>TCP的连接建立要解决以下三个问题</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201323.png" alt="image-20201022193418673"></p><h3 id="TCP使用“三报文握手”建立连接"><a href="#TCP使用“三报文握手”建立连接" class="headerlink" title="TCP使用“三报文握手”建立连接"></a>TCP使用“三报文握手”建立连接</h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li></ul><p>“握手”需要在TCP客户端和服务器之间交换三个TCP报文段</p><p>过程</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201328.png" alt="image-20201022194219693"></p><blockquote><p>最初两端的TCP进程都处于关闭状态</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201329.png" alt="image-20201022194350899"></p><blockquote><p>一开始，TCP服务器进程首先创建传输控制块，用来存储TCP连接中的一些重要信息。例如TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针，当前的发送和接收序号等</p><p>之后，就准备接受TCP客户端进程的连接请求</p><p>此时，TCP服务器进程就进入监听状态，等待TCP客户端进程的连接请求</p></blockquote><p>TCP服务器进程是被动等待来自TCP客户端进程的连接请求，因此成为<strong>被动打开</strong>连接</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201331.png" alt="image-20201022194926877"></p><blockquote><p>TCP客户进程也是首先创建传输控制块</p></blockquote><p>由于TCP连接建立是由TCP客户端主动发起的，因此称为<strong>主动打开</strong>连接</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201352.png" alt="image-20201022195108616"></p><blockquote><p>然后，在打算建立TCP连接时，向TCP服务器进程发送TCP连接请求报文段，并进入同步已发送状态</p><p>TCP连接请求报文段首部中</p><ul><li>同步位SYN被设置为1，表明这是一个TCP连接请求报文段</li><li>序号字段seq被设置了一个初始值x，作为TCP客户端进程所选择的初始序号</li></ul><p>请注意：TCP规定SYN被设置为1的报文段不能携带数据，但要消耗掉一个序号</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201333.png" alt="image-20201022195847144"></p><blockquote><p>TCP服务器进程收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并进入同步已接收状态</p><p>TCP连接请求确认报文段首部中</p><ul><li>同步位SYN和确认为ACK都设置为1，表明这是一个TCP连接请求确认报文段</li><li>序号字段seq被设置了一个初始值y，作为TCP服务器进程所选择的初始序号，</li><li>确认号字段ack的值被设置成了x+1，这是对TCP客户进程所选择的初始序号（seq）的确认</li></ul><p>请注意：这个报文段也不能携带数据，因为它是SYN被设置为1的报文段，但同样要消耗掉一个序号</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201336.png" alt="image-20201022202010182"></p><blockquote><p>TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并进入连接已连接状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号字段seq被设置为x+1，这是因为TCP客户进程发送的第一个TCP报文段的序号为x，所以TCP客户进程发送的第二个报文段的序号为x+1</li><li>确认号字段ack被设置为y+1，这是对TCP服务器进程所选择的初始序号的确认</li></ul><p>请注意：TCP规定普通的TCP确认报文段可以携带数据，但如果不携带数据，则不消耗序号</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201338.png" alt="image-20201022202932905"></p><blockquote><p>TCP服务器进程收到该确认报文段后也进入连接已建立状态</p><p>现在，TCP双方都进入了连接已建立状态，它们可以基于已建立好的TCP连接，进行可靠的数据传输</p></blockquote><p>为什么TCP客户进程最后还要发送一个普通的TCP确认报文段？能否使用“两报文握手”建立连接？</p><p>下图实例是“两报文握手”</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201340.png" alt="image-20201022203744174"></p><blockquote><p>为了防止已经失效的连接请求报文段突然又传到服务端，因而产生错误”，这种情况是：一端(client)A发出去的第一个连接请求报文并没有&gt; 丢失，而是因为某些未知的原因在某个网络节点上发生滞留，导致延迟到连接释放以后的某个时间才到达另一端(server)B。本来这是一个&gt; 早已失效的报文段，但是B收到此失效的报文之后，会误认为是A再次发出的一个新的连接请求，于是B端就向A又发出确认报文，表示同&gt; 意建立连接。如果不采用“三次握手”，那么只要B端发出确认报文就会认为新的连接已经建立了，但是A端并没有发出建立连接的请求，因&gt; 此不会去向B端发送数据，B端没有收到数据就会一直等待，这样B端就会白白浪费掉很多资源。</p><p>所以并不<strong>多余</strong>，这是为了防止已失效的连接请求报文段突然又传送到了TCP服务器，因而导致错误</p></blockquote><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201412.png" alt="image-20201022204422775"></p><h2 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h2><ul><li>TCP 连接释放过程比较复杂。</li><li>数据传输结束后，通信的双方都可释放连接。</li><li>TCP 连接释放过程是<strong>四报文握手</strong>。</li></ul><h3 id="TCP通过“四报文挥手”来释放连接"><a href="#TCP通过“四报文挥手”来释放连接" class="headerlink" title="TCP通过“四报文挥手”来释放连接"></a>TCP通过“四报文挥手”来释放连接</h3><ul><li>TCP 连接的建立<strong>采用客户服务器方式</strong>。</li><li>主动发起连接建立的应用进程叫做<strong>TCP客户</strong> (client)。</li><li>被动等待连接建立的应用进程叫做<strong>TCP服务器</strong> (server)。</li><li><strong>任何一方都可以在数据传送结束后发出连接释放的通知</strong></li></ul><p>过程</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201426.png" alt="image-20201022205124204"></p><blockquote><p>现在TCP客户进程和TCP服务器进程都处于连接已建立状态</p><p>TCP客户进程的应用进程通知其主动关闭TCP连接</p><p>TCP客户进程会发送TCP连接释放报文段，并进入终止等待1状态</p><p>TCP连接释放报文段首部中</p><ul><li>终止位FIN和确认为ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值设置为u，它等于TCP客户进程之前已传送过的数据的最后一个字节的序号加1</li><li>确认号ack字段的值设置为v，它等于TCP客户进程之前已收到的、数据的最后一个字节的序号加1</li></ul><p>请注意：TCP规定终止位FIN等于1的报文段即使不携带数据，也要消耗掉一个序号</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201418.png" alt="image-20201022210030419"></p><blockquote><p>TCP服务器进程收到TCP连接释放报文段后，会发送一个普通的TCP确认报文段并进入关闭等待状态</p><p>普通的TCP确认报文段首部中</p><ul><li>确认位ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为v，它等于TCP服务器进程之前已传送过的数据的最后一个字节的序号加1，这也与之前收到的TCP连接释放报文段中的确认号匹配</li><li>确认号ack字段的值设置为u+1，这是对TCP连接释放报文段的确认</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201423.png" alt="image-20201022232158631"></p><blockquote><p>TCP服务器进程应该通知高层应用进程，TCP客户进程要断开与自己的TCP连接</p><p>此时，从TCP客户进程到TCP服务器进程这个方向的连接就释放了</p><p>这时的TCP连接属于半关闭状态，也就是TCP客户进程已经没有数据要发送了</p><p>但如果TCP服务器进程还有数据要发送，TCP客户进程仍要接收，也就是说从TCP服务器进程到TCP客户进程这个方向的连接并未关闭</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201441.png" alt="image-20201022233050922"></p><blockquote><p>TCP客户进程收到TCP确认报文段后就进入终止等待2状态，等待TCP服务器进程发出的TCP连接释放报文段</p><p>若使用TCP服务器进程的应用进程已经没有数据要发送了，应用进程就通知其TCP服务器进程释放连接</p><p>由于TCP连接释放是由TCP客户进程主动发起的，因此TCP服务器进程对TCP连接的释放称为被动关闭连接</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201450.png" alt="image-20201022233941557"></p><blockquote><p>TCP服务器进程发送TCP连接释放报文段并进入最后确认状态</p><p>该报文段首部中</p><ul><li>终止位FIN和确认位ACK的值都被设置为1，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认</li><li>序号seq字段的值为w，这是因为在半关闭状态下，TCP服务器进程可能又发送</li><li>确认号ack字段的值为u+1，这是对之前收到的TCP连接释放报文段的重复确认</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201453.png" alt="image-20201022234741310"></p><blockquote><p>TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态</p><p>该报文段首部中</p><ul><li>确认为ACK的值被设置为1，表明这是一个普通的TCP确认报文段</li><li>序号seq字段的值设置为u+1，这是因为TCP客户进程之前发送的TCP连接释放报文段虽然不携带数据，但要消耗掉一个序号</li><li>确认号ack字段的值设置为w+1，这是对所收到的TCP连接释放报文段的确认</li></ul><p>TCP服务器进程收到该报文段后就进入关闭状态，而TCP客户进程还要进过2MSL后才能进入关闭状态</p></blockquote><p>TCP客户进程在发送完最后一个确认报文后，为什么不直接进入关闭状态？而是要进入时间等待状态？</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201457.png" alt="image-20201022234942562"></p><blockquote><p>因为时间等待状态以及处于该状态2MSL时长，可以确保TCP服务器进程可以收到最后一个TCP确认报文段而进入关闭状态</p><p>另外，TCP客户进程在发送完最后一个TCP确认报文段后，在经过2MSL时长，就可以使本次连接持续时间内所产生的所有报文段都从网络中消失，这样就可以使下一个新的TCP连接中，不会出现旧连接中的报文段</p></blockquote><h3 id="TCP保活计时器的作用"><a href="#TCP保活计时器的作用" class="headerlink" title="TCP保活计时器的作用"></a>TCP保活计时器的作用</h3><p>TCP双方已经建立了连接，后来，TCP客户进程所在的主机突然出现了故障</p><p>TCP服务器进程以后就不能再收到TCP客户进程发来的数据</p><p>因此，应当有措施使TCP服务器进程不要再白白等待下去</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201502.png" alt="image-20201022235800155"></p><hr><h1 id="5-9、TCP报文段的首部格式"><a href="#5-9、TCP报文段的首部格式" class="headerlink" title="5.9、TCP报文段的首部格式"></a>5.9、TCP报文段的首部格式</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201506.png" alt="image-20201023000859363"></p><h2 id="各字段的作用"><a href="#各字段的作用" class="headerlink" title="各字段的作用"></a>各字段的作用</h2><p>源端口和目的端口</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201511.png" alt="image-20201023005210010"></p><p>序号、确认号和确认标志位</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201513.png" alt="image-20201023003826059"></p><p>数据偏移、保留、窗口和校验和</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201518.png" alt="image-20201023004227265"></p><p>同步标志位、终止标志位、复位标志位、推送标志位、紧急标志位和紧急指针</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201525.png" alt="image-20201023005001450"></p><p>选项和填充</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301201529.png" alt="image-20201023005132426"></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第四章（网络层）</title>
      <link href="/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC4%E7%AB%A0%EF%BC%88%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%89/"/>
      <url>/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC4%E7%AB%A0%EF%BC%88%E7%BD%91%E7%BB%9C%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="4-1、网络层概述"><a href="#4-1、网络层概述" class="headerlink" title="4.1、网络层概述"></a>4.1、网络层概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>网络层的主要任务是<strong>实现网络互连</strong>，进而<strong>实现数据包在各网络之间的传输</strong></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194511.png" alt="image-20201017134630948"></p><blockquote><p>这些异构型网络N1~N7如果只是需要各自内部通信，他们只要实现各自的物理层和数据链路层即可</p><p>但是如果要将这些异构型网络互连起来，形成一个更大的互联网，就需要实现网络层设备路由器</p><p>有时为了简单起见，可以不用画出这些网络，图中N1~N7，而将他们看做是一条链路即可</p></blockquote><ul><li><p>要实现网络层任务，需要解决一下主要问题：</p><ul><li>网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”）</li></ul><p>在数据链路层那课讲过的可靠传输，详情可以看那边的笔记：网络层对以下的<strong>分组丢失</strong>、<strong>分组失序</strong>、<strong>分组重复</strong>的传输错误采取措施，使得接收方能正确接受发送方发送的数据，就是<strong>可靠传输</strong>，反之，如果什么措施也不采取，则是<strong>不可靠传输</strong></p><ul><li>网络层寻址问题</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194515.png" alt="image-20201017135644630"></p><ul><li>路由选择问题</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195757.png" alt="image-20201017135710478"></p><blockquote><p>路由器收到数据后，是依据什么来决定将数据包从自己的哪个接口转发出去？</p><p><strong>依据数据包的目的地址和路由器中的路由表</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194522.png" alt="image-20201017135914985"></p><p>但在实际当中，路由器是怎样知道这些路由记录？</p><ul><li>由用户或网络管理员进行人工配置，这种方法只适用于规模较小且网络拓扑不改变的小型互联网</li><li><strong>另一种是实现各种路由选择协议，由路由器执行路由选择协议中所规定的路由选择算法，而自动得出路由表中的路有记录，这种方法更适合规模较大且网络拓扑经常改变的大型互联网</strong></li></ul></blockquote></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194527.png" alt="image-20201017142545630"></p><blockquote><p>补充 <strong>网络层（网际层）</strong>除了 <strong>IP协议</strong>外，还有之前介绍过的<strong>地址解析协议ARP</strong>，还有<strong>网际控制报文协议ICMP</strong>，<strong>网际组管理协议IGMP</strong></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194528.png" alt="image-20201017140623851"></p><hr><h1 id="4-2、网络层提供的两种服务"><a href="#4-2、网络层提供的两种服务" class="headerlink" title="4.2、网络层提供的两种服务"></a>4.2、网络层提供的两种服务</h1><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“<strong>面向连接</strong>”还是“<strong>无连接</strong>”）曾引起了长期的争论。</li><li>争论焦点的实质就是：<strong>在计算机通信中，可靠交付应当由谁来负责</strong>？是<strong>网络</strong>还是<strong>端系统</strong>？</li></ul><h2 id="面向连接的虚电路服务"><a href="#面向连接的虚电路服务" class="headerlink" title="面向连接的虚电路服务"></a>面向连接的虚电路服务</h2><p><strong>一种观点：让网络负责可靠交付</strong></p><ul><li>这种观点认为，应借助于电信网的成功经验，让网络负责可靠交付，计算机网络应模仿电信网络，使用<strong>面向连接</strong>的通信方式。</li><li>通信之前先建立<strong>虚电路</strong> (Virtual Circuit)，以保证双方通信所需的一切网络资源。 </li><li>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点，不丢失、不重复。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194530.png" alt="image-20201017141425892"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的所有分组都沿着同一条虚电路传送</p><blockquote><ul><li>虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li><li>请注意，电路交换的电话通信是先建立了一条真正的连接。</li><li>因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样</li></ul></blockquote><h2 id="无连接的数据报服务"><a href="#无连接的数据报服务" class="headerlink" title="无连接的数据报服务"></a>无连接的数据报服务</h2><p><strong>另一种观点：网络提供数据报服务</strong></p><ul><li>互联网的先驱者提出了一种崭新的网络设计思路。</li><li>网络层向上只提供简单灵活的、<strong>无连接的</strong>、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li><strong>网络层不提供服务质量的承诺</strong>。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194532.png" alt="image-20201017141851030"></p><p><strong>发送方</strong> 发送给 <strong>接收方</strong> 的分组可能沿着不同路径传送</p><blockquote><p><strong>尽最大努力交付</strong></p><ul><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的<strong>主机中的运输层负责可靠交付（包括差错处理、流量控制等）</strong> 。</li><li><strong>采用这种设计思路的好处是</strong>：网络的造价大大降低，运行方式灵活，能够适应多种应用。</li><li>互连网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul></blockquote><h2 id="虚电路服务与数据报服务的对比"><a href="#虚电路服务与数据报服务的对比" class="headerlink" title="虚电路服务与数据报服务的对比"></a>虚电路服务与数据报服务的对比</h2><table><thead><tr><th><strong>对比的方面</strong></th><th><strong>虚电路服务</strong></th><th><strong>数据报服务</strong></th></tr></thead><tbody><tr><td><strong>思路</strong></td><td><strong>可靠通信应当由网络来保证</strong></td><td><strong>可靠通信应当由用户主机来保证</strong></td></tr><tr><td><strong>连接的建立</strong></td><td><strong>必须有</strong></td><td><strong>不需要</strong></td></tr><tr><td><strong>终点地址</strong></td><td><strong>仅在连接建立阶段使用，每个分组使用短的虚电路号</strong></td><td><strong>每个分组都有终点的完整地址</strong></td></tr><tr><td><strong>分组的转发</strong></td><td><strong>属于同一条虚电路的分组均按照同一路由进行转发</strong></td><td><strong>每个分组独立选择路由进行转发</strong></td></tr><tr><td><strong>当结点出故障时</strong></td><td><strong>所有通过出故障的结点的虚电路均不能工作</strong></td><td><strong>出故障的结点可能会丢失分组，一些路由可能会发生变化</strong></td></tr><tr><td><strong>分组的顺序</strong></td><td><strong>总是按发送顺序到达终点</strong></td><td><strong>到达终点时不一定按发送顺序</strong></td></tr><tr><td><strong>端到端的差错处理和流量控制</strong></td><td><strong>可以由网络负责，也可以由用户主机负责</strong></td><td><strong>由用户主机负责</strong></td></tr></tbody></table><hr><h1 id="4-3、IPv4"><a href="#4-3、IPv4" class="headerlink" title="4.3、IPv4"></a>4.3、IPv4</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194535.png" alt="image-20201017143206060"></p><h2 id="分类编制的IPv4地址"><a href="#分类编制的IPv4地址" class="headerlink" title="分类编制的IPv4地址"></a>分类编制的IPv4地址</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194537.png" alt="image-20201017144317166"></p><ul><li>每一类地址都由两个固定长度的字段组成，其中一个字段是<strong>网络号 net-id</strong>，它标志主机（或路由器）所连接到的网络，而另一个字段则是<strong>主机号 host-id</strong>，它标志该主机（或路由器）。</li><li>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</li><li>由此可见，<strong>一个 IP 地址在整个互联网范围内是唯一的</strong>。</li></ul><p><strong>A类地址</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194538.png" alt="image-20201017145210533"></p><p><strong>B类地址</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194539.png" alt="image-20201017145508001"></p><p><strong>C类地址</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194541.png" alt="image-20201017150204774"></p><p><strong>练习</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195831.png" alt="image-20201017150543386"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><strong>IP 地址的指派范围</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194544.png" alt="image-20201017152911541"></p><p><strong>一般不使用的特殊的 IP 地址</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194545.png" alt="image-20201017152959586"></p><p><strong>IP 地址的一些重要特点</strong></p><p>(1) <strong>IP 地址是一种分等级的地址结构</strong>。分两个等级的好处是：</p><ul><li><strong>第一</strong>，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理。</li><li><strong>第二</strong>，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li></ul><p>(2) <strong>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口</strong>。</p><ul><li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为<strong>多归属主机</strong> (multihomed host)。</li><li>由于一个路由器至少应当连接到两个网络（这样它才能将 IP 数据报从一个网络转发到另一个网络），因此<strong>一个路由器至少应当有两个不同的 IP 地址</strong>。</li></ul><p>(3) <strong>用转发器或网桥连接起来的若干个局域网仍为一个网络</strong>，因此这些局域网都具有同样的网络号 net-id。</p><p>(4) <strong>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</strong></p><h2 id="划分子网的IPv4地址"><a href="#划分子网的IPv4地址" class="headerlink" title="划分子网的IPv4地址"></a>划分子网的IPv4地址</h2><h3 id="为什么要划分子网"><a href="#为什么要划分子网" class="headerlink" title="为什么要划分子网"></a>为什么要划分子网</h3><p>在 ARPANET 的早期，IP 地址的设计确实不够合理：</p><ul><li>IP 地址空间的利用率有时很低。 </li><li>给每一个物理网络分配一个网络号会使路由表变得太大因而使网络性能变坏。 </li><li>两级的 IP 地址不够灵活。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194547.png" alt="image-20201017154645198"></p><p>如果想要将原来的网络划分成三个独立的网路</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194548.png" alt="image-20201017154852896"></p><p>所以是否可以从主机号部分借用一部分作为子网号</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194549.png" alt="image-20201017155026814"></p><blockquote><p>但是如果未在图中标记子网号部分，那么我们和计算机又如何知道分类地址中主机号有多少比特被用作子网号了呢？</p><p>所以就有了划分子网的工具：<strong>子网掩码</strong></p><ul><li>从 1985 年起在 IP 地址中又增加了一个“<strong>子网号字段</strong>”，使两级的 IP 地址变成为<strong>三级的 IP 地址</strong>。</li><li>这种做法叫做<strong>划分子网</strong> (subnetting) 。</li><li>划分子网已成为互联网的正式标准协议。</li></ul></blockquote><h3 id="如何划分子网"><a href="#如何划分子网" class="headerlink" title="如何划分子网"></a>如何划分子网</h3><p>基本思路</p><ul><li>划分子网纯属一个<strong>单位内部的事情</strong>。单位对外仍然表现为没有划分子网的网络。</li><li>从主机号<strong>借用</strong>若干个位作为<strong>子网号</strong> subnet-id，而主机号 host-id 也就相应减少了若干个位。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194550.png" alt="image-20201017155930011"></p><ul><li>凡是从其他网络发送给本单位某个主机的 IP 数据报，仍然是根据 IP 数据报的<strong>目的网络号</strong> net-id，先找到连接在本单位网络上的路由器。</li><li>然后<strong>此路由器</strong>在收到 IP 数据报后，再按<strong>目的网络号</strong> net-id 和<strong>子网号</strong> subnet-id 找到目的子网。</li><li>最后就将 IP 数据报直接交付目的主机。</li></ul><p>划分为三个子网后对外仍是一个网络</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194552.png" alt="image-20201017160116239"></p><blockquote><ul><li><strong>优点</strong><ol><li>减少了 IP 地址的浪费</li><li>使网络的组织更加灵活</li><li>更便于维护和管理</li></ol></li><li><strong>划分子网纯属一个单位内部的事情，对外部网络透明</strong>，对外仍然表现为没有划分子网的一个网络。</li></ul></blockquote><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194553.png" alt="image-20201017160252066"></p><blockquote><p><strong>(IP 地址) AND (子网掩码) &#x3D; 网络地址</strong> 重要，下面很多相关知识都会用到</p></blockquote><p>举例</p><p>例子1</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194555.png" alt="image-20201017161651058"></p><p>例子2</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194613.png" alt="image-20201017161719339"></p><p><strong>默认子网掩码</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194615.png" alt="image-20201017162807076"></p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194617.png" alt="image-20201017162938612"></p><blockquote><ul><li>子网掩码是一个网络或一个子网的重要属性。</li><li>路由器在和相邻路由器交换路由信息时，必须把自己所在网络（或子网）的子网掩码告诉相邻路由器。</li><li>路由器的路由表中的每一个项目，除了要给出目的网络地址外，还必须同时给出该网络的子网掩码。</li><li>若一个路由器连接在两个子网上，就拥有两个网络地址和两个子网掩码。</li></ul></blockquote><h2 id="无分类编址的IPv4地址"><a href="#无分类编址的IPv4地址" class="headerlink" title="无分类编址的IPv4地址"></a>无分类编址的IPv4地址</h2><h3 id="为什么使用无分类编址"><a href="#为什么使用无分类编址" class="headerlink" title="为什么使用无分类编址"></a>为什么使用无分类编址</h3><p><strong>无分类域间路由选择 CIDR</strong> (Classless Inter-Domain Routing)。 </p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194619.png" alt="image-20201017164031532"></p><blockquote><p><strong>CIDR 最主要的特点</strong></p><ul><li>CIDR使用各种长度的“<strong>网络前缀</strong>”(network-prefix)来代替分类地址中的网络号和子网号。</li><li><strong>IP 地址从三级编址（使用子网掩码）又回到了两级编址</strong>。</li></ul></blockquote><h3 id="如何使用无分类编址"><a href="#如何使用无分类编址" class="headerlink" title="如何使用无分类编址"></a>如何使用无分类编址</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194621.png" alt="image-20201017165037268"></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194623.png" alt="image-20201017165113442"></p><h3 id="路由聚合（构造超网）"><a href="#路由聚合（构造超网）" class="headerlink" title="路由聚合（构造超网）"></a>路由聚合（构造超网）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194625.png" alt="image-20201017165615915"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195928.png" alt="image-20201017170552495"></p><h2 id="IPv4地址的应用规划"><a href="#IPv4地址的应用规划" class="headerlink" title="IPv4地址的应用规划"></a>IPv4地址的应用规划</h2><p>给定一个IPv4地址快，如何将其划分成几个更小的地址块，并将这些地址块分配给互联网中不同网络，进而可以给各网络中的主机和路由器接口分配IPv4地址</p><h3 id="定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）"><a href="#定长的子网掩码FLSM（Fixed-Length-Subnet-Mask）" class="headerlink" title="定长的子网掩码FLSM（Fixed Length Subnet Mask）"></a>定长的子网掩码FLSM（Fixed Length Subnet Mask）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194628.png" alt="image-20201018143550103"></p><p><strong>划分子网的IPv4就是定长的子网掩码</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194629.png" alt="image-20201018140809079"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194630.png" alt="image-20201018140916631"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200015.png" alt="image-20201018141132446"></p><blockquote><p>通过上面步骤分析，就可以从子网1<del>8中任选5个分配给左图中的N1</del>N5</p><p><strong>采用定长的子网掩码划分，只能划分出2^n个子网，其中n是从主机号部分借用的用来作为子网号的比特数量，每个子网所分配的IP地址数量相同</strong></p><p><strong>但是也因为每个子网所分配的IP地址数量相同，不够灵活，容易造成IP地址的浪费</strong></p></blockquote><h3 id="变长的子网掩码VLSM（Variable-Length-Subnet-Mask）"><a href="#变长的子网掩码VLSM（Variable-Length-Subnet-Mask）" class="headerlink" title="变长的子网掩码VLSM（Variable Length Subnet Mask）"></a>变长的子网掩码VLSM（Variable Length Subnet Mask）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194634.png" alt="image-20201018143632352"></p><p><strong>无分类编址的IPv4就是变长的子网掩码</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194636.png" alt="image-20201018142333145"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194637.png" alt="image-20201018143344440"></p><hr><h1 id="4-4、IP数据报的发送和转发过程"><a href="#4-4、IP数据报的发送和转发过程" class="headerlink" title="4.4、IP数据报的发送和转发过程"></a>4.4、IP数据报的发送和转发过程</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194639.png" alt="image-20201018144335297"></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194640.png" alt="image-20201018151314019"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194644.png" alt="image-20201018150151171"></p><p>源主机如何知道目的主机是否与自己在同一个网络中，是直接交付，还是间接交付？</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194645.png" alt="image-20201018150223497"></p><blockquote><p>可以通过<strong>目的地址IP</strong>和<strong>源地址的子网掩码</strong>进行<strong>逻辑与运算</strong>得到<strong>目的网络地址</strong></p><ul><li>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>相同</strong>，就是<strong>在同一个网络</strong>中，属于<strong>直接交付</strong></li><li>如果<strong>目的网络地址</strong>和<strong>源网络地址</strong> <strong>不相同</strong>，就<strong>不在同一个网络</strong>中，属于<strong>间接交付</strong>，传输给主机所在网络的<strong>默认网关</strong>（路由器——下图会讲解）,由默认网关帮忙转发</li></ul></blockquote><p>主机C如何知道路由器R的存在？</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194648.png" alt="image-20201018145501063"></p><blockquote><p>用户为了让本网络中的主机能和其他网络中的主机进行通信，就必须给其指定本网络的一个路由器的接口，由该路由器帮忙进行转发，<strong>所指定的路由器</strong>，也被称为<strong>默认网关</strong></p><p>例如。路由器的接口0的IP地址192.168.0.128做为左边网络的默认网关</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194651.png" alt="image-20201018150029179"></p><blockquote><p>主机A会将该IP数据报传输给自己的默认网关，也就是图中所示的路由器接口0</p></blockquote><p>路由器收到IP数据报后如何转发？</p><ul><li>检查IP数据报首部是否出错：<ul><li>若出错，则直接丢弃该IP数据报并通告源主机</li><li>若没有出错，则进行转发</li></ul></li><li>根据IP数据报的目的地址在路由表中查找匹配的条目：<ul><li>若找到匹配的条目，则转发给条目中指示的吓一跳</li><li>若找不到，则丢弃该数据报并通告源主机</li></ul></li></ul><p>假设IP数据报首部没有出错，路由器取出IP数据报首部各地址字段的值</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194653.png" alt="image-20201018151108989"></p><p>接下来路由器对该IP数据报进行查表转发</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194654.png" alt="image-20201018151528027"></p><blockquote><p>逐条检查路由条目，将目的地址与路由条目中的地址掩码进行逻辑与运算得到目的网络地址，然后与路由条目中的目的网络进行比较，如果相同，则这条路由条目就是匹配的路由条目，按照它的下一条指示，图中所示的也就是接口1转发该IP数据报</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194655.png" alt="image-20201018151956275"></p><p>路由器是隔离广播域的</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194656.png" alt="image-20201018152040610"></p><hr><h1 id="4-5、静态路由配置及其可能产生的路由环路问题"><a href="#4-5、静态路由配置及其可能产生的路由环路问题" class="headerlink" title="4.5、静态路由配置及其可能产生的路由环路问题"></a>4.5、静态路由配置及其可能产生的路由环路问题</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194728.png" alt="image-20201018155702081"></p><h2 id="多种情况举例"><a href="#多种情况举例" class="headerlink" title="多种情况举例"></a>多种情况举例</h2><p> <strong>静态路由配置</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194730.png" alt="image-20201018160349375"></p><p><strong>默认路由</strong></p><p>举例</p><p>默认路由可以被所有网络匹配，但路由匹配有优先级，默认路由是优先级最低的</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194731.png" alt="image-20201018160906284"></p><p><strong>特定主机路由</strong></p><p>举例</p><p>有时候，我们可以给路由器添加针对某个主机的特定主机路由条目</p><p>一般用于网络管理人员对网络的管理和测试</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194732.png" alt="image-20201018161440257"></p><blockquote><p>多条路由可选，匹配路由最具体的</p></blockquote><p><strong>静态路由配置错误导致路由环路</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194733.png" alt="image-20201018161542579"></p><p>假设将R2的路由表中第三条目录配置错了下一跳</p><p>这导致R2和R3之间产生了路由环路</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200157.png" alt="image-20201018162041966"></p><p><strong>聚合了不存在的网络而导致路由环路</strong></p><p>举例</p><p>正常情况</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194743.png" alt="image-20201018162333671"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194747.png" alt="image-20201018162759562"></p><p>错误情况</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200129.png" alt="image-20201018163323343"></p><p>解决方法</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194757.png" alt="image-20201018163933715"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194759.png" alt="image-20201018164453398"></p><blockquote><p>黑洞路由的下一跳为null0，这是路由器内部的虚拟接口，IP数据报进入它后就被丢弃</p></blockquote><p><strong>网络故障而导致路由环路</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194800.png" alt="image-20201018164811811"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194801.png" alt="image-20201018164913684"></p><p>解决方法</p><p>添加故障的网络为黑洞路由</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194809.png" alt="image-20201018165122023"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194810.png" alt="image-20201018165153517"></p><p>假设。一段时间后故障网络恢复了</p><p>R1又自动地得出了其接口0的直连网络的路由条目</p><p>针对该网络的黑洞网络会自动失效</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194811.png" alt="image-20201018165328319"></p><p>如果又故障</p><p>则生效该网络的黑洞网络</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194847.png" alt="image-20201018165521938"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194850.png" alt="image-20201018165709294"></p><hr><h1 id="4-6、路由选择协议"><a href="#4-6、路由选择协议" class="headerlink" title="4.6、路由选择协议"></a>4.6、路由选择协议</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194852.png" alt="image-20201019134827343"></p><p><strong>因特网所采用的路由选择协议的主要特点</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194853.png" alt="image-20201019134946971"></p><p><strong>因特网采用分层次的路由选择协议</strong></p><ul><li><strong>自治系统 AS</strong>：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194854.png" alt="image-20201019135122326"></p><blockquote><p>自治系统之间的路由选择简称为域间路由选择，自治系统内部的路由选择简称为域内路由选择</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194855.png" alt="image-20201019135328925"></p><blockquote><p>域间路由选择使用外部网关协议EGP这个类别的路由选择协议</p><p>域内路由选择使用内部网关协议IGP这个类别的路由选择协议</p><p><strong>网关协议</strong>的名称可称为<strong>路由协议</strong></p></blockquote><p><strong>常见的路由选择协议</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194946.png" alt="image-20201019140009740"></p><p><strong>路由器的基本结构</strong></p><p>路由器是一种具有多个输入端口，和输出端口的专用计算机，其任务是转发分组</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194948.png" alt="image-20201019140234652"></p><p>路由器结构可划分为两大部分：</p><p>1、<strong>分组转发部分</strong></p><p> 由三部分构成</p><ul><li><p>交换结构</p></li><li><p>一组输入端口：</p><p>信号从某个输入端口进入路由器</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194952.png" alt="image-20201019141149194" style="zoom:50%;" /><p>物理层将信号转换成比特流，送交数据链路层处理</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194954.png" alt="image-20201019141210774" style="zoom: 50%;" /><p>数据链路层识别从比特流中识别出帧，去掉帧头和帧尾后，送交网络层处理</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194955.png" alt="image-20201019141242246" style="zoom:50%;" /><p>  如果送交网络层的分组是普通待转发的数据分组</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194957.png" alt="image-20201019141305650" style="zoom:50%;" /><p>   则根据分组首部中的目的地址进行查表转发</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194959.png" alt="image-20201019141327380" style="zoom:50%;" /><p>若找不到匹配的转发条目，则丢弃该分组，否则，按照匹配条目中所指示的端口进行转发</p></li><li><p>一组输出端口</p><p>网络层更新数据分组首部中某些字段的值，例如将数据分组的生存时间减1，然后送交数据链路层进行封装</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195001.png" alt="image-20201019141745375" style="zoom:50%;" /><p>数据链路层将数据分组封装成帧，交给物理层处理</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195002.png" alt="image-20201019141838032" style="zoom:50%;" /><p>物理层将帧看成比特流将其变换成相应的电信号进行发送</p></li></ul><blockquote><p>路由器的各端口还会有输入缓冲区和输出缓冲区</p><ul><li><p>输入缓冲区用来暂存新进入路由器但还来不及处理的分组</p></li><li><p>输出缓冲区用来暂存已经处理完毕但还来不及发送的分组</p></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195004.png" alt="image-20201019143040253"></p><p><strong>路由器的端口一般都具有输入和输出功能</strong>，这些实例分出了输入端口和输出端口是更好演示路由基本工作过程</p></blockquote><p> 2、<strong>路由选择部分</strong></p><ul><li><p>路由选择部分的核心构件是路由选择处理机，它的任务是根据所使用的路由选择协议。周期性地与其他路由器 进行路由信息的交互，来更新路由表</p><p>如果送交给输入端口的网络层的分组是路由器之间交换路由信息的路由报文，则把这种分组送交给路由选择处理机</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195007.png" alt="image-20201019142228360" style="zoom:50%;" /><p>路由选择处理机根据分组的内容来更新自己的<strong>路由表</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195008.png" alt="image-20201019142415055"></p><p>路由选择处理机还会周期性地给其他路由器发送自己所知道的路由信息</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195011.png" alt="image-20201019142924889"></p></li></ul><h2 id="路由信息协议RIP"><a href="#路由信息协议RIP" class="headerlink" title="路由信息协议RIP"></a>路由信息协议RIP</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195013.png" alt="image-20201019144915687"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195014.png" alt="image-20201019145247606"></p><p><strong>RIP的基本工作过程</strong></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195039.png" alt="image-20201019145510947"></p><p><strong>RIP的路由条目的更新规则</strong></p><p>举例1</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195041.png" alt="image-20201019145627339"></p><blockquote><p>路由器C的表到达各目的网络的下一条都记为问号，可以理解为路由器D并不需要关心路由器C的这些内容</p><p>假设路由器C的RIP更新报文发送周期到了，则路由器C将自己路由表中的相关路由信息封装到RIP更新报文中发送给路由器D</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195042.png" alt="image-20201019150120900"></p><blockquote><p>路由器C能到达这些网络，说明路由器C的相邻路由器也能到达，只是比路由器C的距离大1，于是根据距离的对比，路由器D更新自己的路由表</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195043.png" alt="image-20201019150412666"></p><p>举例2</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195049.png" alt="image-20201019150525711"></p><p><strong>RIP存在“坏消息传播得慢”的问题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195050.png" alt="image-20201019151041492"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195052.png" alt="image-20201019151135255"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195053.png" alt="image-20201019151332767"></p><p>解决方法</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195054.png" alt="image-20201019151639181"></p><blockquote><p>但是，这些方法也不能完全解决“坏消息传播得慢”的问题，这是距离向量的本质决定</p></blockquote><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195056.png" alt="image-20201019152526098"></p><blockquote><p>RIP 协议的优缺点</p><p>优点：</p><ol><li>实现简单，开销较小。</li></ol><p>缺点：</p><ol><li><p>RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。</p></li><li><p>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</p></li><li><p>“坏消息传播得慢”，使更新过程的收敛时间过长。</p></li></ol></blockquote><h2 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h2><p><strong>开放最短路径优先 OSPF (Open Shortest Path First)</strong></p><p><strong>注意</strong>：OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p><p><strong>概念</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195133.png" alt="image-20201019161841695"></p><p><strong>问候（Hello）分组</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195136.png" alt="image-20201019161653875"></p><blockquote><p>IP数据报首部中协议号字段的取值应为89，来表明IP数据报的数据载荷为OSPF分组</p></blockquote><p><strong>发送链路状态通告LSA</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195139.png" alt="image-20201019162341151"></p><blockquote><p>洪泛法有点类似于广播，就是从一个接口进来，从其他剩余所有接口出去</p></blockquote><p><strong>链路状态数据库同步</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195141.png" alt="image-20201019162933483"></p><p><strong>使用SPF算法计算出各自路由器到达其他路由器的最短路径</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195156.png" alt="image-20201019163148068"></p><p><strong>OSPF五种分组类型</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195201.png" alt="image-20201019163250129"></p><p><strong>OSPF的基本工作过程</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195202.png" alt="image-20201019163746254"></p><p><strong>OSPF在多点接入网络中路由器邻居关系建立</strong></p><p>如果不采用其他机制，将会产生大量的多播分组</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195204.png" alt="image-20201019164657606"></p><blockquote><p>若DR出现问题，则由BDR顶替DR</p></blockquote><p><strong>为了使OSPF能够用于规模很大的网络，OSPF把一个自治系统再划分为若干个更小的范围，叫做区域（Area）</strong></p><ul><li><p>在该自治系统内，所有路由器都使用OSPF协议，OSPF将该自治系统再划分成4个更小的区域</p></li><li><p>每个区域都有一个32比特的区域标识符</p></li><li><p>主干区域的区域标识符必须为0，主干区域用于连通其他区域</p></li><li><p>其他区域的区域标识符不能为0且不相同</p></li><li><p>每个区域一般不应包含路由器超过200个</p></li><li><p>划分区域的好处就是，利用洪泛法交换链路状态信息局限于每一个区域而不是自治系统，这样减少整个网络上的通信量</p></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195206.png" alt="image-20201019170100568"></p><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195208.png" alt="image-20201019170217622"></p><h2 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h2><p>BGP（Border Gateway Protocol） 是<strong>不同自治系统的路由器之间</strong>交换路由信息的协议</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195209.png" alt="image-20201019191438399"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195212.png" alt="image-20201019191718506"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195213.png" alt="image-20201019191836397"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195230.png" alt="image-20201019192031087"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195231.png" alt="image-20201019192059962"></p><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200308.png" alt="image-20201019192840368"></p><h2 id="直接封装RIP、OSPF和BGP报文的协议"><a href="#直接封装RIP、OSPF和BGP报文的协议" class="headerlink" title="直接封装RIP、OSPF和BGP报文的协议"></a>直接封装RIP、OSPF和BGP报文的协议</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195235.png" alt="image-20201019192800829"></p><hr><h1 id="4-7、IPv4数据报的首部格式"><a href="#4-7、IPv4数据报的首部格式" class="headerlink" title="4.7、IPv4数据报的首部格式"></a>4.7、IPv4数据报的首部格式</h1><h2 id="各字段的作用"><a href="#各字段的作用" class="headerlink" title="各字段的作用"></a>各字段的作用</h2><ul><li>一个 IP 数据报由<strong>首部</strong>和<strong>数据</strong>两部分组成。</li><li><strong>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。</strong></li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195237.png" alt="image-20201019205931748"></p><p>图中的每一行都由32个比特（也就是4个字节）构成，每个小格子称为字段或者域，每个字段或某些字段的组合用来表达IP协议的相关功能</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195239.png" alt="image-20201019211719880"></p><blockquote><p><strong>IP数据报的首部长度一定是4字节的整数倍</strong></p><p>因为首部中的可选字段的长度从1个字节到40个字节不等，那么，当20字节的固定部分加上1到40个字节长度不等的可变部分，<strong>会造成首部长度不是4字节整数倍时，就用取值为全0的填充字段填充相应个字节</strong>，以确保IP数据报的首部长度是4字节的整数倍</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195256.png" alt="image-20201019212617006"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195258.png" alt="image-20201019220435415"></p><p><strong>对IPv4数据报进行分片</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195300.png" alt="image-20201019221021157"></p><p>​        现在假定分片2的IP数据报经过某个网络时还需要进行分片</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195301.png" alt="image-20201019221246870"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195302.png" alt="image-20201019222512112"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195304.png" alt="image-20201019222552444"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195306.png" alt="image-20201019222729797"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195307.png" alt="image-20201019223101434"></p><h2 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200349.png" alt="image-20201019225141559"></p><hr><h1 id="4-8、网际控制报文协议ICMP"><a href="#4-8、网际控制报文协议ICMP" class="headerlink" title="4.8、网际控制报文协议ICMP"></a>4.8、网际控制报文协议ICMP</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>架构IP网络时需要特别注意两点：</p><ul><li>确认网络是否正常工作</li><li>遇到异常时进行问题诊断</li></ul><p><strong>而ICMP就是实现这些问题的协议</strong></p><p>ICMP的主要功能包括：</p><ul><li>确认IP包是否成功送达目标地址</li><li>通知在发送过程当中IP包被废弃的具体原因</li><li>改善网络设置等</li></ul><p><strong>有了这些功能以后，就可以获得网络是否正常，设置是否有误以及设备有何异常等信息，从而便于进行网络上的问题诊断</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195408.png" alt="image-20201019232539898"></p><p><strong>ICMP 不是高层协议（看起来好像是高层协议，因为 ICMP 报文是装在 IP 数据报中，作为其中的数据部分），而是 IP 层的协议</strong></p><p>ICMP 报文的格式</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195411.png" alt="image-20201020001035813"></p><h2 id="ICMP差错报告报文"><a href="#ICMP差错报告报文" class="headerlink" title="ICMP差错报告报文"></a>ICMP差错报告报文</h2><h3 id="终点不可达"><a href="#终点不可达" class="headerlink" title="终点不可达"></a>终点不可达</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195412.png" alt="image-20201019230838587"></p><h3 id="源点抑制"><a href="#源点抑制" class="headerlink" title="源点抑制"></a>源点抑制</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195415.png" alt="image-20201019231022291"></p><h3 id="时间超过"><a href="#时间超过" class="headerlink" title="时间超过"></a>时间超过</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195416.png" alt="image-20201019231230798"></p><h3 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195418.png" alt="image-20201019231355471"></p><h3 id="改变路由（重定向）"><a href="#改变路由（重定向）" class="headerlink" title="改变路由（重定向）"></a>改变路由（重定向）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195419.png" alt="image-20201019231553990"></p><h3 id="不应发送ICMP差错报告报文情况"><a href="#不应发送ICMP差错报告报文情况" class="headerlink" title="不应发送ICMP差错报告报文情况"></a>不应发送ICMP差错报告报文情况</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195421.png" alt="image-20201019231733673"></p><h2 id="ICMP应用举例"><a href="#ICMP应用举例" class="headerlink" title="ICMP应用举例"></a>ICMP应用举例</h2><h3 id="分组网间探测PING（Packet-InterNet-Groper）"><a href="#分组网间探测PING（Packet-InterNet-Groper）" class="headerlink" title="分组网间探测PING（Packet InterNet Groper）"></a>分组网间探测PING（Packet InterNet Groper）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195422.png" alt="image-20201019233817921"></p><h3 id="跟踪路由（traceroute）"><a href="#跟踪路由（traceroute）" class="headerlink" title="跟踪路由（traceroute）"></a>跟踪路由（traceroute）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195424.png" alt="image-20201019234123026"></p><p><strong>tracert命令的实现原理</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195427.png" alt="image-20201019234718107"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195428.png" alt="image-20201019234741268"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195429.png" alt="image-20201019234758693"></p><h2 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195430.png" alt="image-20201019234909146"></p><hr><h1 id="4-9、虚拟专用网VPN与网络地址转换NAT"><a href="#4-9、虚拟专用网VPN与网络地址转换NAT" class="headerlink" title="4.9、虚拟专用网VPN与网络地址转换NAT"></a>4.9、虚拟专用网VPN与网络地址转换NAT</h1><h2 id="虚拟专用网VPN（Virtual-Private-Network）"><a href="#虚拟专用网VPN（Virtual-Private-Network）" class="headerlink" title="虚拟专用网VPN（Virtual Private Network）"></a>虚拟专用网VPN（Virtual Private Network）</h2><ul><li>由于 <strong>IP 地址的紧缺</strong>，一个机构能够申请到的IP地址数往往远小于本机构所拥有的主机数。</li><li>考虑到<strong>互联网并不很安全</strong>，一个机构内也并不需要把所有的主机接入到外部的互联网。</li><li>假定在一个机构内部的计算机通信也是采用 TCP&#x2F;IP 协议，那么从原则上讲，对于这些仅在<strong>机构内部使用</strong>的计算机就可以由本机构<strong>自行分配其 IP 地址</strong>。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195515.png" alt="image-20201019235534728"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195433.png" alt="image-20201019235631474"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195434.png" alt="image-20201019235718010"></p><blockquote><p>上图是因特网数字分配机构IANA官网查看IPv4地址空间中特殊地址的分配方案</p><p>用粉红色标出来的地址就是无需申请的、可自由分配的专用地址，或称私有地址</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195436.png" alt="image-20201020000136443"></p><blockquote><p>私有地址只能用于一个机构的内部通信，而不能用于和因特网上的主机通信</p><p>私有地址只能用作本地地址而不能用作全球地址</p><p>因特网中所有路由器对目的地址是私有地址的IP数据报一律不进行转发</p><p><strong>本地地址与全球地址</strong></p><ul><li><strong>本地地址</strong>——仅在机构内部使用的 IP 地址，可以由本机构自行分配，而不需要向互联网的管理机构申请。</li><li><strong>全球地址</strong>——全球唯一的 IP 地址，必须向互联网的管理机构申请。 </li><li><strong>问题</strong>：在内部使用的本地地址就有可能和互联网中某个 IP 地址重合，这样就会出现地址的二义性问题。</li></ul></blockquote><p>所以部门A和部门B至少需要一个 路由器具有合法的全球IP地址，这样各自的专用网才能利用公用的因特网进行通信</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195535.png" alt="image-20201020000618797"></p><p>部门A向部门B发送数据流程</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195537.png" alt="image-20201020001107425"></p><blockquote><p>两个专用网内的主机间发送的数据报是通过了公用的因特网，但在效果上就好像是在本机构的专用网上传送一样</p><p>数据报在因特网中可能要经过多个网络和路由器，但从逻辑上看，R1和R2之间好像是一条直通的点对点链路</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195539.png" alt="image-20201020001528569"></p><p>因此也被称为IP隧道技术</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195542.png" alt="image-20201020001935801"></p><h2 id="网络地址转换NAT（Network-Address-Translation）"><a href="#网络地址转换NAT（Network-Address-Translation）" class="headerlink" title="网络地址转换NAT（Network Address Translation）"></a>网络地址转换NAT（Network Address Translation）</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195543.png" alt="image-20201020002020607"></p><p>举例</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195545.png" alt="image-20201020002439942"></p><blockquote><p>使用私有地址的主机，如何才能与因特网上使用全球IP地址的主机进行通信？</p><p>这需要在专用网络连接到因特网的路由器上安装NAT软件</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195546.png" alt="image-20201020002734192"></p><blockquote><p>专有NAT软件的路由器叫做NAT路由器</p><p>它至少有一个有效的外部全球IP地址</p><p>这样，所有使用私有地址的主机在和外界通信时，都要在NAT路由器上将其私有地址转换为全球IP地址</p></blockquote><p>假设，使用私有地址的主机要给因特网上使用全球IP地址的另一台主机发送IP数据报</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195548.png" alt="image-20201020003238729"></p><p>因特网上的这台主机给源主机发回数据报</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195549.png" alt="image-20201020003411024"></p><p>当专用网中的这两台使用私有地址的主机都要给因特网使用全球地址的另一台主机发送数据报时，在NAT路由器的NAT转换表中就会产生两条记录，分别记录两个私有地址与全球地址的对应关系</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195550.png" alt="image-20201020003658349"></p><p>这种基本转换存在一个问题</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195551.png" alt="image-20201020003733863"></p><p>解决方法</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195554.png" alt="image-20201020003840584"></p><blockquote><p>我们现在用的很多家用路由器都是这种NART路由器</p></blockquote><p>内网主机与外网主机的通信，是否能由外网主机首先发起？</p><p>否定</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195555.png" alt="image-20201020004159360"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301195557.png" alt="image-20201020004312942"></p><h2 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301200716.png" alt="image-20201020004447021"></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第三章（数据链路层）</title>
      <link href="/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC3%E7%AB%A0%EF%BC%88%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%89/"/>
      <url>/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC3%E7%AB%A0%EF%BC%88%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="3-1、数据链路层概述"><a href="#3-1、数据链路层概述" class="headerlink" title="3.1、数据链路层概述"></a>3.1、数据链路层概述</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><strong>链路</strong>是从一个结点到相邻结点的一段物理线路，<strong>数据链路</strong>则是在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</p><p><strong>网络中的主机、路由器等都必须实现数据链路层</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192833.png" alt="image-20201011102531462"></p><p><strong>局域网中的主机、交换机等都必须实现数据链路层</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192834.png" alt="image-20201014004326549"></p><p><strong>从层次上来看数据的流动</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192836.png" alt="image-20201011102618878"></p><p><strong>仅从数据链路层观察帧的流动</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192837.png" alt="image-20201011102653161"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192841.png" alt="image-20201011102733584"></p><blockquote><p>主机H1 到主机H2 所经过的网络可以是多种不同类型的</p><p><strong>注意：不同的链路层可能采用不同的数据链路层协议</strong></p></blockquote><p><strong>数据链路层使用的信道</strong></p><p>数据链路层属于计算机网路的低层。<strong>数据链路层使用的信道主要有以下两种类型：</strong></p><ul><li>点对点信道</li><li>广播信道</li></ul><p><img src="https://s2.loli.net/2022/03/01/Dfv1c9ixQlwXMg3.png" alt="image-20201014004459744"></p><blockquote><p><strong>局域网属于数据链路层</strong></p><p>局域网虽然是个网络。但我们并不把局域网放在网络层中讨论。这是因为在网络层要讨论的是多个网络互连的问题，是讨论分组怎么从一个网络，通过路由器，转发到另一个网络。</p><p>而在同一个局域网中，分组怎么从一台主机传送到另一台主机，但并不经过路由器转发。从整个互联网来看，<strong>局域网仍属于数据链路层</strong>的范围</p></blockquote><h2 id="三个重要问题"><a href="#三个重要问题" class="headerlink" title="三个重要问题"></a>三个重要问题</h2><p>数据链路层传送的协议数据单元是<strong>帧</strong></p><p><strong>封装成帧</strong></p><ul><li><strong>封装成帧</strong> (framing) 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192843.png" alt="image-20201011103650253"></p><p><strong>差错控制</strong></p><p>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0， 而 0 也可能变成 1。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192844.png" alt="image-20201011103917512"></p><p><strong>可靠传输</strong></p><p>接收方主机收到有误码的帧后，是不会接受该帧的，会将它丢弃</p><p>如果数据链路层向其上层提供的是不可靠服务，那么丢弃就丢弃了，不会再有更多措施</p><p><strong>如果数据链路层向其上层提供的是可靠服务，那就还需要其他措施，来确保接收方主机还可以重新收到被丢弃的这个帧的正确副本</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192846.png" alt="image-20201011105314053"></p><blockquote><p>以上三个问题都是使用<strong>点对点信道的数据链路层</strong>来举例的</p></blockquote><p><strong>如果使用广播信道的数据链路层除了包含上面三个问题外，还有一些问题要解决</strong></p><p>如图所示，主机A，B，C，D，E通过一根总线进行互连，主机A要给主机C发送数据，代表帧的信号会通过总线传输到总线上的其他各主机，那么主机B，D，E如何知道所收到的帧不是发送给她们的，主机C如何知道发送的帧是发送给自己的</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192847.png" alt="image-20201011105824466"></p><p>可以用编址（地址）的来解决</p><p>将帧的目的地址添加在帧中一起传输</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192848.png" alt="image-20201011110017415"></p><p>还有数据碰撞问题</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192849.png" alt="image-20201011110129994"></p><blockquote><p>随着技术的发展，交换技术的成熟，</p><p>在 有线（局域网）领域 使用<strong>点对点链路</strong>和<strong>链路层交换机</strong>的<strong>交换式局域网</strong>取代了<del>共享式局域网</del></p><p>在无线局域网中仍然使用的是共享信道技术</p></blockquote><hr><h1 id="3-2、封装成帧"><a href="#3-2、封装成帧" class="headerlink" title="3.2、封装成帧"></a>3.2、封装成帧</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>封装成帧是指数据链路层给上层交付的协议数据单元添加帧头和帧尾使之成为帧</p><ul><li><strong>帧头和帧尾中包含有重要的控制信息</strong></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192851.png" alt="image-20201011110851301"></p><p>发送方的数据链路层将上层交付下来的协议数据单元封装成帧后，还要通过物理层，将构成帧的各比特，转换成电信号交给传输媒体，那么接收方的数据链路层如何从物理层交付的比特流中提取出一个个的帧？</p><p>答：需要帧头和帧尾来做<strong>帧定界</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192852.png" alt="image-20201011111334052"></p><p>但比不是每一种数据链路层协议的帧都包含有帧定界标志，例如下面例子</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192853.png" alt="image-20201011111729324"></p><blockquote><p>前导码</p><ul><li>前同步码：作用是使接收方的时钟同步</li><li>帧开始定界符：表明其后面紧跟着的就是MAC帧</li></ul></blockquote><p>另外以太网还规定了帧间间隔为96比特时间，因此，MAC帧不需要帧结束定界符</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192854.png" alt="image-20201011112450187"></p><h2 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h2><blockquote><p><strong>透明</strong></p><p>指某一个实际存在的事物看起来却好像不存在一样。</p></blockquote><p>透明传输是指<strong>数据链路层对上层交付的传输数据没有任何限制</strong>，好像数据链路层不存在一样</p><p>帧界定标志也就是个特定数据值，如果在上层交付的协议数据单元中，  恰好也包含这个特定数值，接收方就不能正确接收</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192855.png" alt="image-20201011113207944"></p><blockquote><p>所以数据链路层应该对上层交付的数据有限制，其内容不能包含帧定界符的值</p></blockquote><p><strong>解决透明传输问题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192857.png" alt="image-20201011113804721"></p><ul><li><strong>解决方法</strong>：面向字节的物理链路使用<strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)，面向比特的物理链路使用比特填充的方法实现透明传输</li><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面<strong>插入一个转义字符“ESC”</strong>(其十六进制编码是1B)。</li><li>接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现在数据当中，那么应在转义字符前面插入一个转义字符 ESC。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li></ul><p><strong>帧的数据部分长度</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192859.png" alt="image-20201011115008209"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192900.png" alt="image-20201011115049672"></p><hr><h1 id="3-3、差错检测"><a href="#3-3、差错检测" class="headerlink" title="3.3、差错检测"></a>3.3、差错检测</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><img src="https://s2.loli.net/2022/03/01/prgRT8HuiwlY7D1.png" alt="image-20201011133757804"></p><h2 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h2><p><img src="https://s2.loli.net/2022/03/01/vlZ7i6phRfjJgNG.png" alt="image-20201011234428217"></p><h2 id="循环冗余校验CRC-Cyclic-Redundancy-Check"><a href="#循环冗余校验CRC-Cyclic-Redundancy-Check" class="headerlink" title="循环冗余校验CRC(Cyclic Redundancy Check)"></a>循环冗余校验CRC(Cyclic Redundancy Check)</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192905.png" alt="image-20201011234605045"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192906.png" alt="image-20201011234701845"></p><p><strong>例题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192908.png" alt="image-20201011235128869"></p><p><img src="https://s2.loli.net/2022/03/01/79NU214YfPE8uDh.png" alt="image-20201011235325022"></p><p><strong>总结</strong></p><p><img src="https://s2.loli.net/2022/03/01/XPcGFQrtDLw1hix.png" alt="image-20201011235726437"></p><blockquote><p>循环冗余校验 CRC 是一种检错方法，而帧校验序列 FCS 是添加在数据后面的冗余码</p></blockquote><hr><h1 id="3-4、可靠传输"><a href="#3-4、可靠传输" class="headerlink" title="3.4、可靠传输"></a>3.4、可靠传输</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>下面是比特差错</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192911.png" alt="image-20201012153605893"></p><p><strong>其他传输差错</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192914.png" alt="image-20201012153811724"></p><ul><li>分组丢失</li></ul><p>路由器输入队列快满了，主动丢弃收到的分组</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192915.png" alt="image-20201012154910921"></p><ul><li>分组失序</li></ul><p>数据并未按照发送顺序依次到达接收端</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192919.png" alt="image-20201012155300937"></p><ul><li>分组重复</li></ul><p>由于某些原因，有些分组在网络中滞留了，没有及时到达接收端，这可能会造成发送端对该分组的重发，重发的分组到达接收端，但一段时间后，滞留在网络的分组也到达了接收端，这就造成<strong>分组重复</strong>的传输差错</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192921.png" alt="image-20201012160026362"></p><h2 id="三种可靠协议"><a href="#三种可靠协议" class="headerlink" title="三种可靠协议"></a>三种可靠协议</h2><ul><li>停止-等待协议SW</li><li>回退N帧协议GBN</li><li>选择重传协议SR</li></ul><blockquote><p>这三种可靠传输实现机制的基本原理并不仅限于数据链路层，可以应用到计算机网络体系结构的各层协议中</p></blockquote><h2 id="停止-等待协议"><a href="#停止-等待协议" class="headerlink" title="停止-等待协议"></a>停止-等待协议</h2><h3 id="停止-等待协议可能遇到的四个问题"><a href="#停止-等待协议可能遇到的四个问题" class="headerlink" title="停止-等待协议可能遇到的四个问题"></a>停止-等待协议可能遇到的四个问题</h3><p><strong>确认与否认</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192923.png" alt="image-20201012162009780" style="zoom:67%;" /><p><strong>超时重传</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192924.png" alt="image-20201012162112151" style="zoom:67%;" /><p><strong>确认丢失</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192926.png" alt="image-20201012162318298" style="zoom:67%;" /><img src="D:\A\大二上\work\git_work\Hexo\flowers\source\_posts\计算机网络第三章（数据链路层）.assets\image-20201012162348428.png" alt="image-20201012162348428" style="zoom:67%;" /><blockquote><p>既然数据分组需要编号，确认分组是否需要编号？</p><p>要。如下图所示</p></blockquote><p><strong>确认迟到</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192928.png" alt="image-20201012162815885" style="zoom:67%;" /><blockquote><p>注意，图中最下面那个数据分组与之前序号为0的那个数据分组不是同一个数据分组</p></blockquote><p><strong>注意事项</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192933.png" alt="image-20201012164008780"></p><h3 id="停止-等待协议的信道利用率"><a href="#停止-等待协议的信道利用率" class="headerlink" title="停止-等待协议的信道利用率"></a>停止-等待协议的信道利用率</h3><p>假设收发双方之间是一条直通的信道</p><ul><li><strong>TD</strong>：是发送方发送数据分组所耗费的发送时延</li><li><strong>RTT</strong>：是收发双方之间的往返时间</li><li><strong>TA</strong>：是接收方发送确认分组所耗费的发送时延</li></ul><p>TA一般都远小于TD，可以忽略，当RTT远大于TD时，信道利用率会非常低</p><p><img src="D:\A\大二上\work\git_work\Hexo\flowers\source_posts\计算机网络第三章（数据链路层）.assets\image-20201012164924635.png" alt="image-20201012164924635"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192937.png" alt="image-20201012181005719"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192939.png" alt="image-20201012181047665"></p><blockquote><p>像停止-等待协议这样通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ(<strong>A</strong>utomatic <strong>R</strong>epeat re<strong>Q</strong>uest)，意思是重传的请求是自动进行，因为不需要接收方显式地请求，发送方重传某个发送的分组</p></blockquote><h2 id="回退N帧协议GBN"><a href="#回退N帧协议GBN" class="headerlink" title="回退N帧协议GBN"></a>回退N帧协议GBN</h2><h3 id="为什么用回退N帧协议"><a href="#为什么用回退N帧协议" class="headerlink" title="为什么用回退N帧协议"></a>为什么用回退N帧协议</h3><p>在相同的时间内，使用停止-等待协议的发送方只能发送一个数据分组，而采用流水线传输的发送方，可以发送多个数据分组</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192941.png" alt="image-20201012190027828"></p><p>回退N帧协议在流水线传输的基础上，利用发送窗口来限制发送方可连续发送数据分组的个数</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192943.png" alt="image-20201012190632086"></p><h3 id="无差错情况流程"><a href="#无差错情况流程" class="headerlink" title="无差错情况流程"></a>无差错情况流程</h3><p>发送方将序号落在发送窗口内的0~4号数据分组，依次连续发送出去</p><p><img src="D:\A\大二上\work\git_work\Hexo\flowers\source_posts\计算机网络第三章（数据链路层）.assets\image-20201012191936466.png" alt="image-20201012191936466"></p><p>他们经过互联网传输正确到达接收方，就是没有乱序和误码，接收方按序接收它们，每接收一个，接收窗口就向前滑动一个位置，并给发送方发送针对所接收分组的确认分组，在通过互联网的传输正确到达了发送方</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192947.png" alt="image-20201012192932035"></p><p>发送方每接收一个、发送窗口就向前滑动一个位置，这样就有新的序号落入发送窗口，发送方可以将收到确认的数据分组从缓存中删除了，而接收方可以择机将已接收的数据分组交付上层处理</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192949.png" alt="image-20201012193212419"></p><h3 id="累计确认"><a href="#累计确认" class="headerlink" title="累计确认"></a><strong>累计确认</strong></h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192950.png" alt="image-20201012194304696"></p><blockquote><p>累计确认</p><p>优点:</p><ul><li>即使确认分组丢失，发送方也可能不必重传</li><li>减小接收方的开销</li><li>减小对网络资源的占用</li></ul><p>缺点：</p><ul><li>不能向发送方及时反映出接收方已经正确接收的数据分组信息</li></ul></blockquote><h3 id="有差错情况"><a href="#有差错情况" class="headerlink" title="有差错情况"></a><strong>有差错情况</strong></h3><p>例如</p><p>在传输数据分组时，5号数据分组出现误码，接收方通过数据分组中的检错码发现了错误</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192952.png" alt="image-20201012195440780"></p><p>于是丢弃该分组，而后续到达的这剩下四个分组与接收窗口的序号不匹配</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192954.png" alt="image-20201012195629368"></p><p>接收同样也不能接收它们，讲它们丢弃，并对之前按序接收的最后一个数据分组进行确认，发送ACK4，<strong>每丢弃一个数据分组，就发送一个ACK4</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192956.png" alt="image-20201012195836902"></p><p>当收到重复的ACK4时，就知道之前所发送的数据分组出现了差错，于是可以不等超时计时器超时就立刻开始重传，具体收到几个重复确认就立刻重传，根据具体实现决定</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192957.png" alt="image-20201012200120166"></p><p> 如果收到这4个重复的确认并不会触发发送立刻重传，一段时间后。超时计时器超时，也会将发送窗口内以发送过的这些数据分组全部重传</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192958.png" alt="image-20201012200454557"></p><p>若WT超过取值范围，例如WT&#x3D;8，会出现什么情况？</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192959.png" alt="image-20201012201109774"></p><p>习题</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193001.png" alt="image-20201012202419107"></p><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193002.png" alt="image-20201012202222138"></p><ul><li>回退N帧协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议</li><li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议</li><li>由于回退N帧协议的特性，当通信线路质量不好时，其信道利用率并不比停止-等待协议高</li></ul><h2 id="选择重传协议SR"><a href="#选择重传协议SR" class="headerlink" title="选择重传协议SR"></a>选择重传协议SR</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193003.png" alt="image-20201012203638722"></p><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?p=27">具体流程请看视频</a></p><p><strong>习题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193004.png" alt="image-20201012205250996"></p><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193009.png" alt="image-20201012204742870"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193019.png" alt="image-20201012205133924"></p><hr><h1 id="3-5、点对点协议PPP"><a href="#3-5、点对点协议PPP" class="headerlink" title="3.5、点对点协议PPP"></a>3.5、点对点协议PPP</h1><ul><li>点对点协议PPP（Point-to-Point Protocol）是目前使用最广泛的点对点数据链路层协议</li><li>PPP协议是因特网工程任务组IEIF在1992年制定的。经过1993年和1994年的修订，现在的PPP协议已成为因特网的正式标准[RFC1661，RFC1662]</li><li>数据链路层使用的一种协议，它的特点是：简单；只检测差错，而不是纠正差错；不使用序号，也不进行流量控制；可同时支持多种网络层协议</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193030.png" alt="image-20201012210844629"></p><ul><li>PPPoE 是为宽带上网的主机使用的链路层协议</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193032.png" alt="image-20201012211423528"></p><h2 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h2><p>必须规定特殊的字符作为帧定界符</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193444.png" alt="image-20201012211826281"></p><h2 id="透明传输-1"><a href="#透明传输-1" class="headerlink" title="透明传输"></a>透明传输</h2><p> 必须保证数据传输的透明性</p><p>实现透明传输的方法</p><ul><li>面向字节的异步链路：字节填充法（插入“转义字符”）</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193035.png" alt="image-20201012212148803"></p><ul><li>面向比特的同步链路：比特填充法（插入“比特0”）</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193038.png" alt="image-20201012212255550"></p><h2 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h2><p>能够对接收端收到的帧进行检测，并立即丢弃有差错的帧。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193040.png" alt="image-20201012212558654"></p><h2 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h2><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机</li><li>分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193042.png" alt="image-20201012213021860"></p><blockquote><p>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</p></blockquote><hr><h1 id="3-6、媒体接入控制（介质访问控制）——广播信道"><a href="#3-6、媒体接入控制（介质访问控制）——广播信道" class="headerlink" title="3.6、媒体接入控制（介质访问控制）——广播信道"></a>3.6、媒体接入控制（介质访问控制）——广播信道</h1><p><strong>媒体接入控制（介质访问控制）使用一对多的广播通信方式</strong></p><blockquote><p><strong>Medium Access Control</strong>翻译成媒体接入控制，有些翻译成介质访问控制</p></blockquote><p><strong>局域网的数据链路层</strong></p><ul><li>局域网最主要的<strong>特点</strong>是：<ul><li>网络为一个单位所拥有；</li><li>地理范围和站点数目均有限。</li></ul></li><li>局域网具有如下<strong>主要优点</strong>：<ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。 </li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。</li></ul></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193045.png" alt="image-20201013201521915"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193046.png" alt="image-20201013201533445"></p><p><strong>数据链路层的两个子层</strong></p><p>为了使数据链路层能更好地适应多种局域网标准，IEEE 802 委员会就将局域网的数据链路层拆成<strong>两个子层</strong>：</p><ol><li><strong>逻辑链路控制</strong> LLC (Logical Link Control)子层；</li><li><strong>媒体接入控制</strong> MAC (Medium Access Control)子层。</li></ol><p>与接入到传输媒体有关的内容都放在 MAC子层，而 LLC 子层则与传输媒体无关。<br><strong>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193047.png" alt="image-20201013201133903"></p><h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><p>为什么要媒体接入控制（介质访问控制）？</p><p><strong>共享信道带来的问题</strong></p><p>若多个设备在共享信道上同时发送数据，则会造成彼此干扰，导致发送失败。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193048.png" alt="image-20201013152007335"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193050.png" alt="image-20201013152453425"></p><blockquote><p>随着技术的发展，交换技术的成熟和成本的降低，具有更高性能的使用点对点链路和链路层交换机的交换式局域网在有线领域已完全取代了共享式局域网，但由于无线信道的广播天性，无线局域网仍然使用的是共享媒体技术</p></blockquote><h2 id="静态划分信道"><a href="#静态划分信道" class="headerlink" title="静态划分信道"></a>静态划分信道</h2><p><strong>信道复用</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193506.png" alt="image-20201013153642544"></p><p><strong>频分复用FDM (Frequency Division Multiplexing)</strong></p><ul><li><p>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</p></li><li><p><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</p></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193053.png" alt="image-20201013153947668"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong></p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193055.png" alt="image-20201013154142540"></p><p><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193056.png" alt="image-20201013202218132"></p><blockquote><p>波分复用就是光的频分复用，使用一根光纤来同时传输多个光载波信号</p><p> 光信号传输一段距离后悔衰减，所以要用 掺铒光纤放大器 放大光信号</p></blockquote><p><strong>码分复用 CDM  (Code Division Multiplexing)</strong> </p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193058.png" alt="image-20201013203126625"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193100.png" alt="image-20201013203324709"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193102.png" alt="image-20201013203459640"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193103.png" alt="image-20201013203819578"></p><h2 id="动态接入控制"><a href="#动态接入控制" class="headerlink" title="动态接入控制"></a>动态接入控制</h2><p>受控接入</p><p><strong>受控接入在局域网中使用得较少，本书不再讨论</strong></p><p><strong>随机接入</strong></p><p><strong>重点</strong></p><h2 id="随机接入（CSMA-x2F-CD协议）"><a href="#随机接入（CSMA-x2F-CD协议）" class="headerlink" title="随机接入（CSMA&#x2F;CD协议）"></a>随机接入（CSMA&#x2F;CD协议）</h2><p><strong>总线局域网使用协议：CSMA&#x2F;CD</strong></p><h3 id="基本概念-2"><a href="#基本概念-2" class="headerlink" title="基本概念"></a>基本概念</h3><p><strong>最初</strong>的<strong>以太网</strong>是将许多计算机都连接到一根总线上。易于实现广播通信。当初认为这样的连接方法既简单又可靠，因为总线上没有有源器件。</p><blockquote><p><strong>以太网（Ethernet）</strong>是一种计算机<strong>局域网技术</strong>。IEEE组织的IEEE 802.3标准制定了<strong>以太网（Ethernet）</strong>的技术标准</p><p>以太网采用无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢弃，其他什么也不做</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193106.png" alt="image-20201013211620687"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193107.png" alt="image-20201013213102777"></p><h3 id="多址接入MA"><a href="#多址接入MA" class="headerlink" title="多址接入MA"></a>多址接入MA</h3><p>表示许多主机以多点接入的方式连接在一根总线上。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193108.png" alt="image-20201013215400688"></p><h3 id="载波监听CS"><a href="#载波监听CS" class="headerlink" title="载波监听CS"></a>载波监听CS</h3><p>是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193120.png" alt="image-20201013215530979"></p><p>总线上并没有什么“载波”。因此， <strong>“载波监听”就是用电子技术检测总线上有没有其他计算机发送的数据信号。</strong></p><h3 id="碰撞检测CD"><a href="#碰撞检测CD" class="headerlink" title="碰撞检测CD"></a>碰撞检测CD</h3><ul><li><strong>“碰撞检测”</strong>就是计算机<strong>边发送数据边检测</strong>信道上的信号电压大小。</li><li>当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大（互相叠加）。</li><li>当一个站检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞。</li><li><strong>所谓“碰撞”就是发生了冲突。因此“碰撞检测”也称为“冲突检测”。</strong></li><li>在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。</li><li><strong>每一个正在发送数据的站，一旦发现总线上出现了碰撞，就要立即停止发送，免得继续浪费网络资源，然后等待一段随机时间后再次发送。</strong></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193121.png" alt="image-20201013221240514"></p><blockquote><p>为什么要进行碰撞检测？ 因为信号传播时延对载波监听产生了影响</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193123.png" alt="image-20201013221834942"></p><p>A 需要单程传播时延的 2 倍的时间，才能检测到与 B 的发送产生了冲突</p></blockquote><h3 id="CSMA-x2F-CD-协议工作流程"><a href="#CSMA-x2F-CD-协议工作流程" class="headerlink" title="CSMA&#x2F;CD 协议工作流程"></a>CSMA&#x2F;CD 协议工作流程</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193125.png" alt="image-20201013221705893"></p><h3 id="CSMA-x2F-CD-协议工作——争用期（碰撞窗口）"><a href="#CSMA-x2F-CD-协议工作——争用期（碰撞窗口）" class="headerlink" title="CSMA&#x2F;CD 协议工作——争用期（碰撞窗口）"></a>CSMA&#x2F;CD 协议工作——争用期（碰撞窗口）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193127.png" alt="image-20201013223235305"></p><h3 id="CSMA-x2F-CD-协议工作——最小帧长"><a href="#CSMA-x2F-CD-协议工作——最小帧长" class="headerlink" title="CSMA&#x2F;CD 协议工作——最小帧长"></a>CSMA&#x2F;CD 协议工作——最小帧长</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193129.png" alt="image-20201013224051932"></p><h3 id="CSMA-x2F-CD-协议工作——最大帧长"><a href="#CSMA-x2F-CD-协议工作——最大帧长" class="headerlink" title="CSMA&#x2F;CD 协议工作——最大帧长"></a>CSMA&#x2F;CD 协议工作——最大帧长</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193130.png" alt="image-20201013225400777"></p><h3 id="CSMA-x2F-CD-协议工作——截断二进制指数退避算法"><a href="#CSMA-x2F-CD-协议工作——截断二进制指数退避算法" class="headerlink" title="CSMA&#x2F;CD 协议工作——截断二进制指数退避算法"></a>CSMA&#x2F;CD 协议工作——截断二进制指数退避算法</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193132.png" alt="image-20201013230717856"></p><h3 id="CSMA-x2F-CD-协议工作——信道利用率"><a href="#CSMA-x2F-CD-协议工作——信道利用率" class="headerlink" title="CSMA&#x2F;CD 协议工作——信道利用率"></a>CSMA&#x2F;CD 协议工作——信道利用率</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193133.png" alt="image-20201013231430295"></p><h3 id="CSMA-x2F-CD-协议工作——帧接收流程"><a href="#CSMA-x2F-CD-协议工作——帧接收流程" class="headerlink" title="CSMA&#x2F;CD 协议工作——帧接收流程"></a>CSMA&#x2F;CD 协议工作——帧接收流程</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193134.png" alt="image-20201013231703302"></p><h3 id="CSMA-x2F-CD-协议的重要特性"><a href="#CSMA-x2F-CD-协议的重要特性" class="headerlink" title="CSMA&#x2F;CD 协议的重要特性"></a>CSMA&#x2F;CD 协议的重要特性</h3><ul><li>使用 CSMA&#x2F;CD 协议的以太网不能进行全双工通信而<strong>只能进行双向交替通信（半双工通信）。</strong></li><li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 </li><li>这种<strong>发送的不确定性</strong>使整个以太网的平均通信量远小于以太网的最高数据率。</li></ul><blockquote><p>CSMA&#x2F;CD协议曾经用于各种总线结构以太网和双绞线以太网的早起版本中。</p><p><strong>现在的以太网基于交换机和全双工连接，不会有碰撞，因此没有必要使用CSMA&#x2F;CS协议</strong></p></blockquote><h2 id="随机接入（CSMA-x2F-CA协议）"><a href="#随机接入（CSMA-x2F-CA协议）" class="headerlink" title="随机接入（CSMA&#x2F;CA协议）"></a>随机接入（CSMA&#x2F;CA协议）</h2><p><strong>无线局域网使用的协议：CSMA&#x2F;CA</strong></p><h3 id="为什么无线局域网要使用CSMA-x2F-CA协议"><a href="#为什么无线局域网要使用CSMA-x2F-CA协议" class="headerlink" title="为什么无线局域网要使用CSMA&#x2F;CA协议"></a>为什么无线局域网要使用CSMA&#x2F;CA协议</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193136.png" alt="image-20201014192811760"></p><h3 id="帧间间隔IFS（InterFrame-Space）"><a href="#帧间间隔IFS（InterFrame-Space）" class="headerlink" title="帧间间隔IFS（InterFrame Space）"></a>帧间间隔IFS（InterFrame Space）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193141.png" alt="image-20201014200149717"></p><h3 id="CSMA-x2F-CA协议的工作原理"><a href="#CSMA-x2F-CA协议的工作原理" class="headerlink" title="CSMA&#x2F;CA协议的工作原理"></a>CSMA&#x2F;CA协议的工作原理</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193144.png" alt="image-20201014200833233"></p><blockquote><p><strong>源站为什么在检测到信道空闲后还要再等待一段时间DIFS？</strong></p><ul><li>考虑到可能有其他的站有高优先级的帧要发送。若有，就要让高优先级帧先发送</li></ul><p><strong>目的站为什么正确接收数据帧后还要等待一段时间SIFS才能发送ACK帧？</strong></p><ul><li>SIFS是最短的帧间间隔，用来分隔开属于一次对话的各帧，在这段时间内，一个站点应当能够从发送方式切换到接收方式</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193146.png" alt="image-20201014201511741"></p><blockquote><p><strong>信道由忙转为空闲且经过DIFS时间后，还要退避一段随机时间才能使用信道？</strong></p><p>防止多个站点同时发送数据而产生碰撞</p></blockquote><p><strong>使用退避算法的时机</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193148.png" alt="image-20201014201927680"></p><h3 id="CSMA-x2F-CA协议的退避算法"><a href="#CSMA-x2F-CA协议的退避算法" class="headerlink" title="CSMA&#x2F;CA协议的退避算法"></a>CSMA&#x2F;CA协议的退避算法</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193149.png" alt="image-20201014202213766"></p><p><strong>退避算法的示例</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193151.png" alt="image-20201014202819851"></p><h3 id="CSMA-x2F-CA协议的信道预约和虚拟载波监听"><a href="#CSMA-x2F-CA协议的信道预约和虚拟载波监听" class="headerlink" title="CSMA&#x2F;CA协议的信道预约和虚拟载波监听"></a>CSMA&#x2F;CA协议的信道预约和虚拟载波监听</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193152.png" alt="image-20201014203119710"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193153.png" alt="image-20201014203506878"></p><p><strong>虚拟载波监听机制能减少隐蔽站带来的碰撞问题的示例</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193155.png" alt="image-20201014203859033"></p><hr><h1 id="3-7、MAC地址、IP地址以及ARP协议"><a href="#3-7、MAC地址、IP地址以及ARP协议" class="headerlink" title="3.7、MAC地址、IP地址以及ARP协议"></a>3.7、MAC地址、IP地址以及ARP协议</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193157.png" alt="image-20201014222831663"></p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><blockquote><ul><li>使用点对点信道的数据链路层不需要使用地址</li><li>使用广播信道的数据链路层必须使用地址来区分各主机</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193201.png" alt="image-20201014223659993"></p><h3 id="广播信道的数据链路层必须使用地址（MAC）"><a href="#广播信道的数据链路层必须使用地址（MAC）" class="headerlink" title="广播信道的数据链路层必须使用地址（MAC）"></a>广播信道的数据链路层必须使用地址（MAC）</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193203.png" alt="image-20201014224732019"></p><blockquote><p><strong>MAC地址又称为硬件地址或物理地址</strong>。请注意：不要被 “物理” 二字误导认为物理地址属于物理层范畴，物理地址属于数据链路层范畴</p></blockquote><h3 id="IEEE-802局域网的MAC地址格式"><a href="#IEEE-802局域网的MAC地址格式" class="headerlink" title="IEEE 802局域网的MAC地址格式"></a>IEEE 802局域网的MAC地址格式</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193205.png" alt="image-20201014225358570"></p><blockquote><p><strong>组织唯一标识符OUI</strong></p><ul><li>生产网络设备的厂商，需要向IEEE的注册管理机构申请一个或多个OUI</li></ul><p><strong>网络接口标识符</strong></p><ul><li>由获得OUI的厂商自行随意分配</li></ul><p><strong>EUI-48</strong></p><ul><li>48是这个MAC地址的位数</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193206.png" alt="image-20201014230248959"></p><blockquote><p>对于使用EUI-48空间的应用程序，IEEE的目标寿命为100年（直到2080年），但是鼓励采用EUI-64作为替代</p></blockquote><p><strong>关于无效的 MAC 帧</strong></p><ul><li>数据字段的长度与长度字段的值不一致；</li><li>帧的长度不是整数个字节；</li><li>用收到的帧检验序列 FCS 查出有差错；</li><li>数据字段的长度不在 46 ~ 1500 字节之间。</li><li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li></ul><blockquote><p><strong>对于检查出的无效</strong> <strong>MAC</strong> <strong>帧就简单地丢弃。以太网不负责重传丢弃的帧。</strong> </p></blockquote><h3 id="IEEE-802局域网的MAC地址发送顺序"><a href="#IEEE-802局域网的MAC地址发送顺序" class="headerlink" title="IEEE 802局域网的MAC地址发送顺序"></a>IEEE 802局域网的MAC地址发送顺序</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193208.png" alt="image-20201014230625182"></p><h3 id="单播MAC地址举例"><a href="#单播MAC地址举例" class="headerlink" title="单播MAC地址举例"></a>单播MAC地址举例</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193210.png" alt="image-20201014230822305"></p><blockquote><p>主机B给主机C发送<strong>单播帧</strong>，主机B首先要构建该<strong>单播帧</strong>，<strong>在帧首部中的目的地址字段填入主机C的MAC地址</strong>，源地址字段填入自己的MAC地址，再加上帧首部的其他字段、数据载荷以及帧尾部，就构成了该<strong>单播帧</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193211.png" alt="image-20201014231244655"></p><blockquote><p>主机B将该<strong>单播帧</strong>发送出去，主机A和C都会收到该<strong>单播帧</strong></p><p>主机A的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址不匹配，丢弃该帧</p><p>主机C的网卡发现该<strong>单播帧</strong>的目的MAC地址与自己的MAC地址匹配，接受该帧</p><p>并将该帧交给其上层处理</p></blockquote><h3 id="广播MAC地址举例"><a href="#广播MAC地址举例" class="headerlink" title="广播MAC地址举例"></a>广播MAC地址举例</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193212.png" alt="image-20201014231754669"></p><blockquote><p>假设主机B要发送一个<strong>广播帧</strong>，主机B首先要构建该<strong>广播帧</strong>，<strong>在帧首部中的目的地址字段填入广播地址</strong>，也就是十六进制的全F，源地址字段填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>广播帧</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193213.png" alt="image-20201014232132424"></p><blockquote><p>主机B讲该<strong>广播帧</strong>发送出去，主机A和C都会收到该<strong>广播帧</strong>，<strong>发现该帧首部中的目的地址字段的内容是广播地址</strong>，就知道该帧是<strong>广播帧</strong>，主机A和主机C都接受该帧，并将该帧交给上层处理</p></blockquote><h3 id="多播MAC地址举例"><a href="#多播MAC地址举例" class="headerlink" title="多播MAC地址举例"></a>多播MAC地址举例</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193214.png" alt="image-20201014232714791"></p><blockquote><p>假设主机A要发送<strong>多播帧</strong>给该<strong>多播地址</strong>。将该<strong>多播地址</strong>的左起第一个字节写成8个比特，第一个字节的最低比特位是1，这就表明该地址是<strong>多播地址</strong>。</p><p>快速判断地址是不是<strong>多播地址</strong>，就是上图所示箭头所指的第十六进制数不能整除2（1,3,5,7,9,B,D,F），则该地址是<strong>多播地址</strong></p><p>假设主机B，C和D支持多播，各用户给自己的主机配置多播组列表<strong>如下所示</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193216.png" alt="image-20201015001243584"></p><blockquote><p>主机B属于两个多播组，主机C也属于两个多播组，而主机D不属于任何多播组</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193217.png" alt="image-20201015001535528"></p><blockquote><p>主机A首先要构建该<strong>多播帧</strong>，<strong>在帧首部中的目的地址字段填入该多播地址</strong>，源地址点填入自己的MAC地址，再加上帧首部中的其他字段、数据载荷以及帧尾部，就构成了该<strong>多播帧</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193218.png" alt="image-20201015002054876"></p><blockquote><p>主机A将该<strong>多播帧</strong>发送出去，主机B、C、D都会收到该<strong>多播帧</strong></p><p><strong>主机B和C发现该多播帧的目的MAC地址在自己的多播组列表中</strong>，主机B和C都会接受该帧</p><p>主机D发现该<strong>多播帧</strong>的目的MAC地址不在自己得多播组列表中，则丢弃该<strong>多播帧</strong></p></blockquote><blockquote><p>给主机配置多播组列表进行私有应用时，不得使用公有的标准多播地址</p></blockquote><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>IP地址属于网络层的范畴，不属于数据链路层的范畴</p><p>下面内容讲的是IP地址的使用，详细的IP地址内容在网络层中介绍</p><h3 id="基本概念-3"><a href="#基本概念-3" class="headerlink" title="基本概念"></a>基本概念</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193220.png" alt="image-20201015104441580"></p><h3 id="从网络体系结构看IP地址与MAC地址"><a href="#从网络体系结构看IP地址与MAC地址" class="headerlink" title="从网络体系结构看IP地址与MAC地址"></a>从网络体系结构看IP地址与MAC地址</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193224.png" alt="image-20201015104913755"></p><h3 id="数据包转发过程中IP地址与MAC地址的变化情况"><a href="#数据包转发过程中IP地址与MAC地址的变化情况" class="headerlink" title="数据包转发过程中IP地址与MAC地址的变化情况"></a>数据包转发过程中IP地址与MAC地址的变化情况</h3><p>图上各主机和路由器各接口的IP地址和MAC地址用简单的标识符来表示</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193225.png" alt="image-20201015105455043"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193922.png" alt="image-20210103212224961"></p><blockquote><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP协议</p></blockquote><h2 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h2><p>如何从IP地址找出其对应的MAC地址？</p><p>ARP（地址解析协议）</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193228.png" alt="image-20201015113826197"></p><p>ARP高速缓存表</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193230.png" alt="image-20201015114052206"></p><blockquote><p>当主机B要给主机C发送数据包时，会首先在自己的ARP高速缓存表中查找主机C的IP地址所对应的MAC地址，但未找到，因此，主机B需要发送ARP请求报文，来获取主机C的MAC地址</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193231.png" alt="image-20201015114444263"></p><blockquote><p>ARP请求报文有具体的格式，上图的只是简单描述</p><p>ARP请求报文被封装在MAC帧中发送，目的地址为广播地址</p><p>主机B发送封装有ARP请求报文的广播帧，总线上的其他主机都能收到该广播帧</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193232.png" alt="image-20201015114811501"></p><blockquote><p>收到ARP请求报文的主机A和主机C会把ARP请求报文交给上层的ARP进程</p><p>主机A发现所询问的IP地址不是自己的IP地址，因此不用理会</p><p>主机C的发现所询问的IP地址是自己的IP地址，需要进行相应</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193233.png" alt="image-20201015115212170"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193236.png" alt="image-20201015115236673"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193235.png" alt="image-20201015115252972"></p><p>动态与静态的区别</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193243.png" alt="image-20201015115831543"></p><p><strong>ARP协议只能在一段链路或一个网络上使用，而不能跨网络使用</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193244.png" alt="image-20201015120108028"></p><blockquote><p>ARP协议的使用是逐段链路进行的</p></blockquote><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193245.png" alt="image-20201015120707150"></p><blockquote><p>ARP表中的IP地址与MAC地址的对应关系记录，是<strong>会定期自动删除的</strong>，<strong>因为IP地址与MAC地址的对应关系不是永久性的</strong></p></blockquote><hr><h1 id="3-8、集线器与交换机的区别"><a href="#3-8、集线器与交换机的区别" class="headerlink" title="3.8、集线器与交换机的区别"></a>3.8、集线器与交换机的区别</h1><h2 id="集线器-在物理层扩展以太网"><a href="#集线器-在物理层扩展以太网" class="headerlink" title="集线器-在物理层扩展以太网"></a>集线器-在物理层扩展以太网</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193247.png" alt="image-20201015144628691"></p><blockquote><ul><li>传统以太网最初是使用粗同轴电缆，后来演进到使用比较便宜的细同轴电缆，最后发展为使用更便宜和更灵活的双绞线。</li><li>采用双绞线的以太网采用星形拓扑，在星形的中心则增加了一种可靠性非常高的设备，叫做<strong>集线器</strong> (hub)。</li><li><strong>集线器</strong>是也可以看做多口中继器，每个端口都可以成为一个中继器，中继器是对减弱的信号进行放大和发送的设备</li><li><strong>集线器</strong>的以太网在逻辑上仍是个总线网，需要使用CSMA&#x2F;CD协议来协调各主机争用总线，只能工作在半双工模式，收发帧不能同时进行</li></ul></blockquote><h3 id="集线器HUB在物理层扩展以太网"><a href="#集线器HUB在物理层扩展以太网" class="headerlink" title="集线器HUB在物理层扩展以太网"></a>集线器HUB在物理层扩展以太网</h3><p><strong>使用集线器扩展</strong>：将多个以太网段连成更大的、多级星形结构的以太网</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193249.png" alt="image-20201015145732275"></p><blockquote><ul><li><strong>优点</strong><ol><li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li><li>扩大了以太网覆盖的地理范围。</li></ol></li><li><strong>缺点</strong><ol><li>碰撞域增大了，但总的吞吐量并未提高。</li><li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li></ol></li></ul></blockquote><p><strong>碰撞域</strong></p><ul><li><strong>碰撞域（collision domain）</strong>又称为<strong>冲突域</strong>，是指网络中一个站点发出的帧会与其他站点发出的帧产生碰撞或冲突的那部分网络。</li><li>碰撞域越大，发生碰撞的概率越高。</li></ul><h2 id="以太网交换机-在数据链路层扩展以太网"><a href="#以太网交换机-在数据链路层扩展以太网" class="headerlink" title="以太网交换机-在数据链路层扩展以太网"></a>以太网交换机-在数据链路层扩展以太网</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>扩展以太网更常用的方法是在数据链路层进行。</li><li>早期使用<strong>网桥</strong>，现在使用<strong>以太网交换机</strong>。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193251.png" alt="image-20201015150620067"></p><blockquote><p><strong>网桥</strong></p><ul><li>网桥工作在数据链路层。</li><li>它根据 MAC 帧的目的地址对收到的帧进行转发和过滤。</li><li>当网桥收到一个帧时，并不是向所有的接口转发此帧，而是先检查此帧的目的MAC 地址，然后再确定将该帧转发到哪一个接口，或把它丢弃。</li></ul><p><strong>交换机</strong></p><ul><li>1990 年问世的交换式集线器 (switching hub) 可明显地提高以太网的性能。</li><li>交换式集线器常称为<strong>以太网交换机</strong> (switch) 或<strong>第二层交换机</strong> (L2 switch)，强调这种交换机工作在数据链路层。</li><li>以太网交换机实质上就是一个<strong>多接口的网桥</strong></li></ul></blockquote><h3 id="集线器HUB与交换机SWITCH区别"><a href="#集线器HUB与交换机SWITCH区别" class="headerlink" title="集线器HUB与交换机SWITCH区别"></a><strong>集线器HUB与交换机SWITCH区别</strong></h3><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193252.png" alt="image-20201015152232158"></p><blockquote><p>使用<strong>集线器</strong>互连而成的共享总线式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧会通过共享总线传输到<strong>总线上的其他各个主机</strong></p><p>使用交换机互连而成的交换式以太网上的某个主机，要给另一个主机发送单播帧，该单播帧进入交换机后，交换机会将该单播帧转发给目的主机，<strong>而不是网络中的其他各个主机</strong></p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193253.png" alt="image-20201015152858146"></p><blockquote><p><strong>以太网交换机的交换方式</strong></p><ul><li>存储转发方式<ul><li>把整个数据帧<strong>先缓存</strong>后再进行处理。</li></ul></li><li>直通 (cut-through) 方式<ul><li>接收数据帧的同时就<strong>立即按数据帧的目的 MAC 地址决定该帧的转发接口</strong>，因而提高了帧的转发速度。</li><li><strong>缺点</strong>是它不检查差错就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</li></ul></li></ul><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>对比集线器和交换机</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193255.png" alt="image-20201015153907268"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193256.png" alt="image-20201015154523036"></p><blockquote><p>多台主机同时给另一台主机发送单播帧</p><p>集线器以太网：会产生碰撞，遭遇碰撞的帧会传播到总线上的各主机</p><p>交换机以太网：会将它们缓存起来，然后逐个转发给目的主机，不会产生碰撞</p><p><strong>这个例子的前提条件是忽略ARP过程，并假设交换机的帧交换表已经学习或配置好了</strong></p></blockquote><p><strong>集线器扩展以太网和交换机扩展以太网区别</strong></p><p><strong>单播</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193257.png" alt="image-20201015155408692"></p><p><strong>广播</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193259.png" alt="image-20201015155440402"></p><p><strong>多个单播</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194053.png" alt="image-20201015155526386"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193301.png" alt="image-20201015155706698"></p><p>广播域（broadcast domain）：指这样一部分网络，其中任何一台设备发出的广播通信都能被该部分网络中的所有其他设备所接收。</p><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193303.png" alt="image-20201015160146482"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193304.png" alt="image-20201015160526999"></p><blockquote><p>工作在数据链路层的以太网交换机，其性能远远超过工作在物理层的集线器，而且价格并不贵，这就使得集线器逐渐被市场淘汰</p></blockquote><hr><h1 id="3-9、以太网交换机自学习和转发帧的流程"><a href="#3-9、以太网交换机自学习和转发帧的流程" class="headerlink" title="3.9、以太网交换机自学习和转发帧的流程"></a>3.9、以太网交换机自学习和转发帧的流程</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193305.png" alt="image-20201015161015165"></p><h2 id="自学习和转发帧的例子"><a href="#自学习和转发帧的例子" class="headerlink" title="自学习和转发帧的例子"></a>自学习和转发帧的例子</h2><p>以下例子假设各主机知道网络中其他各主机的MAC地址（无需进行ARP）</p><p><strong>A -&gt; B</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194137.png" alt="image-20201015161458528"></p><blockquote><ol><li>A 先向 B 发送一帧。该帧从接口 1 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中左边）交换表中</li><li>交换机向除接口 1 以外的所有的接口广播这个帧</li><li>接口 4到接口 2，先查找（图中右边）交换表。没有查到应从哪个接口转发这个帧给 B</li><li>交换机把这个帧的源地址 A 和接口 1 写入（图中右边）交换表中</li><li>除B主机之外与该帧的目的地址不相符，将丢弃该帧</li><li>主机B发现是给自己的帧，接受该帧</li></ol></blockquote><p><strong>B -&gt; A</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194217.png" alt="image-20201015162310922"></p><blockquote><ol><li>B 向 A 发送一帧。该帧从接口 3 进入到交换机</li><li>交换机收到帧后，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>主机 A 发现目的地址是它，就接受该帧</li><li>交换机把这个帧的源地址 B 和接口 3 写入（图中左边）交换表中</li></ol></blockquote><p><strong>E -&gt; A</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193309.png" alt="image-20201015162622462"></p><blockquote><ol><li>E 向 A发送一帧</li><li>交换机收到帧后，先查找（图中右边）交换表。发现（图中右边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口2转发出去。于是就把这个帧传送到接口 2 转发给 接口 4。</li><li>交换机把这个帧的源地址 E 和接口 3 写入（图中右边）交换表中</li><li>接口 4 到 左边的交换机，先查找（图中左边）交换表。发现（图中左边）交换表中的 MAC 地址有 A，表明要发送给A的帧应从接口1转发出去。于是就把这个帧传送到接口 1 转发给 A。</li><li>交换机把这个帧的源地址 E 和接口 4 写入（图中左边）交换表中</li><li>主机 A 发现目的地址是它，就接受该帧</li></ol></blockquote><p><strong>G -&gt; A</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193310.png" alt="image-20201015163157140"></p><blockquote><p>主机 A、主机 G、交换机 1的接口 1就共享同一条总线（相当于总线式网络，可以想象成用集线器连接了）</p><ol><li>主机 G 发送给 主机 A 一个帧</li><li>主机 A 和 交换机接口 1都能接收到</li><li>主机 A 的网卡收到后，根据帧的目的MAC地址A，就知道是发送给自己的帧，就接受该帧</li><li>交换机 1收到该帧后，首先进行登记工作</li><li>然后交换机 1对该帧进行转发，该帧的MAC地址是A，在（图中左边）交换表查找MAC 地址有 A</li><li>MAC 地址为 A的接口号是1，但是该帧正是从接口 1 进入交换机的，交换机不会再从该接口 1 将帧转发出去，因为这是没有必要，于是丢弃该帧</li></ol></blockquote><p>随着网络中各主机都发送了帧后，网络中的各交换机就可以学习到各主机的MAC地址，以及它们与自己各接口的对应关系</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193312.png" alt="image-20201015164210543"></p><blockquote><p>考虑到可能有时要在交换机的接口更换主机，或者主机要更换其网络适配器，这就需要更改交换表中的项目。为此，在交换表中每个项目都设有一定的<strong>有效时间</strong>。<strong>过期的项目就自动被删除</strong>。</p><p><strong>以太网交换机的这种自学习方法使得以太网交换机能够即插即用，不必人工进行配置，因此非常方便。</strong></p></blockquote><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p><strong>交换机自学习和转发帧的步骤归纳</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194317.png" alt="image-20201015170656500"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193314.png" alt="image-20201015170739679"></p><hr><h1 id="3-10、以太网交换机的生成树协议STP"><a href="#3-10、以太网交换机的生成树协议STP" class="headerlink" title="3.10、以太网交换机的生成树协议STP"></a>3.10、以太网交换机的生成树协议STP</h1><h2 id="如何提高以太网的可靠性"><a href="#如何提高以太网的可靠性" class="headerlink" title="如何提高以太网的可靠性"></a>如何提高以太网的可靠性</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193316.png" alt="image-20201015171453001"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193318.png" alt="image-20201015171515481"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193320.png" alt="image-20201015171900775"></p><h2 id="生成树协议STP"><a href="#生成树协议STP" class="headerlink" title="生成树协议STP"></a>生成树协议STP</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193321.png" alt="image-20201015172204419"></p><blockquote><ul><li>IEEE 802.1D 标准制定了一个<strong>生成树协议 STP</strong>  (Spanning Tree Protocol)。</li><li>其<strong>要点</strong>是：<strong>不改变</strong>网络的实际拓扑，但在逻辑上则切断某些链路，使得从一台主机到所有其他主机的路径是<strong>无环路的树状结构</strong>，从而消除了兜圈子现象。</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193323.png" alt="image-20201015202257756"></p><hr><h1 id="3-11、虚拟局域网VLAN"><a href="#3-11、虚拟局域网VLAN" class="headerlink" title="3.11、虚拟局域网VLAN"></a>3.11、虚拟局域网VLAN</h1><h2 id="为什么要虚拟局域网VLAN"><a href="#为什么要虚拟局域网VLAN" class="headerlink" title="为什么要虚拟局域网VLAN"></a>为什么要虚拟局域网VLAN</h2><p><strong>广播风暴</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193331.png" alt="image-20201015202859124"></p><p><strong>分割广播域的方法</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193332.png" alt="image-20201015203113654"></p><blockquote><p>为了分割广播域，所以虚拟局域网VLAN技术应运而生</p></blockquote><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193334.png" alt="image-20201015203559548"></p><blockquote><ul><li>利用以太网交换机可以很方便地实现虚拟局域网 VLAN (Virtual LAN)。</li><li>IEEE 802.1Q 对虚拟局域网 VLAN 的<strong>定义</strong>：<br><strong>虚拟局域网 VLAN</strong> 是由一些局域网网段构成的<strong>与物理位置无关的逻辑组</strong>，而这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的计算机是属于哪一个 VLAN。</li><li>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</li><li><strong>虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。</strong></li><li>由于虚拟局域网是用户和网络资源的逻辑组合，因此可按照需要将有关设备和资源非常方便地重新组合，使用户从不同的服务器或数据库中存取所需的资源。</li></ul></blockquote><h2 id="虚拟局域网VLAN的实现机制"><a href="#虚拟局域网VLAN的实现机制" class="headerlink" title="虚拟局域网VLAN的实现机制"></a>虚拟局域网VLAN的实现机制</h2><p>虚拟局域网VLAN技术是在交换机上实现的，需要交换机能够实现以下功能</p><ul><li>能够处理带有VLAN标记的帧——IEEE 802.1 Q帧</li><li>交换机的各端口可以支持不同的端口类型，不同端口类型的端口对帧的处理方式有所不同</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193336.png" alt="image-20201015204639599"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193338.png" alt="image-20201015204749141"></p><p><strong>Access端口</strong></p><p>交换机与用户计算机之间的互连</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193340.png" alt="image-20201015205311757"></p><blockquote><p>同一个VLAN内部可以广播通信，不同VLAN不可以广播通信</p></blockquote><p><strong>Truck端口</strong></p><p>交换机之间或交换机与路由器之间的互连</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193341.png" alt="image-20201015205947636"></p><p><strong>小例题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193343.png" alt="image-20201015210417695"></p><p><strong>华为交换机私有的Hybrid端口类型</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301194427.png" alt="image-20201015211031361"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193345.png" alt="image-20201015211349531"></p><h2 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301193347.png" alt="image-20201015211512622"></p><blockquote><p><strong>虚拟局域网优点</strong></p><p>虚拟局域网（VLAN）技术具有以下主要优点：</p><ol><li>改善了性能</li><li>简化了管理</li><li>降低了成本</li><li>改善了安全性</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第二章（物理层）</title>
      <link href="/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC2%E7%AB%A0%EF%BC%88%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%89/"/>
      <url>/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC2%E7%AB%A0%EF%BC%88%E7%89%A9%E7%90%86%E5%B1%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="2-1、物理层的基本概念"><a href="#2-1、物理层的基本概念" class="headerlink" title="2.1、物理层的基本概念"></a>2.1、物理层的基本概念</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192623.png" alt="image-20201008130211749"></p><hr><h1 id="2-2、物理层下面的传输媒体"><a href="#2-2、物理层下面的传输媒体" class="headerlink" title="2.2、物理层下面的传输媒体"></a>2.2、物理层下面的传输媒体</h1><p><strong>传输媒体</strong>也称为传输介质或传输媒介，他就是数据传输系统中在发送器和接收器之间的物理通路。<strong>传输媒体</strong>课分为两大类，即<strong>导引型传输媒体</strong>和<strong>非导引型传输媒体</strong></p><p>传输媒体不属于计算机网络体系结构的任何一层。如果非要将它添加到体系结构中，那只能将其放置到物理层之下。</p><h2 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h2><p>在导引型传输媒体中，电磁波被导引沿着固体媒体传播。</p><p><strong>同轴电缆</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192626.png" alt="image-20201008132050917"></p><p><strong>双绞线</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192628.png" alt="image-20201008132225715"></p><p><strong>光纤</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192630.png" alt="image-20201008132403903"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192631.png" alt="image-20201011001240573"></p><blockquote><p><strong>多模光纤</strong></p><ul><li>可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为<strong>多模光纤</strong>。</li></ul><p><strong>单模光纤</strong></p><ul><li>若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为<strong>单模光纤</strong>。</li></ul></blockquote><p><strong>电力线</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192633.png" alt="image-20201008132709015"></p><h2 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h2><p>非导引型传输媒体是指自由空间。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192634.png" alt="image-20201008132857833"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192635.png" alt="image-20201008132943176"></p><p><strong>无线电波</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192637.png" alt="image-20201008133135659"></p><p><strong>微波</strong></p><p><img src="https://s2.loli.net/2022/03/01/wulLW7pR6eG91Qh.png" alt="image-20201008133317293"></p><p><strong>红外线</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192640.png" alt="image-20201008133421986"></p><p><strong>可见光</strong></p><p><a href="https://baike.baidu.com/item/%E5%8F%AF%E8%A7%81%E5%85%89%E6%97%A0%E7%BA%BF%E9%80%9A%E4%BF%A1/16268518?fromtitle=LiFi&fromid=5675729&fr=aladdin">LIFI</a></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192641.png" alt="image-20201008133718810"></p><hr><h1 id="2-3、传输方式"><a href="#2-3、传输方式" class="headerlink" title="2.3、传输方式"></a>2.3、传输方式</h1><h2 id="串行传输和并行传输"><a href="#串行传输和并行传输" class="headerlink" title="串行传输和并行传输"></a>串行传输和并行传输</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192643.png" alt="image-20201008135603009"></p><blockquote><p><strong>串行传输</strong>：</p><ul><li>数据是一个比特一个比特依次发送的，因此在发送端与接收端之间，只需要一条数据传输线路即可</li></ul><p><strong>并行传输</strong>：</p><ul><li><p>一次发送n个比特，因此，在发送端和接收端之间需要有n条传输线路</p></li><li><p>并行传输的优点是比串行传输的速度n倍，但成本高</p></li></ul><p>数据在传输线路上的传输采用是<strong>串行传输</strong>，计算机内部的数据传输常用<strong>并行传输</strong></p></blockquote><h2 id="同步传输和异步传输"><a href="#同步传输和异步传输" class="headerlink" title="同步传输和异步传输"></a>同步传输和异步传输</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192645.png" alt="image-20201008140209430"></p><blockquote><p><strong>同步传输</strong>：</p><ul><li>数据块以稳定的比特流的形式传输。字节之间没有间隔</li><li>接收端在每个比特信号的中间时刻进行检测，以判别接收到的是比特0还是比特1</li><li>由于不同设备的时钟频率存在一定差异，不可能做到完全相同，在传输大量数据的过程中，所产生的判别时刻的累计误差，会导致接收端对比特信号的判别错位</li></ul><p>所以要使收发双发时钟保持同步</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192646.png" alt="image-20201008140850958"></p><blockquote><p><strong>异步传输</strong>：</p><ul><li>以字节为独立的传输单位，字节之间的时间间隔不是固定</li><li>接收端仅在每个字节的起始处对字节内的比特实现同步</li><li>通常在每个字节前后分别加上起始位和结束位</li></ul></blockquote><h2 id="单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）"><a href="#单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）" class="headerlink" title="单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）"></a>单向通信（单工）、双向交替通信（半双工）和双向同时通信（全双工）</h2><p>在许多情况下，我们要使用“<strong>信道（channel）</strong>”这一名词。信道和电路并不等同。信道一般都是用来表示向某一个方向传送信息的媒体。因此，一条通信电路往往包含一条发送信道和一条接收信道。</p><p>从通信的双方信息交互的方式来看，可以有以下三种基本方式：</p><p><strong>单向通信</strong>：</p><p>又称为<strong>单工通信</strong>，即只能有一个方向的通信而没有反方向的交互。无线电广播或有线电以及电视广播就属于这种类型</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192648.png" alt="image-20201008141345239"></p><p><strong>双向交替通信</strong>：</p><p>又称为<strong>半双工通信</strong>，即通信的双方可以发送信息，但不能双方同时发送（当然也就不能同时接收）。这种通信方式使一方发送另一方接收，过一段时间后可以再反过来</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192650.png" alt="image-20201008141921924"></p><p><strong>双向同时通信</strong>：</p><p>又称为<strong>全双工通信</strong>，即通信的双发可以同时发送和接收信息。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192652.png" alt="image-20201008142037846"></p><blockquote><p><strong>单向通信</strong>只需要一条信道，而<strong>双向交替通信</strong>或<strong>双向同时通信</strong>则需要两条信道（每个方向各一条）</p><p><strong>双向同时通信</strong>的传输效率最高</p></blockquote><h1 id="2-4、编码与调制"><a href="#2-4、编码与调制" class="headerlink" title="2.4、编码与调制"></a>2.4、编码与调制</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192654.png" alt="image-20201008144616896"></p><blockquote><p><strong>常用术语</strong></p><ul><li><p><strong>数据 (data)</strong> —— 运送消息的实体。</p></li><li><p><strong>信号 (signal)</strong> —— 数据的电气的或电磁的表现。 </p></li><li><p><strong>模拟信号 (analogous signal)</strong> —— 代表消息的参数的取值是连续的。 </p></li><li><p><strong>数字信号 (digital signal)</strong> —— 代表消息的参数的取值是离散的。 </p></li><li><p><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</p></li><li><p><strong>基带信号</strong>（即基本频带信号）—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</p></li><li><p>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行<strong>调制</strong>  (modulation)。</p></li></ul></blockquote><p>在计算机网络中，常见的是将数字基带信号通过编码或调制的方法在相应信道进行传输</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192655.png" alt="image-20201008145747263"></p><h2 id="传输媒体与信道的关系"><a href="#传输媒体与信道的关系" class="headerlink" title="传输媒体与信道的关系"></a><strong>传输媒体与信道的关系</strong></h2><blockquote><p><strong>信道的几个基本概念</strong></p><ul><li><strong>信道</strong> —— 一般用来表示向某一个方向传送信息的媒体。</li><li><strong>单向通信（单工通信）</strong>——只能有一个方向的通信而没有反方向的交互。</li><li><strong>双向交替通信（半双工通信）</strong>——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li><strong>双向同时通信（全双工通信）</strong>——通信的双方可以同时发送和接收信息。</li></ul></blockquote><p>严格来说，传输媒体不能和信道划等号</p><p>对于单工传输，传输媒体只包含一个信道，要么是发送信道，要么是接收信道</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192657.png" alt="image-20201008145304974"></p><p>对于半双工和全双工，传输媒体中要包含两个信道，一个发送信道，另一个是接收信道</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192658.png" alt="image-20201008145329540"></p><blockquote><p>如果使用信道复用技术，一条传输媒体还可以包含多个信道</p></blockquote><h2 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h2><p><strong>不归零编码</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192701.png" alt="image-20201008150058039"></p><blockquote><ul><li><p>正电平表示比特1&#x2F;0</p></li><li><p>负电平表示比特0&#x2F;1</p></li></ul><p>中间的虚线是零电平，所谓不归零编码，就是指在整个码元时间内，电平不会出现零电平</p><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192706.png" alt="image-20201008150528228"></p><blockquote><p>这需要发送方的发送与接收方的接收做到严格的同步</p><ul><li>需要<strong>额外一根传输线来传输时钟信号</strong>，使发送方和接收方同步，接收方按时钟信号的节拍来逐个接收码元</li><li><strong>但是</strong>对于计算机网络，<strong>宁愿利用这根传输线传输数据信号</strong>，而不是传输时钟信号</li></ul><p>由于<strong>不归零编码</strong>存在<strong>同步问题</strong>，因此计算机网络中的数据传输不采用这类编码！</p></blockquote><p><strong>归零编码</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192707.png" alt="image-20201008195033189"></p><img src="https://s2.loli.net/2022/03/01/KGvd46N1CFD3VY2.png" alt="image-20201008151347028" style="zoom:67%;" /><blockquote><p><strong>归零编码</strong>虽然<strong>自同步</strong>，但<strong>编码效率低</strong></p></blockquote><p><strong>曼彻斯特编码</strong></p><p><img src="https://s2.loli.net/2022/03/01/i9NmhH5UTfqRxka.png" alt="image-20201008195148727"></p><blockquote><p>在每个码元时间的中间时刻，信号都会发生跳变</p><ul><li>负跳变表示比特1&#x2F;0</li><li>正跳变表示比特0&#x2F;1</li><li>码元中间时刻的跳变即表示时钟，又表示数据</li></ul><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>传统以太网使用的就是曼切斯特编码</p></blockquote><p><strong>差分曼彻斯特编码</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192711.png" alt="image-20201008195235561"></p><blockquote><p>在每个码元时间的中间时刻，信号都会发送跳变，但与<strong>曼彻斯特不同</strong></p><ul><li><strong>跳变仅表示时钟</strong></li><li><strong>码元开始处电平是否变换表示数据</strong><ul><li>变化表示比特1&#x2F;0</li><li>不变化表示比特0&#x2F;1</li></ul></li></ul><p><strong>实际比特1和比特0的表示要看现实怎么规定</strong></p><p>比曼彻斯特编码变化少，更适合较高的传输速率</p></blockquote><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192713.png" alt="image-20201008153522501"></p><h2 id="调制"><a href="#调制" class="headerlink" title="调制"></a>调制</h2><p>数字信号转换为模拟信号，在模拟信道中传输，例如WiFi，采用补码键控CCK&#x2F;直接序列扩频DSSS&#x2F;正交频分复用OFDM等<strong>调制</strong>方式。</p><p>模拟信号转换为另一种模拟信号，在模拟信道中传输，例如，语音数据加载到模拟的载波信号中传输。频分复用FDM技术，充分利用带宽资源。</p><p><strong>基本调制方法</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192715.png" alt="image-20201008155429044"></p><blockquote><ul><li><strong>调幅AM</strong>：所调制的信号由两种不同振幅的基本波形构成。每个基本波形只能表示1比特信息量。</li><li><strong>调频FM</strong>：所调制的信号由两种不同频率的基本波形构成。每个基本波形只能表示1比特信息量。</li><li><strong>调相PM</strong>：所调制的信号由两种不同初相位的基本波形构成。每个基本波形只能表示1比特信息量。</li></ul><p>但是使用基本调制方法，1个码元只能包含1个比特信息</p></blockquote><p><strong>混合调制</strong></p><p><img src="https://s2.loli.net/2022/03/01/K5JcUmbkhP3YNul.png" alt="image-20201008155804617"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192716.png" alt="image-20201008155835940"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192718.png" alt="image-20201008155955169"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192720.png" alt="image-20201008160133748"></p><blockquote><p>上图码元所对应的4个比特是错误的，码元不能随便对应4个比特</p></blockquote><p><img src="https://s2.loli.net/2022/03/01/S9dRHlvVG3JWD4F.png" alt="image-20201008160208060"></p><h2 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h2><p>在使用时间域的波形表示数字信号时，代表不同离散数值的基本波形。</p><h1 id="2-5、信道的极限容量"><a href="#2-5、信道的极限容量" class="headerlink" title="2.5、信道的极限容量"></a>2.5、信道的极限容量</h1><ul><li>任何实际的信道都不是理想的，在传输信号时会产生各种失真以及带来多种干扰。 </li><li>码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192723.png" alt="image-20201010204336400"></p><p>失真的原因：</p><ul><li>码元传输的速率越高</li><li>信号传输的距离越远</li><li>噪声干扰越大</li><li>传输媒体质量越差</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192725.png" alt="image-20201010204818976"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192726.png" alt="image-20201010204928756"></p><p>奈氏准则和香农公式对比：</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192728.png" alt="image-20201010205029346"></p><h1 id="补充：信道复用技术"><a href="#补充：信道复用技术" class="headerlink" title="补充：信道复用技术"></a>补充：信道复用技术</h1><p>本节内容视频未讲到，是《计算机网络（第7版）谢希仁》物理层的内容</p><h2 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h2><p>复用 (multiplexing) 是通信技术中的基本概念。</p><p>它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192729.png" alt="image-20201011001949479"></p><p><strong>频分复用 FDM (Frequency Division Multiplexing)</strong></p><ul><li>将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。</li><li><strong>频分复用</strong>的所有用户在同样的时间<strong>占用不同的带宽资源</strong>（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192738.png" alt="image-20201011002236208"></p><p><strong>时分复用TDM (Time Division Multiplexing)</strong> </p><ul><li><strong>时分复用</strong>则是将时间划分为一段段等长的<strong>时分复用帧（TDM帧）</strong>。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。</li><li>每一个用户所占用的时隙是<strong>周期性地出现</strong>（其周期就是TDM帧的长度）的。</li><li>TDM 信号也称为<strong>等时</strong> (isochronous) 信号。</li><li><strong>时分复用的所有用户在不同的时间占用同样的频带宽度。</strong></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192740.png" alt="image-20201011002540041"></p><ul><li><strong>时分复用可能会造成线路资源的浪费</strong><ul><li>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</li></ul></li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192741.png" alt="image-20201011002842704"></p><p><strong>统计时分复用 STDM  (Statistic TDM)</strong> </p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192742.png" alt="image-20201011002953703"></p><h2 id="波分复用"><a href="#波分复用" class="headerlink" title="波分复用"></a>波分复用</h2><p>波分复用 WDM(Wavelength Division Multiplexing)</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192744.png" alt="image-20201011003214653"></p><h2 id="码分复用"><a href="#码分复用" class="headerlink" title="码分复用"></a>码分复用</h2><p>码分复用 CDM  (Code Division Multiplexing)</p><ul><li>常用的名词是<strong>码分多址</strong> CDMA (Code Division Multiple Access)。</li><li>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</li><li>这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络第一章（概述）</title>
      <link href="/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC1%E7%AB%A0%EF%BC%88%E6%A6%82%E8%BF%B0%EF%BC%89/"/>
      <url>/2022/03/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%AC1%E7%AB%A0%EF%BC%88%E6%A6%82%E8%BF%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔记来源：<a href="https://juejin.cn/user/615354217545245">https://juejin.cn/user/615354217545245</a></p></blockquote><h1 id="图示说明"><a href="#图示说明" class="headerlink" title="图示说明"></a>图示说明</h1><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192110.png" alt="image-20201007143815954" style="zoom: 50%;" />代表着主机</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192112.png" alt="image-20201007144130208" style="zoom:50%;" /> 代表服务器</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192117.png" alt="image-20201007143904153" style="zoom:50%;" /> 代表着路由器</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192119.png" alt="image-20201007143936128" style="zoom:50%;" />代表着网络</p><h1 id="1-1、计算机网络在信息时代的作用"><a href="#1-1、计算机网络在信息时代的作用" class="headerlink" title="1.1、计算机网络在信息时代的作用"></a>1.1、计算机网络在信息时代的作用</h1><ul><li>计算机网络已由一种<strong>通信基础设施</strong>发展成为一种重要的<strong>信息服务基础设施</strong></li><li>计算机网络已经像水，电，煤气这些基础设施一样，成为我们<strong>生活中不可或缺</strong>的一部分</li></ul><h2 id="我国互联网发展状况"><a href="#我国互联网发展状况" class="headerlink" title="我国互联网发展状况"></a>我国互联网发展状况</h2><p><a href="http://www.cnnic.net.cn/">中国互联网络信息中心CNNIC</a></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192123.png" alt="image-20201006160618748"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192129.png" alt="image-20201006160645887"></p><p><img src="https://s2.loli.net/2022/03/01/fbX6sSaRulkj5O7.png" alt="image-20201006160715764"></p><hr><h1 id="1-2、因特网概述"><a href="#1-2、因特网概述" class="headerlink" title="1.2、因特网概述"></a>1.2、因特网概述</h1><h2 id="1、网络、互连网（互联网）和因特网"><a href="#1、网络、互连网（互联网）和因特网" class="headerlink" title="1、网络、互连网（互联网）和因特网"></a>1、网络、互连网（互联网）和因特网</h2><p>网络：网络（Network）由若干<strong>结点（Node）</strong>和连接这些结点的<strong>链路（Link）</strong>组成。</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192131.png" alt="image-20201006163406232" style="zoom: 50%;" /><p>互连网（互联网）：多个网络通过路由器互连起来，这样就构成了一个覆盖范围更大的网络，即互连网（互联网）。因此，互联网又称为“网络的网络（Network of Networks）”。</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192133.png" alt="image-20201006163857236" style="zoom:50%;" /><p>因特网：因特网（Internet）是世界上最大的互连网络（用户数以亿计，互连的网络数以百万计）。</p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192134.png" alt="image-20201006164114523" style="zoom:50%;" /><blockquote><p><strong>internet与Internet的区别</strong></p><ul><li><strong>internet(互联网或互连网)<strong>是一个通用名词，它泛指</strong>多个计算机网络互连而成的网络</strong>。在这些网络之间的通信协议可以是任意的。</li><li><strong>Internet（因特网）则是一个专用名词</strong>，它指<strong>当前全球最大的、开放的、由众多网络互连而成的特定计算机网络</strong>，它采用TCP&#x2F;IP协议族作为通信的规则，其前身是美国的ARPANET。</li></ul><p><strong>任意把几个计算机网络互连起来（不管采用什么协议），并能够相互通信，这样构成的是一个互连网(internet) ，而不是互联网(Internet)。</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192135.png" alt="image-20201010233227407"></p><h2 id="2、因特网发展的三个阶段"><a href="#2、因特网发展的三个阶段" class="headerlink" title="2、因特网发展的三个阶段"></a>2、因特网发展的三个阶段</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192137.png" alt="image-20201006164655173"></p><p><strong>因特网服务提供者<code>ISP</code>(<code>I</code>nternet <code>S</code>ervice <code>P</code>rovider)</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192138.png" alt="image-20201006165117756" style="zoom:67%;" /><blockquote><p>普通用户是如何接入到因特网的呢？</p><p>答：<strong>通过ISP接入因特网</strong></p><p>ISP可以从因特网管理机构申请到成块的IP地址，同时拥有通信线路以及路由器等联网设备。任何机构和个人只需缴纳费用，就可从<strong>ISP的得到所需要的IP地址</strong>。</p><p><strong>因为因特网上的主机都必须有IP地址才能进行通信，这样就可以通过该ISP接入到因特网</strong></p></blockquote><p><strong>中国的三大<code>ISP</code>：中国电信，中国联通和中国移动</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192232.png" alt="image-20201006165738879" style="zoom:67%;" /><p><strong>基于ISP的三层结构的因特网</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192234.png" alt="image-20201006170140504" style="zoom:67%;" /><blockquote><p>一旦某个用户能够接入到因特网，那么他也可以成为一个ISP，所需要做的就是购买一些如调制解调器或路由器这样的设备，让其他用户可以和他相连。</p></blockquote><h2 id="3、因特网的标准化工作"><a href="#3、因特网的标准化工作" class="headerlink" title="3、因特网的标准化工作"></a>3、因特网的标准化工作</h2><ul><li>因特网的标准化工作对因特网的发展起到了非常重要的作用。</li><li>因特网在指定其标准上的一个很大的特点是<strong>面向公众。</strong><ul><li>因特网所有的<strong>RFC</strong>(Request For Comments)技术文档都可从因特网上免费下载；</li><li>任何人都可以随时用电子邮件发表对某个文档的意见或建议。</li></ul></li><li><strong>因特网协会ISOC</strong>是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用。<ul><li>因特网体系结构委员会IAB，负责管理因特网有关协议的开发；</li><li>因特网工程部IETF，负责研究中短期工程问题，主要针对协议的开发和标准化；</li><li>因特网研究部IRTF，从事理论方面的研究和开发一些需要长期考虑的问题。</li></ul></li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192153.png" alt="image-20201006170959060" style="zoom:67%;" /><ul><li><p>制订因特网的正式标准要经过一下<strong>4个阶段</strong>：</p><p>1、因特网草案（在这个阶段还不是RFC文档）</p><p>2、建议标准（从这个阶段开始就成为RFC文档）</p><p>3、草案标准</p><p>4、因特网标准</p></li></ul><h2 id="4、因特网的组成"><a href="#4、因特网的组成" class="headerlink" title="4、因特网的组成"></a>4、因特网的组成</h2><ul><li><p>边缘部分</p><p>由所有连接在因特网上的<strong>主机</strong>组成（台式电脑，大型服务器，笔记本电脑，平板，智能手机等）。这部分是<strong>用户直接使用</strong>的，用来进行<strong>通信</strong>（传送数据、音频或视频）和<strong>资源共享</strong>。</p></li><li><p>核心部分</p><p>由<strong>大量网络</strong>和连接这些网络的<strong>路由器</strong>组成。这部分是<strong>为边缘部分提供服务</strong>的（提供连通性和交换）。</p></li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192246.png" alt="image-20201006180725282" style="zoom:67%;" /><blockquote><p>路由器是一种专用计算机，但我们不称它为主机，路由器是实现分组交换的关键构建，其任务是转发收到的分组，这是网络核心最重要的部分。</p><p>处在互联网边缘的部分就是连接在互联网上的所有的主机。这些主机又称为**端系统 (end system)**。</p><p><strong>端系统在功能上可能有很大的差别：</strong></p><ol><li><p>小的端系统可以是一台普通个人电脑，具有上网功能的智能手机，甚至是一个很小的网络摄像头。</p></li><li><p>大的端系统则可以是一台非常昂贵的大型计算机。</p></li><li><p>端系统的拥有者可以是个人，也可以是单位（如学校、企业、政府机关等），当然也可以是某个ISP。</p></li></ol></blockquote><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p><strong>端系统之间通信的含义</strong></p><p>“主机 A 和主机 B 进行通信”实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。<strong>即“主机</strong> <strong>A</strong> <strong>的某个进程和主机</strong> <strong>B</strong> <strong>上的另一个进程进行通信”。简称为“计算机之间通信”。</strong> </p><p>端系统之间的通信方式通常可划分为两大类：</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192255.png" alt="image-20201010234145371"></p><p><strong>客户-服务器方式：</strong></p><ul><li>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。</li><li>客户 - 服务器方式所描述的是进程之间服务和被服务的关系。</li><li>客户是服务的请求方，服务器是服务的提供方。</li></ul><blockquote><p><strong>服务请求方和服务提供方都要使用网络核心部分所提供的服务。</strong></p></blockquote><p><strong>对等连接方式：</strong></p><ul><li><strong>对等连接</strong> (peer-to-peer，简写为 <strong>P2P</strong> ) 是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。</li><li>只要两个主机都运行了对等连接软件 ( P2P 软件) ，它们就可以进行<strong>平等的、对等连接通信</strong>。</li><li>双方都可以下载对方已经存储在硬盘中的共享文档。</li></ul><hr><h1 id="1-3-三种交换方式"><a href="#1-3-三种交换方式" class="headerlink" title="1.3 三种交换方式"></a>1.3 三种交换方式</h1><p>网络核心部分是互联网中最复杂的部分。</p><p>网络中的核心部分要向网络边缘中的大量主机提供连通性，使边缘部分中的任何一个主机都能够向其他主机通信（即传送或接收各种形式的数据）。</p><p>在网络核心部分起特殊作用的是<strong>路由器</strong>(router)。</p><p><strong>路由器</strong>是实现<strong>分组交换</strong> (packet switching) 的关键构件，其任务是<strong>转发</strong>收到的分组，这是网络核心部分最重要的功能。</p><h2 id="1、电路交换（Circuit-Switching）"><a href="#1、电路交换（Circuit-Switching）" class="headerlink" title="1、电路交换（Circuit Switching）"></a>1、电路交换（Circuit Switching）</h2><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192300.png" alt="image-20201006182240000" style="zoom:67%;" /><blockquote><p>传统两两相连的方式，当电话数量很多时，电话线也很多，就很不方便</p><p>所以要使得每一部电话能够很方便地和另一部电话进行通信，就应该使用一个<strong>中间设备</strong>将这些电话连接起来，这个中间设备就是<strong>电话交换机</strong></p></blockquote><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192302.png" alt="image-20201006182634249" style="zoom:50%;" /><ul><li><p>电话交换机接通电话线的方式称为电路交换；</p></li><li><p>从通信资源的分配角度来看，交换（Switching）就是按照某种方式动态地分配传输线路的资源；</p></li><li><p>电路交换的三个步骤：</p><p>1、建立连接（分配通信资源）</p><p>2、通话（一直占用通信资源）</p><p>3、释放连接（归还通信资源）</p></li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192304.png" alt="image-20201006183020317" style="zoom:67%;" /><blockquote><p>当使用电路交换来传送计算机数据时，其线路的传输效率往往很低。</p><p>这是因为计算机数据是突发式地出现在传输线路上的。</p><p>所以计算机通常采用的是<strong>分组交换</strong>，而不是线路交换</p></blockquote><h2 id="2、分组交换（Packet-Switching）"><a href="#2、分组交换（Packet-Switching）" class="headerlink" title="2、分组交换（Packet Switching）"></a>2、分组交换（Packet Switching）</h2><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192305.png" alt="image-20201006183312843" style="zoom:67%;" /><blockquote><p>通常我们把表示<strong>该消息的整块数据</strong>成为一个<strong>报文</strong>。</p><p>在发送报文之前，先把较长的报文划分成一个个更小的<strong>等长数据段</strong>，在每一个数据段前面。加上一些由必<strong>要的控制信息组成的首部</strong>后，就构成一个分组，也可简称为“包”，相应地，首部也可称为“包头”。</p><p>首部包含了<strong>分组的目的地址</strong></p><p>分组从源主机到目的主机，可走不同的路径。</p></blockquote><p>发送方</p><ul><li>构造分组</li><li>发送分组</li></ul><p>路由器</p><ul><li>缓存分组</li><li>转发分组</li><li>简称为“分组转发”</li></ul><blockquote><p>在路由器中的输入和输出端口之间没有直接连线。</p><p>路由器处理分组的过程是：</p><ol><li>把收到的分组先<strong>放入缓存（暂时存储）；</strong></li><li><strong>查找转发表</strong>，找出到某个目的地址应从哪个端口转发；</li><li>把分组送到适当的端口<strong>转发</strong>出去。</li></ol></blockquote><p>接收方</p><ul><li>接收分组</li><li>还原报文</li></ul><h2 id="3、报文交换（Message-Switching）"><a href="#3、报文交换（Message-Switching）" class="headerlink" title="3、报文交换（Message Switching）"></a>3、报文交换（Message Switching）</h2><p>报文交换中的交换结点也采用存储转发方式，但报文交换对报文的大小没有限制，这就要求交换结点需要较大的缓存空间。报文交换主要用于早期的电报通信网，现在较少使用，<strong>通常被较先进的分组交换方式所取代</strong>。</p><h2 id="三种交换方式的对比"><a href="#三种交换方式的对比" class="headerlink" title="三种交换方式的对比"></a>三种交换方式的对比</h2><blockquote><p>假设A，B，C，D是分组传输路径所要经过的4个结点交换机，纵坐标为时间</p></blockquote><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192307.png" alt="image-20201006184451671" style="zoom:67%;" /><p>分析：</p><p>电路交换：</p><ul><li><p>通信之前首先要建立连接；连接建立好之后，就可以使用已建立好的连接进行数据传送；数据传送后，需释放连接，以归还之前建立连接所占用的通信线路资源。</p></li><li><p>一旦建立连接，中间的各结点交换机就是直通形式的，比特流可以直达终点；</p></li></ul><p>报文交换：</p><ul><li>可以随时发送报文，而不需要事先建立连接；整个报文先传送到相邻结点交换机，全部存储下来后进行查表转发，转发到下一个结点交换机。</li><li>整个报文需要在各结点交换机上进行存储转发，由于不限制报文大小，因此需要各结点交换机都具有较大的缓存空间。</li></ul><p>分组交换：</p><ul><li>可以随时发送分组，而不需要事先建立连接。构成原始报文的一个个分组，依次在各结点交换机上存储转发。各结点交换机在发送分组的同时，还缓存接收到的分组。</li><li>构成原始报文的一个个分组，在各结点交换机上进行存储转发，相比报文交换，减少了转发时延，还可以避免过长的报文长时间占用链路，同时也有利于进行差错控制。</li></ul><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192309.png" alt="image-20201006185601460"></p><hr><h1 id="1-4-计算机网络的定义和分类"><a href="#1-4-计算机网络的定义和分类" class="headerlink" title="1.4 计算机网络的定义和分类"></a>1.4 计算机网络的定义和分类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li>计算机网络的精确定义并未统一</li><li>计算机网络的最简单的定义是：一些<strong>互</strong>相<strong>连</strong>接的、<strong>自治</strong>的计算机的<strong>集合</strong>。<ul><li>互连：是指计算机之间可以通过有线或无线的方式进行数据通信；</li><li>自治：是指独立的计算机，他有自己的硬件和软件，可以单独运行使用；</li><li>集合：是指至少需要两台计算机；</li></ul></li><li>计算机网络的较好的定义是：计算机网络主要是由一些<strong>通用的，可编程的硬件（一定包含有中央处理机CPU）互连</strong>而成的，而这些硬件并非专门用来实现某一特定目的（例如，传送数据或视频信号）。这些可编程的硬件能够用来<strong>传送多种不同类型的数据</strong>，并能<strong>支持广泛的和日益增长的应用</strong>。<ul><li>计算机网络所连接的硬件，并不限于一般的计算机，而是包括了智能手机等智能硬件。</li><li>计算机网络并非专门用来传送数据，而是能够支持很多种的应用（包括今后可能出现的各种应用）。</li></ul></li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p><strong>按交换技术分类：</strong></p><ul><li>电路交换网络</li><li>报文交换网络</li><li>分组交换网络</li></ul><p><strong>按使用者分类：</strong></p><ul><li>公用网</li><li>专用网</li></ul><p><strong>按传输介质分类：</strong></p><ul><li>有线网络</li><li>无线网络</li></ul><p><strong>按覆盖范围分类：</strong></p><ul><li>广域网WAN（Wide Area Network）</li></ul><p>作用范围通常为几十到几千公里，因而有时也称为远程网（long haul network）。广域网是互联网的核心部分，其任务是通过长距离（例如，跨越不同的国家）运送主机所发送的数据。</p><ul><li>城域网MAN</li></ul><p>作用范围一般是一个城市，可跨越几个街区甚至整个城市</p><ul><li>局域网LAN</li></ul><p>一般用微型计算机或工作站通过高速通信线路相连（速率通常在 10 Mbit&#x2F;s 以上），但地理上范围较小（1 km 左右）</p><ul><li>个域网PAN</li></ul><p>就是在个人工作的地方把个人使用的电子设备用无线技术连接起来的网络。</p><p><strong>按拓扑结构分类：</strong></p><ul><li>总线型网络</li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192312.png" alt="image-20201007005149993" style="zoom: 67%;" /><ul><li>星型网络</li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192313.png" alt="image-20201007005203129" style="zoom:67%;" /><ul><li>环形网络</li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192315.png" alt="image-20201007005212345" style="zoom:67%;" /><ul><li>网状型网络</li></ul><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192316.png" alt="image-20201007005249137" style="zoom:67%;" /><hr><h1 id="1-5-计算机网络的性能指标"><a href="#1-5-计算机网络的性能指标" class="headerlink" title="1.5 计算机网络的性能指标"></a>1.5 计算机网络的性能指标</h1><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192318.png" alt="image-20201007012419698"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192320.png" alt="image-20201007012439769"></p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192322.png" alt="image-20201007012943970"></p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192323.png" alt="image-20201007013119621"></p><blockquote><p>带宽1 Gb&#x2F;s的以太网，代表其额定速率是1 Gb&#x2F;s，这个数值也是该以太网的<strong>吞吐量的绝对上限值</strong>。因此，对于带宽1 Gb&#x2F;s的以太网，可能实际吞吐量只有 700 Mb&#x2F;s，甚至更低。</p><p>注意：吞吐量还可以用每秒传送的字节数或帧数表示</p></blockquote><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>时延时指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</p><p>网络时延由几部分组成：</p><ul><li>发送时延</li></ul><p>主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</p><ul><li>传播时延</li></ul><p>电磁波在信道中传播一定的距离需要花费的时间。</p><ul><li>处理时延</li></ul><p>主机或路由器在收到分组时要花费一定时间进行处理</p><ul><li>排队时延</li></ul><p>分组在进过网络传输时，要经过许多路由器。但分组在进入路由器后要先在输入队列中排队等待处理。</p><blockquote><p>有时会把排队时延看成<strong>处理时延 一部分</strong></p><p>总时延 &#x3D; 发送时延 + 传播时延 + 处理时延 （处理时延 + 排队时延）</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192328.png" alt="image-20201007014139333"></p><p><img src="https://s2.loli.net/2022/03/01/j9gNa2d5YVASwFi.png" alt="image-20201007015401505"></p><blockquote><p>当处理时延忽略不计时，发送时延 和 传播时延谁占主导，要具体情况具体分析</p></blockquote><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><p>时延带宽积 &#x3D; 传播时延 * 带宽</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192331.png" alt="image-20201007115317347"></p><h2 id="往返时间"><a href="#往返时间" class="headerlink" title="往返时间"></a>往返时间</h2><p>互联网上的信息不仅仅单方向传输而是双向交互的。因此，我们有时很需要知道<strong>双向交互一次所需的时间</strong>。</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192333.png" alt="image-20201007115647631"></p><h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2><p>利用率有<strong>信道利用率</strong>和<strong>网络利用率</strong>两种。</p><p>  <img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192335.png" alt="image-20201012164544306"></p><h2 id="丢包率"><a href="#丢包率" class="headerlink" title="丢包率"></a>丢包率</h2><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192336.png" alt="image-20201007132900210"></p><hr><h1 id="1-6-计算机网络体系结构"><a href="#1-6-计算机网络体系结构" class="headerlink" title="1.6 计算机网络体系结构"></a>1.6 计算机网络体系结构</h1><h2 id="1、常见的计算机网络体系结构"><a href="#1、常见的计算机网络体系结构" class="headerlink" title="1、常见的计算机网络体系结构"></a>1、常见的计算机网络体系结构</h2><img src="https://s2.loli.net/2022/03/01/z74iWEopKD56FnR.png" alt="image-20201007133848212" style="zoom:50%;" /><blockquote><p>如今用的最多的是TCP&#x2F;IP体系结构，现今规模最大的、覆盖全球的、基于TCP&#x2F;IP的互联网并未使用OSI标准。</p><p>TCP&#x2F;IP体系结构相当于将OSI体系结构的<strong>物理层</strong>和<strong>数据链路层</strong>合并为了<strong>网络接口层</strong>，并去掉了<strong>会话层</strong>和<strong>表示层</strong>。</p><p>TCP&#x2F;IP在网络层使用的协议是IP协议，IP协议的意思是网际协议，因此<strong>TCP&#x2F;IP体系结构的网络层称为网际层</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192344.png" alt="image-20201007135220030"></p><blockquote><p>在用户主机的操作系统中，通常都带有符合TCP&#x2F;IP体系结构标准的TCP&#x2F;IP协议族。</p><p>而用于网络互连的路由器中，也带有符合TCP&#x2F;IP体系结构标准的TCP&#x2F;IP协议族。</p><p>只不过路由器一般只包含网络接口层和网际层。</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192348.png" alt="image-20201007135518050"></p><blockquote><p><strong>网络接口层</strong>：并没有规定具体内容，这样做的目的是可以互连全世界各种不同的网络接口，例如：有线的以太网接口，无线局域网的WIFI接口等。</p><p><strong>网际层</strong>：它的核心协议是IP协议。</p><p><strong>运输层</strong>：TCP和UDP是这层的两个重要协议。</p><p><strong>应用层</strong>：这层包含了大量的应用层协议，如 HTTP , DNS 等。</p></blockquote><blockquote><p><strong>IP协议（网际层）</strong>可以将不同的<strong>网络接口（网络接口层）</strong>进行互连，并向其上的<strong>TCP协议和UDP协议（运输层）</strong>提供网络互连服务</p><p>而<strong>TCP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>可靠</strong>的传输服务。</p><p><strong>UDP协议</strong>在享受IP协议提供的网络互连服务的基础上，可向<strong>应用层的相应协议</strong>提供<strong>不可靠</strong>的传输服务。</p></blockquote><blockquote><p>TCP&#x2F;IP体系结构中最重要的是<strong>IP协议</strong>和<strong>TCP协议</strong>，因此用TCP和IP来表示整个协议大家族。</p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192349.png" alt="image-20201007141110338"></p><blockquote><p>教学时把TCP&#x2F;IP体系结构的<strong>网络接口层</strong>分成了<strong>物理层</strong>和<strong>数据链路层</strong></p></blockquote><h2 id="2、计算机网络体系结构分层的必要性"><a href="#2、计算机网络体系结构分层的必要性" class="headerlink" title="2、计算机网络体系结构分层的必要性"></a>2、计算机网络体系结构分层的必要性</h2><p><img src="https://s2.loli.net/2022/03/01/6ZMtvd5NckLznrx.png" alt="image-20201007141318411"></p><p><strong>物理层问题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192351.png" alt="image-20201007141806675"></p><blockquote><p>这图说明</p><ul><li>第一，严格来说，传输媒体并不属于物理层</li><li>计算机传输的信号，并不是图示的方波信号</li></ul><p>这样举例只是让初学者容易理解</p></blockquote><p><strong>数据链路层问题</strong></p><p><img src="https://s2.loli.net/2022/03/01/9vN6pPDXx4Ma2Kd.png" alt="image-20201007142049812"></p><p><strong>网络层问题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192354.png" alt="image-20201007142408792"></p><p><strong>运输层问题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192355.png" alt="image-20201007142631029"></p><blockquote><p>如何标识与网络通信相关的应用进程：一个分组到来，我们应该交给哪个进程处理呢？浏览器进程还是QQ进程</p></blockquote><p><strong>应用层问题</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192357.png" alt="image-20201007142755720"></p><blockquote><p>应用层该用什么方法（应用层协议）去解析数据</p></blockquote><p><strong>总结</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192359.png" alt="image-20201007204006284"></p><p><img src="https://s2.loli.net/2022/03/01/TKMfri8qPOluLxD.png" alt="image-20201007143138937"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192400.png" alt="image-20201007195641140"></p><h2 id="3、计算机网络体系结构分层思想举例"><a href="#3、计算机网络体系结构分层思想举例" class="headerlink" title="3、计算机网络体系结构分层思想举例"></a>3、计算机网络体系结构分层思想举例</h2><p>例子：主机的浏览器如何与Web服务器进行通信</p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192401.png" alt="image-20201007144900565"></p><p><strong>解析：</strong></p><p>主机和Web服务器之间基于网络的通信，实际上是主机中的<strong>浏览器应用进程</strong>与Web服务器中的<strong>Web服务器应用进程</strong>之间基于<strong>网络的通信</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192403.png" alt="image-20201007145242020"></p><p><strong>体系结构的各层在整个过程中起到怎样的作用？</strong></p><p><strong>1、发送方发送</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192409.png" alt="image-20201007145441370"></p><blockquote><p>第一步：</p><ul><li><strong>应用层</strong>按照HTTP协议的规定构建一个<strong>HTTP请求报文</strong></li><li>应用层将<strong>HTTP请求报文</strong>交付给<strong>运输层</strong>处理</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192416.png" alt="image-20201007145720661"></p><blockquote><p>第二步：</p><ul><li><strong>运输层</strong>给<strong>HTTP请求报文</strong>添加一个<strong>TCP首部</strong>，使之成为<strong>TCP报文段</strong></li><li><strong>TCP报文段的首部格式</strong>作用是区分应用进程以及实现可靠传输</li><li><strong>运输层</strong>将T<strong>CP报文段</strong>交付给<strong>网络层</strong>处理</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192418.png" alt="image-20201007150234909"></p><blockquote><p>第三步：</p><ul><li><strong>网络层</strong>给<strong>TCP报文段</strong>添加一个<strong>IP首部</strong>，使之成为<strong>IP数据报</strong></li><li><strong>IP数据报的首部格式</strong>作用是使<strong>IP数据报</strong>可以在互联网传输，也就是被路由器转发</li><li><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong>处理</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192429.png" alt="image-20201007150723365"></p><blockquote><p>第四步：</p><ul><li><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong>     （图示右边为首部，左边为尾部） </li><li>该<strong>首部</strong>的作用主要是为了让<strong>帧</strong>能够在一段链路上或一个网络上传输，能够被相应的目的主机接收</li><li>该<strong>尾部</strong>的作用是让目的主机检查所接收到的<strong>帧</strong>是否有误码</li><li><strong>数据链路层</strong>将<strong>帧</strong>交付给<strong>物理层</strong></li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192437.png" alt="image-20201007151342502"></p><blockquote><p>第五步：</p><ul><li><strong>物理层</strong>先将<strong>帧</strong>看做是<strong>比特流</strong>，这里的网络N1假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></li><li><strong>前导码</strong>的作用是为了让目的主机做好接收帧的准备</li><li><strong>物理层</strong>将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体</li></ul></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192438.png" alt="image-20201007151900254"></p><blockquote><p>第六步：</p><ul><li><strong>信号</strong>通过<strong>传输媒体</strong>到达<strong>路由器</strong></li></ul></blockquote><p><strong>2、路由器转发</strong></p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192441.png" alt="image-20201007152029458" style="zoom:50%;" /><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192442.png" alt="image-20201007152138961" style="zoom:50%;" /><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192444.png" alt="image-20201007152627778" style="zoom:50%;" /><blockquote><p>在路由器中</p><ul><li><strong>物理层</strong>将<strong>信号</strong>变为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后，将其交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后，将其交付给<strong>网络层</strong>，这实际交付的是<strong>IP数据报</strong></li><li><strong>网络层</strong>解析<strong>IP数据报</strong>的<strong>首部</strong>，从中提取<strong>目的网络地址</strong></li></ul></blockquote><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192446.png" alt="image-20201007152650863" style="zoom:50%;" /><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192447.png" alt="image-20201007152812431" style="zoom:50%;" /><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192450.png" alt="image-20201007153714840" style="zoom:50%;" /><blockquote><p>在路由器中</p><ul><li>提取<strong>目的网络地址</strong>后查找<strong>自身路由表</strong>。确定<strong>转发端口</strong>， 以便进行转发</li><li><strong>网络层</strong>将<strong>IP数据报</strong>交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>给<strong>IP数据报</strong>添加一个<strong>首部</strong>和一个<strong>尾部</strong>，使之成为<strong>帧</strong></li><li><strong>数据链路层</strong>将帧交付给<strong>物理层</strong></li><li><strong>物理层</strong>先将<strong>帧</strong>看成<strong>比特流</strong>，这里的网络N2假设是以太网，所以<strong>物理层</strong>还会给该<strong>比特流</strong>前面添加<strong>前导码</strong></li><li>物理层将装有<strong>前导码</strong>的<strong>比特流</strong>变换成相应的<strong>信号</strong>发送给传输媒体，信号通过传输媒体到达<strong>Web服务器</strong></li></ul></blockquote><p><strong>3、接收方接收</strong></p><blockquote><p>和发送方（主机）发送过程的封装正好是反着来</p><p>在Web 服务器上</p><ul><li><strong>物理层</strong>将<strong>信号</strong>变换为<strong>比特流</strong>，然后去掉<strong>前导码</strong>后成为<strong>帧</strong>，交付给<strong>数据链路层</strong></li><li><strong>数据链路层</strong>将<strong>帧</strong>的<strong>首部</strong>和<strong>尾部</strong>去掉后成为<strong>IP数据报</strong>，将其交付给<strong>网络层</strong></li><li><strong>网络层</strong>将<strong>IP数据报</strong>的<strong>首部</strong>去掉后成为<strong>TCP报文段</strong>，将其交付给<strong>运输层</strong></li><li><strong>运输层</strong>将<strong>TCP报文段</strong>的<strong>首部</strong>去掉后成为<strong>HTTP请求报文</strong>，将其交付给<strong>应用层</strong></li><li><strong>应用层</strong>对<strong>HTTP请求报文</strong>进行<strong>解析</strong>，然后给主机发回<strong>响应报文</strong></li></ul><p><strong>发回响应报文的步骤和之前过程类似</strong></p></blockquote><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192453.png" alt="image-20201007155051275"></p><h2 id="4、计算机网络体系结构中的专用术语"><a href="#4、计算机网络体系结构中的专用术语" class="headerlink" title="4、计算机网络体系结构中的专用术语"></a>4、计算机网络体系结构中的专用术语</h2><p>以下介绍的专用术语来源于OSI的七层协议体系结构，但也适用于TCP&#x2F;IP的四层体系结构和五层协议体系结构</p><p><strong>实体</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192454.png" alt="image-20201007155444920"></p><p><strong>协议</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192456.png" alt="image-20201007155545934"></p><blockquote><p>协议：控制两个对等实体进行逻辑通信的规则的集合</p><p>协议三要素：</p><ul><li>语法：定义所交换信息的格式</li><li>语义：定义收发双方所要完成的操作</li><li>同步：定义收发双发的时序关系</li></ul></blockquote><p><strong>服务</strong></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192457.png" alt="image-20201007160246561"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192458.png" alt="image-20201016104750288"></p><p><img src="https://gitee.com/Joy-Han/pictures/raw/master/img/20220301192500.png" alt="image-20201007162620250"></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（十）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%8D%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><h3 id="第一章：原生AJAX"><a href="#第一章：原生AJAX" class="headerlink" title="第一章：原生AJAX"></a>第一章：原生AJAX</h3><h4 id="1-1-AJAX-简介"><a href="#1-1-AJAX-简介" class="headerlink" title="1.1 AJAX 简介"></a>1.1 AJAX 简介</h4><p>就是异步的 <strong>JS</strong> 和 <strong>XML</strong></p><p>通过 <strong>AJAX</strong> 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据</p><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式</p><h4 id="1-2-XML简介"><a href="#1-2-XML简介" class="headerlink" title="1.2 XML简介"></a>1.2 XML简介</h4><p>XML 可扩展标记语言</p><p>用来传输和存储数据</p><p>与HTML不同的是HTML都是预定义标签,XML没有预定义标签，全是自定义标签，用来表示一些数据</p><p>现在已经被 JSON 取代了</p><h4 id="1-3-AJAX-的特点"><a href="#1-3-AJAX-的特点" class="headerlink" title="1.3 AJAX 的特点"></a>1.3 AJAX 的特点</h4><h5 id="1-3-1-AJAX的优点"><a href="#1-3-1-AJAX的优点" class="headerlink" title="1.3.1 AJAX的优点"></a>1.3.1 AJAX的优点</h5><p>1）可以无需刷新页面而与服务器端进行通信</p><p>2）允许你根据用户事件来更新部分页面内容</p><h5 id="1-3-2-AJAX-的缺点"><a href="#1-3-2-AJAX-的缺点" class="headerlink" title="1.3.2 AJAX 的缺点"></a>1.3.2 AJAX 的缺点</h5><p>1）没有浏览历史，不能回退</p><p>2）存在跨域问题（同源）</p><p>3）SEO 不友好（爬虫爬不到？？？）</p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="#HTTP"></a>#HTTP</h4><p>超文本传输协议</p><p><strong>##请求报文</strong> </p><p>重点是格式和参数</p><p> 行  GET POST&#x2F;URL     HTTP&#x2F;1.1</p><p>头    Host:</p><p>​        Cookie:</p><p>​        Content-type:</p><p>​        User-Agent:</p><p>空行</p><p>体 username&#x3D;……</p><p><strong>##相应报文</strong></p><p>行 HTTP&#x2F;1&#x2F;1 200 OK</p><p>头    Content-Type:text&#x2F;htm;charset&#x3D;utf-8</p><p>​        Content-length:2048</p><p>​        Contene-encoding:gzip</p><p>空行</p><p>体 html……</p><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>服务器是提供了某种服务的电脑，一般没有显示器，没有输入设备</p><p>种类：文件服务器  邮件服务器  游戏服务器 <strong>web服务器</strong></p><p>如何成为web服务器？安装一个软件即可</p><ul><li><strong>apache 阿帕奇</strong> 开源的免费web服务器软件 目前使用人数最多的web服务器软件</li><li>IIS 微软的web服务器软件 不开源→开源</li><li>tomcat</li><li>Nginx</li></ul><h4 id="1-1-安装phpstudy"><a href="#1-1-安装phpstudy" class="headerlink" title="1.1. 安装phpstudy"></a>1.1. 安装phpstudy</h4><p>……</p><p><strong>端口</strong>：</p><p>电脑需要为软件分配资源 不同的端口</p><p>默认服务器软件的端口是 80</p><p>如果被使用了 可以更换别的端口 或者把占用的软件关掉即可</p><p><strong>本地回环地址：</strong></p><p>127.0.0.1</p><h4 id="1-2-CS-架构"><a href="#1-2-CS-架构" class="headerlink" title="1.2 CS 架构"></a>1.2 CS 架构</h4><p>cpu 至强</p><p>内存 十分的大</p><p>硬盘 固态</p><p>浏览器（Browser）</p><p>服务器(Server)</p><p>客户端（Client）</p><p><strong>软件架构</strong>：</p><p>​    1. <strong>B&amp;S架构</strong></p><ul><li><p>浏览器 服务器</p></li><li><p>常规的商业网站都是这种架构</p></li><li><p>特点：</p><p>只要有浏览器即可访问（基本上所有的系统都自带浏览器）</p><p>便捷</p><p>有网</p><p>特殊的C&amp;S</p></li></ul><ol start="2"><li><strong>C&amp;S架构</strong></li></ol><ul><li><p>客户端 服务器</p></li><li><p>特点：</p><p>必须安装对应的客户端 </p><p>能够感受非常酷炫的性能画面</p></li></ul><h4 id="1-3-数据库"><a href="#1-3-数据库" class="headerlink" title="1.3 数据库"></a>1.3 数据库</h4><ul><li><strong>MYSQL</strong>（开源免费）</li><li>MSSQL（微软的）</li><li>……</li></ul><p>数据库管理员（DBS）</p><p>优点：</p><ul><li>提供了很多保护数据的功能</li><li>可以备份</li><li>删除之后可以恢复</li><li>可以分配用户</li><li>不是所有用户都可以删除数据</li></ul><h3 id="2-后台开发"><a href="#2-后台开发" class="headerlink" title="2.后台开发"></a>2.后台开发</h3><h4 id="2-1-后台开发语言"><a href="#2-1-后台开发语言" class="headerlink" title="2.1 后台开发语言"></a>2.1 后台开发语言</h4><ul><li><p><strong>php</strong></p><p>语法跟 js 很像</p><p>亚洲用的多</p></li><li><p>java</p><p>世界上用的多</p></li><li><p>python</p></li><li><p>c++</p></li><li><p>c#</p></li><li><p>go</p></li><li><p>……</p></li></ul><h3 id="3-php语法"><a href="#3-php语法" class="headerlink" title="3. php语法"></a>3. php语法</h3><p>代码的编写位置在<code>&lt;?php 代码写在这里?&gt;</code></p><p>php 中字符串拼接的方式是 <code>.</code></p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a><strong>注释</strong></h4><p>php 注释的写法跟 js 一致</p><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a><strong>变量</strong></h5><ul><li>变量以<code>$</code>符号开头，其后是变量的名称。大小写敏感</li><li>变量名称必须以字母或下划线开头</li></ul><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a><strong>数据类型</strong></h5><p>PHP支持的数据类型包括：</p><ul><li>字符串</li><li>整数</li><li>浮点数</li><li>布尔</li><li>数组</li><li>对象</li><li>NULLL</li></ul><p>定义字符串时需要注意：</p><ul><li>单引号&#96;&#96; ：内部的内容只是作为字符串。</li><li>双引号”” ：如果内部是PHP的变量,那么会将该变量的值解析。如果内部是html代码，也会解析成html</li></ul><p>说白了，单引号里的内容，一定是字符串。双引号里的内容，可能会进行解析</p><h5 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a><strong>运算符</strong></h5><p>PHP 中的运算符跟 JavaScript 中的基本一致，用法也基本一致</p><ul><li>算数运算符：<code>+</code>、<code>-</code>、<code>/</code>、<code>*</code>、<code>%</code></li><li>赋值运算符：<code>x = y</code>、<code>x += y</code>,<code>x -= y</code>等</li></ul><h5 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a><strong>函数的定义</strong></h5><p>语法格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//这里写代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>（1）有参数、无返回值的函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$name</span>.<span class="string">&#x27;你好哦&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_ invoke__">sayName</span>(<span class="string">&#x27;smyhvae&#x27;</span>);</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>（2）有参数、参数有默认值的函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayFood</span>(<span class="params"><span class="variable">$food</span>=<span class="string">&#x27;西兰花&#x27;</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$food</span>.<span class="string">&#x27;好吃&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="title function_ invoke__">sayFood</span>(<span class="string">&#x27;西葫芦&#x27;</span>);<span class="comment">// 如果传入参数,就使用传入的参数</span></span><br><span class="line"><span class="title function_ invoke__">sayFood</span>();<span class="comment">// 如果不传入参数,直接使用默认值</span></span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>（3）有参数、有返回值的函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"><span class="variable">$a</span>,<span class="variable">$b</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$a</span>+<span class="variable">$b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">sum</span>(<span class="number">1</span>,<span class="number">2</span>);<span class="comment">// 返回值为1+2 = 3</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h5 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a><strong>类和对象</strong></h5><p>PHP中允许使用对象这种<strong>自定义</strong>的数据类型。必须先声明，实例化之后才能够使用。</p><p>定义最基础的类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fox</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;itcast&#x27;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$fox</span> = <span class="keyword">new</span> <span class="variable">$fox</span>;</span><br><span class="line"><span class="comment">// 对象属性取值</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$fox</span>-&gt;name;</span><br><span class="line"><span class="comment">// 对象属性赋值</span></span><br><span class="line"><span class="variable">$fox</span>-&gt;name = <span class="string">&#x27;小狐狸&#x27;</span>;</span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><p>带构造函数的类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fox</span></span>&#123;</span><br><span class="line">    <span class="comment">// 私有属性,外部无法访问</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span> = <span class="string">&#x27;小狐狸&#x27;</span>;</span><br><span class="line">    <span class="comment">// 定义方法 用来获取属性</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Name</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构造函数,可以传入参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fox</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 定义了构造函数 需要使用构造函数初始化对象</span></span><br><span class="line">   <span class="variable">$fox</span> = <span class="keyword">new</span> <span class="title class_">fox</span>(<span class="string">&#x27;小狐狸&#x27;</span>);</span><br><span class="line">   <span class="comment">// 调用对象方法,获取对象名</span></span><br><span class="line">   <span class="variable">$foxName</span> = <span class="variable">$fox</span>-&gt;<span class="title function_ invoke__">Name</span>();</span><br></pre></td></tr></table></figure><h5 id="内容输出"><a href="#内容输出" class="headerlink" title="内容输出"></a><strong>内容输出</strong></h5><ul><li><code>echo</code>：输出字符串</li><li><code>print_r()</code>：输出复杂数据类型。比如数组、对象</li><li><code>var_dump()</code>：输出详细信息</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$arr</span> =<span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;123&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span><span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="comment">//结果：123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">//结果：Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 123 )</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="comment">/* 结果：</span></span><br><span class="line"><span class="comment">array</span></span><br><span class="line"><span class="comment">  0 =&gt; int 1</span></span><br><span class="line"><span class="comment">  1 =&gt; int 2</span></span><br><span class="line"><span class="comment">  2 =&gt; string &#x27;123&#x27; (length=3)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><h5 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a><strong>循环语句</strong></h5><p>这里只列举了<code>foreach</code>、<code>for</code>循环</p><p>for 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span>=<span class="number">0</span>; <span class="variable">$x</span>&lt;=<span class="number">10</span>; <span class="variable">$x</span>++) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;数字是：<span class="subst">$x</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>foreach 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$colors</span> = <span class="keyword">array</span>(<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$colors</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$value</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>上方代码中，参数一：循环的对象。参数二：将对象的值挨个取出，直到最后</p><p>如果循环的是对象，输出的是对象的属性的值</p><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">red</span><br><span class="line">green</span><br><span class="line">blue</span><br><span class="line">yellow</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><p><strong>php中的header()函数</strong></p><p>浏览器访问http服务器，接收到响应时，会根据响应<strong>报文头</strong>的内容进行一些具体的操作。在php中，我们可以根据 <strong>header</strong> 来设置这些内容</p><p><strong>header()函数的作用</strong>：用来向客户端(浏览器)发送报头。直接写在php代码的第一行就行</p><p>下面列举几个常见的 header函数</p><p>（1）设置编码格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html; charset= utf-8&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html; charset= utf-8&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;我的第一段 PHP 脚本&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>（2）设置页面跳转：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;location:http://www.baidu.com&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>设置页面刷新的间隔：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;refresh:3; url=http://www.xiaomi.com&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="php中的-get-请求和-post-请求"><a href="#php中的-get-请求和-post-请求" class="headerlink" title="php中的 get 请求和 post 请求"></a><strong>php中的 get 请求和 post 请求</strong></h5><ol><li><strong>get 请求</strong></li></ol><p>可以通过<code>$_GET</code>对象来获取</p><p><strong>举例</strong>：下面是一个简单的表单代码，通过 get 请求将数据提交到01.php</p><p>（1）index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 get 请求，将表单提交到 php 页面中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;01.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>姓名：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>邮箱：</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userEmail&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">1234567891011121314151617181920</span><br></pre></td></tr></table></figure><p>（2）01.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html; charset= utf-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;php 的get 请求演示&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;userName&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;邮箱：&#x27;</span>.<span class="variable">$_GET</span>[<span class="string">&#x27;userEmail&#x27;</span>];</span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>上方代码可以看出，<code>$_GET</code>是关系型数组，可以通过 **$_GET[<code>key</code>]**获取值。这里的 <strong>key 是 form 标签中表单元素的 name 属性的值</strong></p><p>效果：</p><p><img src="http://img.smyhvae.com/20180228_1140.gif" alt="img"></p><ol start="2"><li><strong>post 请求</strong></li></ol><p>可以通过<code>$_POST</code>对象来获取。</p><p><strong>举例</strong>：下面是一个简单的表单代码，通过 post 请求将数据提交到02.php</p><p>（1）index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过 post 请求，将表单提交到 php 页面中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;02.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>姓名：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>= <span class="string">&quot;userName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>邮箱：</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>= <span class="string">&quot;userEmail&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line">1234567891011121314151617181920</span><br></pre></td></tr></table></figure><p>（2）02.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;content-type:text/html; charset= utf-8&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;php 的 post 请求演示&lt;/h1&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;userName&#x27;</span>];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;邮箱：&#x27;</span>.<span class="variable">$_POST</span>[<span class="string">&#x27;userEmail&#x27;</span>];</span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>上方代码可以看出，<code>$_POST</code>是关系型数组，可以通过 **$_POST[<code>key</code>]**获取值。这里的 <strong>key 是 form 标签中表单元素的 name 属性的值。</strong></p><p>效果演示：</p><p><img src="http://img.smyhvae.com/20180228_1145.gif" alt="img"></p><p>实际开发中，可能不会单独写一个php文件，常见的做法是：在 html 文件中嵌入 php 的代码。</p><p>比如说，原本 html 中有个 li 标签是存放用户名的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>smyhvae<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>嵌入 php后，用户名就变成了动态获取的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;<span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_POST</span>[`userName`]</span><br><span class="line"><span class="meta">?&gt;</span>&lt;/li&gt;</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h5 id="php-中文件相关的操作"><a href="#php-中文件相关的操作" class="headerlink" title="php 中文件相关的操作"></a><strong>php 中文件相关的操作</strong></h5><h6 id="文件上传-FILES"><a href="#文件上传-FILES" class="headerlink" title="文件上传 $_FILES"></a>文件上传 <code>$_FILES</code></h6><p>上传文件时，需要在html代码中进行如下设置：</p><p>（1）在html表单中，设置<code>enctype=&quot;multipart/form-data&quot;</code>。该值是必须的。</p><p>（2）<strong>只能用 post 方式获取。</strong></p><p>代码如下：</p><p>（1）index.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;03-fileUpdate.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;&quot;</span>&gt;</span>照片:</span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span> = <span class="string">&quot;picture&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p>（2）在 php 文件中打印 file 的具体内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">sleep</span>(<span class="number">5</span>);<span class="comment">// 让服务器休息一会</span></span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$_FILES</span>);  <span class="comment">//打印 file 的具体内容</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>演示效果：</p><p><img src="http://img.smyhvae.com/20180228_php_post_file.gif" alt="img"></p><p>上方现象可以看出：</p><ul><li>点击提交后，服务器没有立即出现反应,而是休息了一会<code>sleep(5)</code>。</li><li>在<code>wamp/tmp</code>目录下面出现了一个<code>.tmp</code>文件。</li><li>.tmp文件一会就被自动删除了。</li><li>服务器返回的内容中有文件的名字<code>[name] =&gt; computer.png</code>，以及上传文件保存的位置<code>D:\wamp\tmp\php3D70.tmp</code>。服务器返回的内容如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array ( [upFile] =&gt; Array ( [name] =&gt; yangyang.jpg [<span class="built_in">type</span>] =&gt; image/jpeg [tmp_name] =&gt; D:\wamp\tmp\phpCC56.tmp [error] =&gt; 0 [size] =&gt; 18145 ) )</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h6 id="文件保存"><a href="#文件保存" class="headerlink" title="文件保存"></a>文件保存</h6><p>我们尝试一下，把上面的例子中的<code>临时目录</code>下面的文件保存起来。这里需要用到 php 里的 <code>move_uploaded_file()</code>函数。<a href="http://www.w3school.com.cn/php/func_filesystem_move_uploaded_file.asp">#</a></p><p>格式如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;photo&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="string">&#x27;./images/test.jpg&#x27;</span>);</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><p>参数解释：参数一：移动的文件。参数二：目标路径。</p><p>（1）index.html：（这部分的代码保持不变）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;03.fileUpdate.php&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">      &lt;label <span class="keyword">for</span>=<span class="string">&quot;&quot;</span>&gt;照片:</span><br><span class="line">          &lt;input type=<span class="string">&quot;file&quot;</span> name = <span class="string">&quot;picture&quot;</span> multiple=<span class="string">&quot;&quot;</span>&gt;&lt;/label&gt;</span><br><span class="line">      &lt;br/&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>（2）PHP代码：</p><p>暂略。</p><h6 id="WampServer-中修改上传文件的大小"><a href="#WampServer-中修改上传文件的大小" class="headerlink" title="WampServer 中修改上传文件的大小"></a>WampServer 中修改上传文件的大小</h6><p>（1）打开 WampServer的文件<code>php.ini</code>：</p><p><img src="http://img.smyhvae.com/20180228_1454.png" alt="img"></p><p>（2）修改<code>php.ini</code>中的如下内容：</p><p>设置文件最大上传限制：（值的大小可以根据需求修改）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_uploads = On;         是否允许上传文件 On/Off 默认是On</span><br><span class="line">upload_max_filesize = <span class="number">32</span>M; 设置 上传文件的最大限制</span><br><span class="line">post_max_size = <span class="number">32</span>M;       设置 通过Post提交的最多数据</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>考虑网络传输快慢：这里修改一些参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">max_execution_time = <span class="number">30000</span>      ; 脚本最长的执行时间 单位为秒</span><br><span class="line">max_input_time = <span class="number">600</span>            ; 接收提交的数据的时间限制 单位为秒</span><br><span class="line">memory_limit = <span class="number">1024</span>M            ; 最大的内存消耗</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><p>客户端发出的请求，主要由三个组成部分：请求行、请求头、请求主体。如下图所示：<br><img src="http://img.smyhvae.com/20180228_1505.jpg" alt="img"></p><p><strong>1、请求行：</strong></p><ul><li>请求方法：GET or POST</li><li>请求URL</li><li>HTTP协议版本</li></ul><p><strong>2、请求头：</strong></p><p>常见的请求头如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">User-Agent：浏览器的具体类型　　如：User-Agent：Mozilla/5.0 (Windows NT 6.1; rv:17.0) Gecko/20100101 Firefox/17.0</span><br><span class="line"></span><br><span class="line">Accept：浏览器支持哪些数据类型　　如：Accept: text/html,application/xhtml+xml,application/xml;q=0.9;</span><br><span class="line"></span><br><span class="line">Accept-Charset：浏览器采用的是哪种编码　　如：Accept-Charset: ISO-8859-1</span><br><span class="line"></span><br><span class="line">Accept-Encoding：浏览器支持解码的数据压缩格式　　如：Accept-Encoding: gzip, deflate</span><br><span class="line"></span><br><span class="line">Accept-Language：浏览器的语言环境　　如：Accept-Language zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3</span><br><span class="line"></span><br><span class="line">Host：请求的主机名，允许多个域名同处一个IP地址，即虚拟主机。Host:www.baidu.com</span><br><span class="line"></span><br><span class="line">Connection：表示是否需要持久连接。</span><br><span class="line">属性值可以是Keep-Alive/close，HTTP1.1默认是持久连接，它可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。</span><br><span class="line">要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。如：Connection: Keep-Alive</span><br><span class="line"></span><br><span class="line">Content-Length：表示请求消息正文的长度。对于POST请求来说Content-Length必须出现。</span><br><span class="line"></span><br><span class="line">Content-Type：WEB服务器告诉浏览器自己响应的对象的类型和字符集。例如：Content-Type: text/html; charset=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"></span><br><span class="line">Content-Encoding：WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。例如：Content-Encoding：gzip</span><br><span class="line"></span><br><span class="line">Content-Language：WEB服务器告诉浏览器自己响应的对象的语言。</span><br><span class="line"></span><br><span class="line">Cookie：最常用的请求头，浏览器每次都会将cookie发送到服务器上，允许服务器在客户端存储少量数据。</span><br><span class="line"></span><br><span class="line">Referer：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。服务器能知道你是从哪个页面过来的。Referer: http://www.baidu.com/</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728</span><br></pre></td></tr></table></figure><p><strong>3、请求体：</strong></p><p>指的是提交给服务器的数据。</p><p>需要注意的是，如果是往服务器提交数据，需要在请求头中设置<code>Content-Type: application/x-www-form-urlencoded</code>(在ajax中需要手动设置)。</p><h5 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h5><p>响应报文是服务器返回给客户端的。组成部分有响应行、响应头、响应主体。</p><p><img src="http://img.smyhvae.com/20180228_1510.jpg" alt="img"></p><p><strong>1、状态行：</strong></p><p>HTTP响应行：主要是设置响应状态等信息。</p><p><strong>2、响应头：</strong></p><p>Cookie、缓存等信息就是在响应头的属性中设置的。</p><p>常见的响应头如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control</span><br><span class="line"></span><br><span class="line">响应输出到客户端后，服务端通过该报文头属告诉客户端如何控制响应内容的缓存。</span><br><span class="line"></span><br><span class="line">下面，的设置让客户端对响应内容缓存3600秒，也即在3600秒内，如果客户再次访问该资源，直接从客户端的缓存中返回内容给客户，不要再从服务端获取（当然，这个功能是靠客户端实现的，服务端只是通过这个属性提示客户端“应该这么做”，做不做，还是决定于客户端，如果是自己宣称支持HTTP的客户端，则就应该这样实现）。</span><br><span class="line"></span><br><span class="line">Cache-Control: max-age=3600</span><br><span class="line"></span><br><span class="line">ETag</span><br><span class="line"></span><br><span class="line">一个代表响应服务端资源（如页面）版本的报文头属性，如果某个服务端资源发生变化了，这个ETag就会相应发生变化。它是Cache-Control的有益补充，可以让客户端“更智能”地处理什么时候要从服务端取资源，什么时候可以直接从缓存中返回响应。</span><br><span class="line"></span><br><span class="line">ETag: <span class="string">&quot;737060cd8c284d8af7ad3082f209582d&quot;</span></span><br><span class="line"></span><br><span class="line">Location</span><br><span class="line"></span><br><span class="line">我们在Asp.net中让页面Redirect到一个某个A页面中，其实是让客户端再发一个请求到A页面，这个需要Redirect到的A页面的URL，其实就是通过响应报文头的Location属性告知客户端的，如下的报文头属性，将使客户端redirect到iteye的首页中：</span><br><span class="line"></span><br><span class="line">Location: http://www.google.com.hk</span><br><span class="line"></span><br><span class="line">Set-Cookie</span><br><span class="line"></span><br><span class="line">服务端可以设置客户端的Cookie，其原理就是通过这个响应报文头属性实现的。</span><br><span class="line"></span><br><span class="line">Set-Cookie: UserID=JohnDoe; Max-Age=3600; Version=1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">123456789101112131415161718192021222324252627</span><br></pre></td></tr></table></figure><p><strong>3、HTTP响应体：</strong></p><p>如果请求的是HTML页面，那么返回的就是HTML代码。如果是JS就是JS代码。</p><h5 id="抓包工具"><a href="#抓包工具" class="headerlink" title="抓包工具"></a>抓包工具</h5><p>常见的抓包工具有：Fiddler、Charles。</p><h3 id="4-对php的总结和回顾"><a href="#4-对php的总结和回顾" class="headerlink" title="4.对php的总结和回顾"></a>4.对php的总结和回顾</h3><p><strong>服务器</strong></p><ol><li><p>静态网页</p><ul><li>写死的</li><li>不修改一直不会改变</li></ul></li><li><p>动态网站</p><ul><li><p>动态的</p><ul><li>后台开发语言：php</li></ul></li><li><p>根据数据来生成</p></li><li><p>数据的保存方式</p><ul><li><p>可以用记事本等软件保存，但无法保证数据的安全</p></li><li><p>数据库：</p><ul><li>可以保证数据的安全</li><li>保存数据</li></ul></li></ul></li></ul></li></ol><p><strong>php拆分写法</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;i&lt;<span class="title function_ invoke__">count</span>(<span class="variable">$heroArr</span>);<span class="variable">$i</span>++)&#123;<span class="meta">?&gt;</span></span><br><span class="line">&lt;h1&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$heroArr</span>[<span class="variable">$i</span>][<span class="string">&#x27;champion_name&#x27;</span>];<span class="meta">?&gt;</span>---牛逼&lt;/h1&gt;</span><br><span class="line">&lt;img src=<span class="string">&#x27;&#x27;</span> alt=<span class="string">&#x27;&#x27;</span>&gt;</span><br><span class="line">&lt;a href=<span class="string">&quot;#&quot;</span>&gt;牛你奶奶个腿&lt;/a&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> &#125;<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>get提交数据的补充</strong>:</p><p>多条数据提交的格式是 key1&#x3D;value1&amp;key2&#x3D;value2&amp;……</p><p>数据是拼接在url中的</p><p>数据的安全性不好</p><p>数据的长度问题</p><p>​    理论上说，URLd的长度是可任意修改的</p><p>​    有一些浏览器却有限制</p><p>​    有一些服务器 对于长度太长的url 直接就屏蔽了</p><p><strong>post</strong>:</p><ol><li><p>提交的数据不再url中</p><p>安全性相对好一些</p></li><li><p>post 提交数据没有长度限制</p><p>浏览器端只要你想 随意添加</p><p>服务器可以选择是否接受这么多的数据</p></li><li><p>如果要上传文件 必须使用post</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//提交文件</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;./xxxxx.php&quot;</span> <span class="attr">methond</span>=<span class="string">&quot;post&quot;</span> </span></span><br><span class="line"><span class="tag">      //要传文件必须设置下面这个</span></span><br><span class="line"><span class="tag">     <span class="attr">entype</span>=<span class="string">&quot;multipart/form=data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$_FILES</span>);</span><br><span class="line"><span class="comment">//目的只是为了看到临时文件</span></span><br><span class="line"><span class="title function_ invoke__">sleep</span>(<span class="number">4</span>);<span class="comment">//休息4秒</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>临时文件</strong></p><p>防止服务器过载</p><p>php代码执行完毕之后，临时文件就被销毁了</p><p>如果想要看到那个临时文件 可以让php代码执行得稍微慢一些 休息一会</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r($_FILES);</span><br><span class="line">//目的只是为了看到临时文件</span><br><span class="line">sleep(4);//休息4秒</span><br><span class="line">//move_uploaded_file(file,newloc) </span><br><span class="line">//参数1 移动的文件</span><br><span class="line">//参数2 移动到哪里去</span><br><span class="line"></span><br><span class="line">move_uploaded_file($_FILES[&#x27;xxx&#x27;][&#x27;tmp_name&#x27;],&#x27;./files/&#x27;.$_FILES[&#x27;xxx&#x27;][&#x27;name&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="5-请求报文-amp-响应报文基本概念"><a href="#5-请求报文-amp-响应报文基本概念" class="headerlink" title="5.请求报文&amp;响应报文基本概念"></a>5.请求报文&amp;响应报文基本概念</h3><p>浏览器到服务器</p><p><strong>请求报文</strong>：浏览器的一些信息和请求的方法和自己的信息</p><ol><li>请求行<ul><li>请求方式</li><li>请求地址</li></ul></li><li>请求头<ul><li>浏览器的信息</li><li>接受的语言格式</li><li>等一些 浏览器的信息以及 想要发送给服务器的信息</li></ul></li><li>请求主体<ul><li>发送给服务器的数据和内容</li></ul></li></ol><p><strong>响应报文：</strong></p><ol><li>状态行<ul><li>请求是否成功</li><li>请求的状态<ul><li>200 成功</li><li>404 页面不存在</li><li>304 被缓存了</li></ul></li></ul></li><li>响应头<ul><li>服务器的一些信息</li><li>服务器想要告诉浏览器的一些信息</li></ul></li><li>响应主体<ul><li>正常用户看到的内容</li></ul></li></ol><p>浏览器中 获取html页面 css js 请求后台页面</p><p>​    发送的都是请求报文</p><p>​    服务器返回的是 响应报文</p><p>​    使用请求报文 响应报文这种方式进行数据的交互 称之为<strong>http协议</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送请求报文&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建 对象 异步对象   </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//请求行（get请求数据写在url后面）</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;xxx.php?name=jack&amp;skill=painting&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//注册回调函数</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;请求相应回来了&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//修改页面的dom元素</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h3&#x27;</span>).<span class="property">innerHTML</span>=xhr.<span class="property">responseText</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//请求头 setRequestHeader()</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//参数1 键名</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//参数2 值</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;heima&#x27;</span>, <span class="string">&#x27;goodgood&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//请求主体发送（get请求为空，或者写null,post请求数据都写在这里，如果没有数据，直接为空或者写null）</span></span></span><br><span class="line"><span class="language-javascript">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> AJAX </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> AJAX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（九）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B9%9D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Node-Js（尚硅谷视频学习笔记）"><a href="#Node-Js（尚硅谷视频学习笔记）" class="headerlink" title="Node.Js（尚硅谷视频学习笔记）"></a>Node.Js（尚硅谷视频学习笔记）</h2><p><strong>内容来自尚硅谷Nodejs学习课件以及自己添加</strong></p><h3 id="课前预热：CMD基本知识"><a href="#课前预热：CMD基本知识" class="headerlink" title="课前预热：CMD基本知识"></a>课前预热：CMD基本知识</h3><h3 id="1-命令行窗口（小黑屏）、CMD窗口、终端、shell"><a href="#1-命令行窗口（小黑屏）、CMD窗口、终端、shell" class="headerlink" title="1.命令行窗口（小黑屏）、CMD窗口、终端、shell"></a>1.命令行窗口（小黑屏）、CMD窗口、终端、shell</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- 开始菜单 --&gt; 运行 --&gt; CMD --&gt; 回车</span><br><span class="line">- Win + R --&gt; CMD --&gt; 回车</span><br><span class="line">- 常用的指令</span><br><span class="line">dir 列出当前目录下的所有文件</span><br><span class="line">cd 目录名   进入到指定的目录</span><br><span class="line">md 目录名创建一个文件夹</span><br><span class="line">rd 目录名删除一个文件夹</span><br><span class="line">-目录</span><br><span class="line">. 表示当前目录</span><br><span class="line">..  表示上一级目录</span><br><span class="line">-环境变量（window系统中的变量 ）</span><br><span class="line">PATH </span><br><span class="line">一个个的路径</span><br><span class="line">C:\Program Files\Microsoft SQL Server\130\Tools\Binn\</span><br><span class="line">- 当我们在命令行窗口打开一个文件，或调用一个程序时，</span><br><span class="line">系统会首先在当前目录下寻找文件程序，如果找到了则直接打开</span><br><span class="line">如果没有找到则会依次到环境变量path的路径中寻找，直到找到为止</span><br><span class="line">如果没找到则报错</span><br><span class="line">类似于作用域链</span><br><span class="line">-所以我们可以将一些经常需要访问的程序和文件的路径添加到path中，</span><br><span class="line">这样我们就可以在任意位置来访问这些文件和程序了</span><br><span class="line">123456789101112131415161718192021</span><br></pre></td></tr></table></figure><h3 id="2-进程和线程"><a href="#2-进程和线程" class="headerlink" title="2.进程和线程"></a>2.进程和线程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">进程</span><br><span class="line">- 进程负责为程序的运行提供必备的环境</span><br><span class="line">- 进程就相当于工厂中的车间</span><br><span class="line"></span><br><span class="line">线程</span><br><span class="line">- 线程是计算机中最小的计算单位，线程负责执行进程中的程序</span><br><span class="line">- 线程就相当于工厂中的工人</span><br><span class="line">单线程</span><br><span class="line">JS是单线程，在执行JS代码的时候网页是停止渲染的。</span><br><span class="line">多线程</span><br><span class="line">主流的语言，如Java</span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><h3 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h3><p>• Node.js是一个能够在服务器端运行JavaScript的开放源代码、跨平台<strong>JavaScript运行环境</strong>。</p><p>• Node采用Google开发的V8引擎运行js代码，使用<strong>事件驱动</strong>、<strong>非阻塞</strong>和<strong>异步I&#x2F;O模型</strong>等技术来提高性能，可优化应用程序的传输量和规模。<br><img src="https://img-blog.csdnimg.cn/20190305141058444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhbnh1ZXpoYW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>• Node大部分基本模块都用JavaScript编写。在Node出现之前，JS通常作为客户端程序设计语言使用，以JS写出的程序常在用户的浏览器上运行。</p><p>• 目前，Node已被IBM、Microsoft、Yahoo!、Walmart、Groupon、SAP、 LinkedIn、Rakuten、PayPal、Voxer和GoDaddy等企业采用。</p><p>• Node主要用于编写像Web服务器一样的网络应用，这和PHP和Python是类似的。</p><p>• 但是Node与其他语言最大的不同之处在于，PHP等语言是阻塞的而Node是非阻塞的。</p><p>• Node是事件驱动的。开发者可以在不使用线程的情况下开发出一个能够承载高并发的服务器。其他服务器端语言难以开发高并发应用，而且即使开发出来，性能也不尽人意。</p><p>• Node正是在这个前提下被创造出来。</p><p>• Node把JS的易学易用和Unix网络编程的强大结合到了一起。</p><p>• Node.js允许通过JS和一系列模块来编写服务器端应用和网络相关的应用。</p><p>• 核心模块包括文件系统I&#x2F;O、网络（HTTP、TCP、UDP、DNS、TLS&#x2F;SSL等）、二进制数据流、加密算法、数据流等等。Node模块的API形式简单，降低了编程的复杂度。</p><p>• 使用框架可以加速开发。常用的框架有Express.js、Socket.IO和Connect等。Node.js的程序可以在Microsoft Windows、Linux、Unix、Mac OS X等服务器上运行。</p><p>• Node.js也可以使用CoffeeScript、TypeScript、Dart语言，以及其他能够编译成JavaScript的语言编程。</p><h3 id="Node的用途"><a href="#Node的用途" class="headerlink" title="Node的用途"></a>Node的用途</h3><p>• Web服务API，比如REST<br>• 实时多人游戏<br>• 后端的Web服务，例如跨域、服务器端的请求<br>• 基于Web的应用<br>• 多客户端的通信，如即时通信</p><h3 id="简介总结"><a href="#简介总结" class="headerlink" title="简介总结"></a>简介总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">I/O (Input/Output)</span><br><span class="line">- I/O操作指的是对磁盘的读写操作</span><br><span class="line"></span><br><span class="line">Node</span><br><span class="line">- Node是对ES标准一个实现，Node也是一个JS引擎</span><br><span class="line">- 通过Node可以使js代码在服务器端执行</span><br><span class="line">- Node仅仅对ES标准进行了实现，所以在Node中不包含DOM 和 BOM</span><br><span class="line">- Node中可以使用所有的内建对象</span><br><span class="line">String Number Boolean Math Date RegExp Function Object Array</span><br><span class="line">而BOM和DOM都不能使用</span><br><span class="line">但是可以使用 console 也可以使用定时器（setTimeout() setInterval()）</span><br><span class="line"></span><br><span class="line">- Node可以在后台来编写服务器</span><br><span class="line">Node编写服务器都是单线程的服务器</span><br><span class="line">- 进程</span><br><span class="line">- 进程就是一个一个的工作计划（工厂中的车间）</span><br><span class="line">- 线程</span><br><span class="line">- 线程是计算机最小的运算单位（工厂中的工人）</span><br><span class="line">线程是干活的</span><br><span class="line"></span><br><span class="line">- 传统的服务器都是多线程的</span><br><span class="line">- 每进来一个请求，就创建一个线程去处理请求</span><br><span class="line"></span><br><span class="line">- Node的服务器单线程的</span><br><span class="line">- Node处理请求时是单线程，但是在后台拥有一个I/O线程池</span><br><span class="line">12345678910111213141516171819202122232425</span><br></pre></td></tr></table></figure><h3 id="在VScode中调出终端查看node-js代码执行"><a href="#在VScode中调出终端查看node-js代码执行" class="headerlink" title="在VScode中调出终端查看node.js代码执行"></a>在VScode中调出终端查看node.js代码执行</h3><p>使用快捷键： <code>ctrl + ·</code></p><h3 id="COMMONJS规范"><a href="#COMMONJS规范" class="headerlink" title="COMMONJS规范"></a>COMMONJS规范</h3><h4 id="ECMAScript标准的缺陷"><a href="#ECMAScript标准的缺陷" class="headerlink" title="ECMAScript标准的缺陷"></a>ECMAScript标准的缺陷</h4><p>• 没有模块系统<br>• 标准库较少<br>• 没有标准接口<br>• 缺乏管理系统</p><h4 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h4><p>• 如果程序设计的规模达到了一定程度，则必须对其进行模块化。</p><p>• 模块化可以有多种形式，但至少应该提供能够将代码分割为多个源文件的机制。</p><p>• CommonJS 的模块功能可以帮我们解决该问题。</p><h3 id="CommonJS规范"><a href="#CommonJS规范" class="headerlink" title="CommonJS规范"></a>CommonJS规范</h3><p>• CommonJS规范的提出，主要是为了弥补当前JavaScript没有模块化标准的缺陷。</p><p>• CommonJS规范为JS指定了一个美好的愿景，希望JS能够在任何地方运行。</p><p>• CommonJS对模块的定义十分简单：</p><p>– 模块引用<br>– 模块定义<br>– 模块标识</p><h3 id="模块引用"><a href="#模块引用" class="headerlink" title="模块引用"></a>模块引用</h3><p>一个js文件就是一个模块</p><p>• 在规范中，定义了require()方法，这个方法接手模块标识，以此将一个模块引入到当前运行环境中。</p><p>• 模块引用的示例代码：<br>– var math &#x3D; require(‘.&#x2F;math’);</p><h3 id="模块定义"><a href="#模块定义" class="headerlink" title="模块定义"></a>模块定义</h3><p>• 在运行环境中，提供了exports对象用于导出当前模块的方法或者变量，并且它是唯一的导出的出口。</p><p>• 在模块中还存在一个module对象，它代表模块自身，而exports是module的属性。</p><p>• 在Node中一个文件就是一个模块。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">exports.xxx = function() &#123;&#125;;</span><br><span class="line">module.exports = &#123;&#125;;</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="模块标识"><a href="#模块标识" class="headerlink" title="模块标识"></a>模块标识</h3><p>• 模块标识其实就是模块的名字，也就是传递给require()方法的参数，它必须是符合驼峰命名法的字符串，或者是以.、…开头的相对路径、或者绝对路径。</p><p>• 模块的定义十分简单，接口也十分简洁。每个模块具有独立的空间，它们互不干扰，在引用时也显得干净利落。</p><h3 id="模块化总结"><a href="#模块化总结" class="headerlink" title="模块化总结"></a>模块化总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">模块化</span><br><span class="line">- 在Node中，一个js文件就是一个模块</span><br><span class="line">- 在Node中，每一个js文件中的js代码都是独立运行在一个函数中</span><br><span class="line">而不是全局作用域，所以一个模块的中的变量和函数在其他模块中无法访问</span><br><span class="line"></span><br><span class="line">03module.js</span><br><span class="line"></span><br><span class="line">//引入其他的模块</span><br><span class="line">/*</span><br><span class="line">在node中，通过require()函数来引入外部的模块</span><br><span class="line">require()可以传递一个文件的路径作为参数，node将会自动根据该路径来引入外部模块</span><br><span class="line">这里路径，如果使用相对路径，必须以.或..开头</span><br><span class="line"></span><br><span class="line">使用require()引入模块以后，该函数会返回一个对象，这个对象代表的是引入的模块</span><br><span class="line"></span><br><span class="line">我们使用require()引入外部模块时，使用的就是模块标识，我们可以通过模块标识来找到指定的模块</span><br><span class="line">- 模块分成两大类</span><br><span class="line">核心模块</span><br><span class="line">- 由node引擎提供的模块</span><br><span class="line">- 核心模块的标识就是，模块的名字</span><br><span class="line">- 示例：var fs = require(&quot;fs&quot;);</span><br><span class="line">文件模块</span><br><span class="line">- 由用户自己创建的模块</span><br><span class="line">- 文件模块的标识就是文件的路径（绝对路径，相对路径）</span><br><span class="line">相对路径使用.或..开头</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">//var md = require(&quot;./02.module&quot;);</span><br><span class="line">var math = require(&quot;./math&quot;);</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">//console.log(md);</span><br><span class="line">console.log(math.add(123,456));</span><br><span class="line">//console.log(fs);</span><br><span class="line"></span><br><span class="line">02module.js</span><br><span class="line">/*</span><br><span class="line">我们可以通过 exports 来向外部暴露变量和方法</span><br><span class="line">只需要将需要暴露给外部的变量或方法设置为exports的属性即可</span><br><span class="line">*/</span><br><span class="line">//向外部暴露属性或方法</span><br><span class="line">exports.x = &quot;我是02.module.js中的x&quot;;</span><br><span class="line">exports.y = &quot;我是y&quot;;</span><br><span class="line">exports.fn = function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">04module.js</span><br><span class="line">/*</span><br><span class="line">在node中有一个全局对象 global，它的作用和网页中window类似</span><br><span class="line">在全局中创建的变量都会作为global的属性保存</span><br><span class="line">在全局中创建的函数都会作为global的方法保存</span><br><span class="line"></span><br><span class="line">当node在执行模块中的代码时，它会首先在代码的最顶部，添加如下代码</span><br><span class="line">function (exports, require, module, __filename, __dirname) &#123;</span><br><span class="line"></span><br><span class="line">在代码的最底部，添加如下代码</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实际上模块中的代码都是包装在一个函数中执行的，并且在函数执行时，同时传递进了5个实参</span><br><span class="line"> exports</span><br><span class="line"> - 该对象用来将变量或函数暴露到外部</span><br><span class="line"></span><br><span class="line"> require</span><br><span class="line"> - 函数，用来引入外部的模块</span><br><span class="line"></span><br><span class="line"> module</span><br><span class="line"> - module代表的是当前模块本身</span><br><span class="line"> - exports就是module的属性</span><br><span class="line"> - 既可以使用 exports 导出，也可以使用module.exports导出</span><br><span class="line"></span><br><span class="line"> __filename</span><br><span class="line">C:\Users\lilichao\WebstormProjects\class0705\01.node\04.module.js</span><br><span class="line">- 当前模块的完整路径</span><br><span class="line"></span><br><span class="line">   __dirname</span><br><span class="line">C:\Users\lilichao\WebstormProjects\class0705\01.node</span><br><span class="line">- 当前模块所在文件夹的完整路径</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line">//console.log(global.a);</span><br><span class="line">/*</span><br><span class="line">arguments.callee</span><br><span class="line">- 这个属性保存的是当前执行的函数对象</span><br><span class="line">*/</span><br><span class="line">//console.log(arguments.callee + &quot;&quot;);</span><br><span class="line">//console.log(arguments.length);</span><br><span class="line"></span><br><span class="line">//console.log(exports);</span><br><span class="line">//console.log(module.exports == exports);</span><br><span class="line"></span><br><span class="line">console.log(__dirname);</span><br><span class="line"></span><br><span class="line">05module.js</span><br><span class="line">/*</span><br><span class="line">exports 和 module.exports</span><br><span class="line">- 通过exports只能使用.的方式来向外暴露内部变量</span><br><span class="line">exports.xxx = xxx</span><br><span class="line"></span><br><span class="line">- 而module.exports既可以通过.的形式，也可以直接赋值</span><br><span class="line">module.exports.xxx = xxxx</span><br><span class="line">module.exports = &#123;&#125;</span><br><span class="line"> */</span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103</span><br></pre></td></tr></table></figure><h3 id="Node的模块实现"><a href="#Node的模块实现" class="headerlink" title="Node的模块实现"></a>Node的模块实现</h3><p>• Node中虽然使用的是CommonJS规范，但是其自身也对规范做了一些取舍。</p><p>• 在Node中引入模块，需要经历如下3个步骤：<br>– 路径分析<br>– 文件定位<br>– 编译执行</p><p>• 在Node中，模块分为三类：一类是底层由C++编写的内建模块，一类是Node提供的核心模块；还有一类是用户编写的模块，称为文件模块。</p><h3 id="包-package"><a href="#包-package" class="headerlink" title="包 package"></a>包 package</h3><p>• CommonJS的包规范允许我们将一组相关的模块组合到一起，形成一组完整的工具。</p><p>• CommonJS的包规范由包结构和包描述文件两个部分组成。</p><p>• 包结构<br>– 用于组织包中的各种文件</p><p>• 包描述文件<br>– 描述包的相关信息，以供外部读取分析</p><h3 id="包结构"><a href="#包结构" class="headerlink" title="包结构"></a>包结构</h3><p>• 包实际上就是一个压缩文件，解压以后还原为目录。符合规范的目录，应该包含如下文件：</p><p>– package.json 描述文件<br>– bin 可执行二进制文件<br>– lib js代码<br>– doc 文档<br>– test 单元测试</p><h3 id="包描述文件"><a href="#包描述文件" class="headerlink" title="包描述文件"></a>包描述文件</h3><p>• 包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件 – package.json，位于包的根目录下，是包的重要组成部分。</p><p>• package.json中的字段</p><p>– name、description、version、keywords、maintainers、contributors、bugs、licenses、repositories、dependencies、homepage、os、cpu、engine、builtin、directories、implements、scripts、author、bin、main、devDependencies。</p><p><strong>在JSON文件不能写注释</strong></p><h3 id="NPM-Node-Package-Manager"><a href="#NPM-Node-Package-Manager" class="headerlink" title="NPM(Node Package Manager)"></a>NPM(Node Package Manager)</h3><p>• CommonJS包规范是理论，NPM是其中一种实践。</p><p>• 对于Node而言，NPM帮助其完成了第三方模块的发布、安装和依赖等。借助NPM，Node与第三方模块之间形成了很好的一个生态系统。</p><h3 id="NPM命令"><a href="#NPM命令" class="headerlink" title="NPM命令"></a>NPM命令</h3><p>• npm –v<br>– 查看版本<br>• npm<br>– 帮助说明<br>• npm search 包名<br>– 搜索模块包<br>• npm install<br>–下载当前项目所依赖的包<br>• npm install 包名<br>– 在当前目录安装包<br>• npm install 包名 –g<br>– 全局模式安装包（全局安装的包一般都是一些工具）<br>• npm remove 包名<br>– 删除一个模块<br>• npm install 包名 –save<br>– 安装包并添加到依赖中<br>• npm install 文件路径<br>– 从本地安装<br>• npm install 包名 –registry&#x3D;地址<br>– 从镜像源安装<br>• npm config set registry 地址<br>– 设置镜像源</p><h3 id="NPM总结笔记"><a href="#NPM总结笔记" class="headerlink" title="NPM总结笔记"></a>NPM总结笔记</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">通过npm下载的包都放到node_modules文件夹中</span><br><span class="line">我们通过npm下载的包，直接通过包名引入即可</span><br><span class="line"></span><br><span class="line">node在使用模块名字来引入模块时，它会首先在当前目录的node_modules中寻找是否含有该模块</span><br><span class="line">如果有则直接使用，如果没有则去上一级目录的node_modules中寻找</span><br><span class="line">如果有则直接使用，如果没有则再去上一级目录寻找，直到找到为止</span><br><span class="line">直到找到磁盘的根目录，如果依然没有，则报错</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure><h3 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer(缓冲区)"></a>Buffer(缓冲区)</h3><p>• 从结构上看Buffer非常像一个数组，它的元素为16进制的两位数。<br><strong>JS数组性能比其他语言的数组差</strong></p><p>• 实际上一个元素就表示内存中的一个字节。</p><p>• 实际上Buffer中的内存不是通过JavaScript分配的，而是在底层通过C++申请的。</p><p>• 也就是我们可以直接通过Buffer来创建内存中的空间。</p><p>使用buffer不需要引入模块，直接使用即可</p><p>buffer专门用来存储二进制数据，但显示的时候都是以16进制显示</p><p>每一个元素的范围是从00–ff</p><p><code>var buf =Buffer.from(str);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">buf.length返回的是占用内存的大小！</span><br><span class="line">//buffer构造函数都是不推荐使用的</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Buffer的操作"><a href="#Buffer的操作" class="headerlink" title="Buffer的操作"></a>Buffer的操作</h3><p>• 使用Buffer保存字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let str = &quot;你好 atguigu&quot;;</span><br><span class="line">let buf = Buffer.from(str , &quot;utf-8&quot;);</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>• 创建指定大小的Buffer对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//创建一个1024*8字节的buffer</span><br><span class="line">let buf3 = Buffer.alloc(1024*8)</span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>buffer大小一旦确定无法修改！</p><p>只要数字在控制台或者页面中输出一定是十进制</p><h3 id="Buffer的转换"><a href="#Buffer的转换" class="headerlink" title="Buffer的转换"></a>Buffer的转换</h3><h4 id="Buffer与字符串间的转换"><a href="#Buffer与字符串间的转换" class="headerlink" title="Buffer与字符串间的转换"></a>Buffer与字符串间的转换</h4><p>– 支持的编码:<br>• ASCII、UTF-8、UTF-16LE&#x2F;UCS-2、Base64、Binary、Hex</p><p>– 字符串转Buffer<br>• Buffer.from(str , [encoding]);</p><p>– Buffer转字符串<br>• buf.toString([encoding] , [start] , [end]);</p><h3 id="写入操作"><a href="#写入操作" class="headerlink" title="写入操作"></a>写入操作</h3><p>• 向缓冲区中写入字符串<br>– <code>buf.write(string[, offset[, length]][, encoding])</code></p><p>• 替换指定索引位置的数据<br>– <code>buf[index]</code></p><p>• 将指定值填入到缓冲区的指定位置<br>– <code>buf.fill(value[, offset[, end]][, encoding])</code></p><h3 id="读取操作"><a href="#读取操作" class="headerlink" title="读取操作"></a>读取操作</h3><p>• 将缓冲区中的内容，转换为一个字符串返回<br>– <code>buf.toString([encoding[, start[, end]]])</code></p><p>• 读取缓冲区指定索引的内容<br>– <code>buf[index]</code></p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p>• 复制缓冲区<br>– <code>buf.copy(target[, targetStart[, sourceStart[, sourceEnd]]])</code></p><p>• 对缓冲区切片<br>– <code>buf.slice([start[, end]])</code></p><p>• 拼接缓冲区<br>– <code>Buffer.concat(list[, totalLength])</code></p><h3 id="Buffer总结笔记"><a href="#Buffer总结笔记" class="headerlink" title="Buffer总结笔记"></a>Buffer总结笔记</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">Buffer(缓冲区)</span><br><span class="line">- Buffer的结构和数组很像，操作的方法也和数组类似</span><br><span class="line">- 数组中不能存储二进制的文件，而buffer就是专门用来存储二进制数据</span><br><span class="line">- 使用buffer不需要引入模块，直接使用即可</span><br><span class="line">- 在buffer中存储的都是二进制数据，但是在显示时都是以16进制的形式显示</span><br><span class="line">buffer中每一个元素的范围是从00 - ff   0 - 255</span><br><span class="line">00000000 - 11111111</span><br><span class="line"></span><br><span class="line">计算机 一个0 或一个1 我们称为1位（bit）</span><br><span class="line"></span><br><span class="line">8bit = 1byte（字节）</span><br><span class="line">1024byte = 1kb</span><br><span class="line">1024kb = 1mb</span><br><span class="line">1024mb = 1gb</span><br><span class="line">1024gb = 1tb</span><br><span class="line"></span><br><span class="line">buffer中的一个元素，占用内存的一个字节</span><br><span class="line"></span><br><span class="line">- Buffer的大小一旦确定，则不能修改，Buffer实际上是对底层内存的直接操作</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"> var str = &quot;Hello 尚硅谷&quot;;</span><br><span class="line"></span><br><span class="line">//将一个字符串保存到buffer中</span><br><span class="line">var buf = Buffer.from(str);</span><br><span class="line">//创建一个指定大小的buffer</span><br><span class="line">//buffer构造函数都是不推荐使用的</span><br><span class="line">//var buf2 = new Buffer(10);//10个字节的buffer</span><br><span class="line">//console.log(buf2.length);</span><br><span class="line"></span><br><span class="line">//创建一个10个字节的buffer</span><br><span class="line">var buf2 = Buffer.alloc(10);</span><br><span class="line">//通过索引，来操作buf中的元素</span><br><span class="line">buf2[0] = 88;</span><br><span class="line">buf2[1] = 255;</span><br><span class="line">buf2[2] = 0xaa;</span><br><span class="line">buf2[3] = 255;</span><br><span class="line"></span><br><span class="line">//只要数字在控制台或页面中输出一定是10进制</span><br><span class="line">//console.log(buf2[2].toString(16));</span><br><span class="line"></span><br><span class="line">/*for(var i=0 ; i&lt;buf2.length ; i++)&#123;</span><br><span class="line">console.log(buf2[i]);</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">//Buffer.allocUnsafe(size) 创建一个指定大小的buffer，但是buffer中可能含有敏感数据</span><br><span class="line">/*var buf3 = Buffer.allocUnsafe(10);</span><br><span class="line">console.log(buf3);*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">Buffer.from(str) 将一个字符串转换为buffer</span><br><span class="line">Buffer.alloc(size) 创建一个指定大小的Buffer</span><br><span class="line">Buffer.alloUnsafe(size) 创建一个指定大小的Buffer，但是可能包含敏感数据</span><br><span class="line"> buf.toString() 将缓冲区中的数据转换为字符串</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var buf4 = Buffer.from(&quot;我是一段文本数据&quot;);</span><br><span class="line"></span><br><span class="line">console.log(buf4.toString());</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061</span><br></pre></td></tr></table></figure><h3 id="fs（文件系统）"><a href="#fs（文件系统）" class="headerlink" title="fs（文件系统）"></a>fs（文件系统）</h3><p>• 在Node中，与文件系统的交互是非常重要的，服务器的本质就将本地的文件发送给远程的客户端</p><p>• Node通过fs模块来和文件系统进行交互</p><p>• 该模块提供了一些标准文件访问API来打开、读取、写入文件，以及与其交互。</p><p>• 要使用fs模块，首先需要对其进行加载<br>– <code>const fs = require(&quot;fs&quot;);</code></p><h3 id="同步和异步调用"><a href="#同步和异步调用" class="headerlink" title="同步和异步调用"></a>同步和异步调用</h3><p>• fs模块中所有的操作都有两种形式可供选择同步和异步。</p><p>• 同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码。</p><p>• 异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回。</p><p>异步方法打开不可能有返回值！</p><h3 id="打开和关闭文件"><a href="#打开和关闭文件" class="headerlink" title="打开和关闭文件"></a>打开和关闭文件</h3><p>• 打开文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">– fs.open(path, flags[, mode], callback)</span><br><span class="line">– fs.openSync(path, flags[, mode])</span><br><span class="line">12</span><br></pre></td></tr></table></figure><p>• 关闭文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">– fs.close(fd, callback)</span><br><span class="line">– fs.closeSync(fd)</span><br><span class="line">12</span><br></pre></td></tr></table></figure><h3 id="打开状态"><a href="#打开状态" class="headerlink" title="打开状态"></a>打开状态</h3><p><img src="https://img-blog.csdnimg.cn/20190305185923280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nhbnh1ZXpoYW5n,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><p>• fs中提供了四种不同的方式将数据写入文件<br>– 简单文件写入<br>– 同步文件写入<br>– 异步文件写入<br>– 流式文件写入</p><h3 id="简单文件写入"><a href="#简单文件写入" class="headerlink" title="简单文件写入"></a>简单文件写入</h3><p>• fs.writeFile(file, data[, options], callback)<br>• fs.writeFileSync(file, data[, options])<br>• 参数：<br>– file 文件路径<br>– data 被写入的内容，可以是String或Buffer<br>– options 对象，包含属性（encoding、mode、flag）<br>– callback 回调函数</p><h3 id="同步文件写入"><a href="#同步文件写入" class="headerlink" title="同步文件写入"></a>同步文件写入</h3><p>• fs.writeSync(fd, buffer, offset, length[, position])<br>• fs.writeSync(fd, data[, position[, encoding]])<br>• 要完成同步写入文件，先需要通过openSync()打开文件来获取一个文件描述符，然后在通过writeSync()写入文件。<br>• 参数<br>– fd 文件描述符，通过openSync()获取<br>– data 要写入的数据（String 或 Buffer）<br>– offset buffer写入的偏移量<br>– length 写入的长度<br>– position 写入的起始位置<br>– encoding 写入编码</p><h3 id="异步文件写入"><a href="#异步文件写入" class="headerlink" title="异步文件写入"></a>异步文件写入</h3><p>• fs.write(fd, buffer, offset, length[, position], callback)<br>• fs.write(fd, data[, position[, encoding]], callback)<br>• 要使用异步写入文件，先需要通过open()打开文件，然后在回调函数中通过write()写入。<br>• 参数：<br>– fd 文件描述符<br>– data 要写入的数据（String 或 Buffer）<br>– offset buffer写入的偏移量<br>– length 写入的长度<br>– position 写入的起始位置<br>– encoding 写入编码</p><h3 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h3><p>• 往一个文件中写入大量数据时，最好的方法之一是使用流。<br>• 若要将数据异步传送到文件，首需要使用以下语法创建一个Writable对象：<br>– fs.createWriteStream(path[, options])<br>• path 文件路径<br>• options {encoding:””,mode:””,flag:””}<br>• 一旦你打开了Writable文件流，就可以使用write()方法来写入它，写入完成后，在调用end()方法来关闭流。</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>• fs中提供了四种读取文件的方式<br>– 简单文件读取<br>– 同步文件读取<br>– 异步文件读取<br>– 流式文件读取</p><h3 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h3><p>• fs.readFile(file[, options], callback)<br>• fs.readFileSync(file[, options])<br>– 参数：<br>• file 文件路径或文件描述符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">• options &lt;Object&gt; | &lt;String&gt;</span><br><span class="line">– encoding &lt;String&gt; | &lt;Null&gt; 默认 = null</span><br><span class="line">– flag &lt;String&gt; 默认 = &#x27;r&#x27;</span><br><span class="line">• callback 回调函数，有两个参数err 、data</span><br><span class="line">1234</span><br></pre></td></tr></table></figure><h3 id="同步文件读取"><a href="#同步文件读取" class="headerlink" title="同步文件读取"></a>同步文件读取</h3><p>• fs.readSync(fd, buffer, offset, length, position)<br>– 参数：<br>• fd 文件描述符<br>• buffer 读取文件的缓冲区<br>• offset buffer的开始写入的位置<br>• length 要读取的字节数<br>• position 开始读取文件的位置</p><h3 id="异步文件读取"><a href="#异步文件读取" class="headerlink" title="异步文件读取"></a>异步文件读取</h3><p>• fs.read(fd, buffer, offset, length, position, callback)<br>– 参数：<br>• fd 文件描述符<br>• buffer 读取文件的缓冲区<br>• offset buffer的开始写入的位置<br>• length 要读取的字节数<br>• position 开始读取文件的位置<br>• callback 回调函数 参数err , bytesRead , buffer</p><h3 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h3><p>• 从一个文件中读取大量的数据时，最好的方法之一就是流式读取，这样将把一个文件作为Readable流的形式打开。<br>• 要从异步从文件传输数据，首先需要通过以下语法创建一个Readable流对象：<br>– fs.createReadStream(path[, options])<br>• path 文件路径<br>• options {encoding:””,mode:””,flag:””}<br>• 当你打开Readable文件流以后，可以通过readable事件和read()请求，或通过data事件处理程序轻松地从它读出。</p><h3 id="其他操作-1"><a href="#其他操作-1" class="headerlink" title="其他操作"></a>其他操作</h3><p>• 验证路径是否存在<br>– fs.exists(path，callback)<br>– fs.existsSync(path)<br>• 获取文件信息<br>– fs.stat(path, callback)<br>– fs.statSync(path)<br>• 删除文件<br>– fs.unlink(path, callback)<br>– fs.unlinkSync(path)<br>• 列出文件<br>– fs.readdir(path[, options], callback)<br>– fs.readdirSync(path[, options])<br>• 截断文件<br>– fs.truncate(path, len, callback)<br>– fs.truncateSync(path, len)<br>• 建立目录<br>– fs.mkdir(path[, mode], callback)<br>– fs.mkdirSync(path[, mode])<br>• 删除目录<br>– fs.rmdir(path, callback)<br>– fs.rmdirSync(path)<br>• 重命名文件和目录<br>– fs.rename(oldPath, newPath, callback)<br>– fs.renameSync(oldPath, newPath)<br>• 监视文件更改写入<br>– fs.watchFile(filename[, options], listener)</p><h3 id="fs总结笔记"><a href="#fs总结笔记" class="headerlink" title="fs总结笔记"></a>fs总结笔记</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">文件系统（File System）</span><br><span class="line">- 文件系统简单来说就是通过Node来操作系统中的文件</span><br><span class="line">- 使用文件系统，需要先引入fs模块，fs是核心模块，直接引入不需要下载</span><br><span class="line"></span><br><span class="line">同步文件的写入</span><br><span class="line">- 手动操作的步骤</span><br><span class="line">1.打开文件</span><br><span class="line"> fs.openSync(path, flags[, mode])</span><br><span class="line"> - path 要打开文件的路径</span><br><span class="line"> - flags 打开文件要做的操作的类型</span><br><span class="line"> r 只读的</span><br><span class="line"> w 可写的</span><br><span class="line"> - mode 设置文件的操作权限，一般不传</span><br><span class="line"> 返回值：</span><br><span class="line"> - 该方法会返回一个文件的描述符作为结果，我们可以通过该描述符来对文件进行各种操作</span><br><span class="line"></span><br><span class="line">2.向文件中写入内容</span><br><span class="line"> fs.writeSync(fd, string[, position[, encoding]])</span><br><span class="line"> - fd 文件的描述符，需要传递要写入的文件的描述符</span><br><span class="line"> - string 要写入的内容</span><br><span class="line"> - position 写入的起始位置</span><br><span class="line"> - encoding 写入的编码，默认utf-8</span><br><span class="line"></span><br><span class="line">3.保存并关闭文件</span><br><span class="line"> fs.closeSync(fd)</span><br><span class="line"> - fd 要关闭的文件的描述符</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">//打开文件</span><br><span class="line">var fd = fs.openSync(&quot;hello.txt&quot; , &quot;w&quot;);</span><br><span class="line"></span><br><span class="line">//向文件中写入内容</span><br><span class="line">fs.writeSync(fd , &quot;今天天气真不错~~~&quot;, 2);</span><br><span class="line"></span><br><span class="line">//关闭文件</span><br><span class="line">fs.closeSync(fd);</span><br><span class="line"></span><br><span class="line">console.log(&quot;程序向下执行~~~&quot;);</span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br><span class="line">/**</span><br><span class="line">异步文件写入</span><br><span class="line"> fs.open(path, flags[, mode], callback)</span><br><span class="line"> - 用来打开一个文件</span><br><span class="line">    - 异步调用的方法，结果都是通过回调函数的参数返回的</span><br><span class="line"> - 回调函数两个参数：</span><br><span class="line"> err 错误对象，如果没有错误则为null</span><br><span class="line"> fd  文件的描述符</span><br><span class="line"> fs.write(fd, string[, position[, encoding]], callback)</span><br><span class="line"> - 用来异步写入一个文件</span><br><span class="line"></span><br><span class="line"> fs.close(fd, callback)</span><br><span class="line"> - 用来关闭文件</span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">//引入fs模块</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//打开文件</span><br><span class="line">fs.open(&quot;hello2.txt&quot;,&quot;w&quot;,function (err , fd) &#123;</span><br><span class="line">//判断是否出错</span><br><span class="line">if(!err)&#123;</span><br><span class="line">//如果没有出错，则对文件进行写入操作</span><br><span class="line">fs.write(fd,&quot;这是异步写入的内容&quot;,function (err) &#123;</span><br><span class="line">if(!err)&#123;</span><br><span class="line">console.log(&quot;写入成功~~&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//关闭文件</span><br><span class="line">fs.close(fd , function (err) &#123;</span><br><span class="line">if(!err)&#123;</span><br><span class="line">console.log(&quot;文件已关闭~~~&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&quot;程序向下执行~~~&quot;);</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637383940414243</span><br><span class="line">/*</span><br><span class="line">简单文件写入</span><br><span class="line"> fs.writeFile(file, data[, options], callback)</span><br><span class="line"> fs.writeFileSync(file, data[, options])</span><br><span class="line">- file 要操作的文件的路径</span><br><span class="line">- data 要写入的数据</span><br><span class="line">- options 选项，可以对写入进行一些设置</span><br><span class="line">- callback 当写入完成以后执行的函数</span><br><span class="line"></span><br><span class="line">- flag</span><br><span class="line">r 只读</span><br><span class="line">w 可写</span><br><span class="line">a 追加</span><br><span class="line"> */</span><br><span class="line">//引入fs模块</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">/*fs.writeFile(&quot;hello3.txt&quot;,&quot;这是通过writeFile写入的内容&quot;,&#123;flag:&quot;r+&quot;&#125; , function (err) &#123;</span><br><span class="line">if(!err)&#123;</span><br><span class="line">console.log(&quot;写入成功~~~&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//C:\Users\lilichao\Desktop\hello.txt</span><br><span class="line">//C:\\Users\\lilichao\\Desktop\\hello.txt</span><br><span class="line"></span><br><span class="line">fs.writeFile(&quot;C:/Users/lilichao/Desktop/hello.txt&quot;,&quot;这是通过writeFile写入的内容&quot;,&#123;flag:&quot;w&quot;&#125; , function (err) &#123;</span><br><span class="line">if(!err)&#123;</span><br><span class="line">console.log(&quot;写入成功~~~&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(err);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536</span><br><span class="line">/*</span><br><span class="line">同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出</span><br><span class="line"> */</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">//流式文件写入</span><br><span class="line">//创建一个可写流</span><br><span class="line">/*</span><br><span class="line">fs.createWriteStream(path[, options])</span><br><span class="line">- 可以用来创建一个可写流</span><br><span class="line">- path，文件路径</span><br><span class="line">- options 配置的参数</span><br><span class="line"> */</span><br><span class="line">var ws = fs.createWriteStream(&quot;hello3.txt&quot;);</span><br><span class="line"></span><br><span class="line">//可以通过监听流的open和close事件来监听流的打开和关闭</span><br><span class="line">/*</span><br><span class="line">on(事件字符串,回调函数)</span><br><span class="line">- 可以为对象绑定一个事件</span><br><span class="line"></span><br><span class="line">once(事件字符串,回调函数)</span><br><span class="line">- 可以为对象绑定一个一次性的事件，该事件将会在触发一次以后自动失效</span><br><span class="line"></span><br><span class="line">* */</span><br><span class="line">ws.once(&quot;open&quot;,function () &#123;</span><br><span class="line">console.log(&quot;流打开了~~~&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.once(&quot;close&quot;,function () &#123;</span><br><span class="line">console.log(&quot;流关闭了~~~&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//通过ws向文件中输出内容</span><br><span class="line">ws.write(&quot;通过可写流写入文件的内容&quot;);</span><br><span class="line">ws.write(&quot;今天天气真不错&quot;);</span><br><span class="line">ws.write(&quot;锄禾日当午&quot;);</span><br><span class="line">ws.write(&quot;红掌拨清清&quot;);</span><br><span class="line">ws.write(&quot;清清真漂亮&quot;);</span><br><span class="line"></span><br><span class="line">//关闭流，关闭写的那个文件的管口</span><br><span class="line">ws.end();</span><br><span class="line">//关闭流，关闭读的那个文件的管口</span><br><span class="line">123456789101112131415161718192021222324252627282930313233343536373839404142</span><br><span class="line">/*</span><br><span class="line">1.同步文件读取</span><br><span class="line">2.异步文件读取</span><br><span class="line">3.简单文件读取</span><br><span class="line"> fs.readFile(path[, options], callback)</span><br><span class="line"> fs.readFileSync(path[, options])</span><br><span class="line"> - path 要读取的文件的路径</span><br><span class="line"> - options 读取的选项</span><br><span class="line"> - callback回调函数，通过回调函数将读取到内容返回(err , data)</span><br><span class="line"> err 错误对象</span><br><span class="line"> data 读取到的数据，会返回一个Buffer</span><br><span class="line"></span><br><span class="line">4.流式文件读取</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">var path = &quot;C:/Users/lilichao/Desktop/笔记.mp3&quot;;</span><br><span class="line"></span><br><span class="line">fs.readFile(&quot;an.jpg&quot; , function (err , data) &#123;</span><br><span class="line">if(!err)&#123;</span><br><span class="line">//console.log(data);</span><br><span class="line">//将data写入到文件中</span><br><span class="line">fs.writeFile(&quot;C:/Users/lilichao/Desktop/hello.jpg&quot;,data,function(err)&#123;</span><br><span class="line">if(!err)&#123;</span><br><span class="line">console.log(&quot;文件写入成功&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125; );</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132</span><br><span class="line">/*</span><br><span class="line">流式文件读取也适用于一些比较大的文件，可以分多次将文件读取到内存中</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">//创建一个可读流</span><br><span class="line">var rs = fs.createReadStream(&quot;C:/Users/lilichao/Desktop/笔记.mp3&quot;);</span><br><span class="line">//创建一个可写流</span><br><span class="line">var ws = fs.createWriteStream(&quot;a.mp3&quot;);</span><br><span class="line"></span><br><span class="line">//监听流的开启和关闭</span><br><span class="line">rs.once(&quot;open&quot;,function () &#123;</span><br><span class="line">console.log(&quot;可读流打开了~~&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.once(&quot;close&quot;,function () &#123;</span><br><span class="line">console.log(&quot;可读流关闭了~~&quot;);</span><br><span class="line">//数据读取完毕，关闭可写流</span><br><span class="line"></span><br><span class="line">ws.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.once(&quot;open&quot;,function () &#123;</span><br><span class="line">console.log(&quot;可写流打开了~~&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ws.once(&quot;close&quot;,function () &#123;</span><br><span class="line">console.log(&quot;可写流关闭了~~&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//如果要读取一个可读流中的数据，必须要为可读流绑定一个data事件，data事件绑定完毕，它会自动开始读取数据</span><br><span class="line">rs.on(&quot;data&quot;, function (data) &#123;</span><br><span class="line">//console.log(data);</span><br><span class="line">//将读取到的数据写入到可写流中</span><br><span class="line">ws.write(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738</span><br><span class="line">/*</span><br><span class="line">流式文件读取也适用于一些比较大的文件，可以分多次将文件读取到内存中</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line"></span><br><span class="line">//创建一个可读流</span><br><span class="line">var rs = fs.createReadStream(&quot;C:/Users/lilichao/Desktop/笔记.mp3&quot;);</span><br><span class="line">//创建一个可写流</span><br><span class="line">var ws = fs.createWriteStream(&quot;b.mp3&quot;);</span><br><span class="line"></span><br><span class="line">//pipe()可以将可读流中的内容，直接输出到可写流中</span><br><span class="line">rs.pipe(ws);</span><br><span class="line">12345678910111213</span><br><span class="line">node</span><br><span class="line">- 包（package）</span><br><span class="line">- 将多个模块组合为一个完整的功能，就是一个包</span><br><span class="line">- 包结构</span><br><span class="line">bin</span><br><span class="line">- 二进制的可执行文件，一般都是一些工具包中才有</span><br><span class="line">lib</span><br><span class="line">- js文件</span><br><span class="line">doc</span><br><span class="line">- 文档</span><br><span class="line">test</span><br><span class="line">- 测试代码</span><br><span class="line">package.json</span><br><span class="line">- 包的描述文件</span><br><span class="line"></span><br><span class="line">- package.json</span><br><span class="line">- 它是一个json格式的文件，在它里面保存了包各种相关的信息</span><br><span class="line">name 包名</span><br><span class="line">version 版本</span><br><span class="line">dependencies 依赖</span><br><span class="line">main 包的主要的文件</span><br><span class="line">bin 可执行文件</span><br><span class="line"></span><br><span class="line">- npm（Node Package Manager node的包管理器）</span><br><span class="line">- 通过npm可以对node中的包进行上传、下载、搜索等操作</span><br><span class="line">- npm会在安装完node以后，自动安装</span><br><span class="line">- npm的常用指令</span><br><span class="line">npm -v 查看npm的版本</span><br><span class="line">npm version 查看所有模块的版本</span><br><span class="line">npm init 初始化项目（创建package.json）</span><br><span class="line">npm i/install 包名 安装指定的包</span><br><span class="line">npm i/install 包名 --save 安装指定的包并添加依赖</span><br><span class="line">npm i/install 包名 -g 全局安装（一般都是一些工具）</span><br><span class="line">npm i/install 安装当前项目所依赖的包</span><br><span class="line">npm s/search 包名 搜索包</span><br><span class="line">npm r/remove 包名 删除一个包</span><br><span class="line"></span><br><span class="line">文件系统（File System）</span><br><span class="line">- Buffer（缓冲区）</span><br><span class="line">- Buffer和数组的结构的非常类似，Buffer是用来存储二进制数据的</span><br><span class="line">- Buffer的方法</span><br><span class="line">- Buffer.from(字符串)</span><br><span class="line">- 将一个字符串中内容保存到一个buffer中</span><br><span class="line">- buf.toString()</span><br><span class="line">- 将buffer转换为一个字符串</span><br><span class="line">- Buffer.alloc(size)</span><br><span class="line">- 创建一个指定大小的buffer对象</span><br><span class="line">- Buffer.allocUnsafe(size)</span><br><span class="line">- 创建一个指定大小的buffer对象，可以包含敏感数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- fs模块</span><br><span class="line">- 在Node通过fs模块来对系统中的文件进行操作，fs模块是node中已经继承好了，不需要在使用npm下载，直接引入即可</span><br><span class="line">- 引入fs</span><br><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">- fs模块中的大部分操作都提供了两种方法，同步方法和异步方法</span><br><span class="line">同步方法带sync</span><br><span class="line">异步方法没有sync，都需要回调函数</span><br><span class="line"></span><br><span class="line">- 写入文件</span><br><span class="line">1.同步写入</span><br><span class="line">2.异步写入</span><br><span class="line">3.简单写入</span><br><span class="line">4.流式写入</span><br><span class="line"></span><br><span class="line">- 读取文件</span><br><span class="line">1.同步读取</span><br><span class="line">2.异步读取</span><br><span class="line">3.简单读取</span><br><span class="line">4.流式读取</span><br><span class="line"></span><br><span class="line">- 方法</span><br><span class="line">- 打开文件</span><br><span class="line">fs.open(path, flags[, mode], callback)</span><br><span class="line">fs.openSync(path, flags[, mode])</span><br><span class="line"></span><br><span class="line">- 读写文件</span><br><span class="line">fs.write(fd, string[, position[, encoding]], callback)</span><br><span class="line">fs.writeSync(fd, string[, position[, encoding]])</span><br><span class="line"></span><br><span class="line">fs.read(fd, buffer, offset, length, position, callback)</span><br><span class="line">fs.readSync(fd, buffer, offset, length, position)</span><br><span class="line"></span><br><span class="line">- 关闭文件</span><br><span class="line">fs.close(fd,callback)</span><br><span class="line">fs.closeSync(fd);</span><br><span class="line"></span><br><span class="line">- 简单文件读取和写入</span><br><span class="line">fs.writeFile(file, data[, options], callback)</span><br><span class="line">fs.writeFileSync(file, data[, options])</span><br><span class="line"></span><br><span class="line">fs.readFile(path[, options], callback)</span><br><span class="line">fs.readFileSync(path[, options])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 流式文件读取和写入</span><br><span class="line">- 流式读取和写入适用于一些比较大的文件</span><br><span class="line">fs.createWriteStream(path[, options])</span><br><span class="line">fs.createReadStream(path[, options])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（八）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="JS零碎知识点"><a href="#JS零碎知识点" class="headerlink" title="JS零碎知识点"></a>JS零碎知识点</h2><p><strong>2021&#x2F;5&#x2F;26</strong></p><ol><li>注意保留字！！</li><li>注意分号有时候是不能省略的（要么都加分号，要么在不加分号的地方都不加分号，养成好的习惯）</li><li>在return、break、continue和随后的表示之间不能有换行。如果添加了换行，程序只有在极特殊的情况下才会报错，而且程序的调试非常不方便</li><li>在涉及自增自减运算符的时候，这些运算符可作为表达式的前缀，也可以当做表达式的后缀。如果将其用作后缀表达式，它和表达式应当在同一行。否则，行尾将填补分号，同时自增自减运算符将会作为下一行代码的前缀操作符并与之一起解析</li><li>如果函数用来初始化（使用 new 运算符）一个新建的对象，我们称之为构造函数</li><li>从技术上将讲,只有JS对象才能拥有方法。然而，数字、字符串和布尔值也可以拥有自己的方法。</li><li>在JS中，只有null和undefined是无法拥有方法的值</li><li>在JS中，字符串是不可变的</li><li>JS变量是无类型的，变量可以被赋予任何类型的值，同样一个变量也可以重新赋予不同类型的值</li><li>JS不区分整数值和浮点数值，所有数值均用浮点数值表示</li><li>JS中的算数运算在溢出、下溢或被零整除时不会报错</li><li>下溢是当运算结果无限接近于零并且比JS能表示的最小值还小的时候发生的一种情形，在这种情况下，JS将会返回0。当一个负数发生下溢时，JS返回一个特殊的值“负零”</li><li>报 <strong>NaN</strong>（非数字） 的几种情况：零除以零 无穷大除以无穷大 给任意负数作开方运算 算数运算符与不是数字或无法转换为数字的操作数一起使用</li><li>JS中的非数字值有一点特殊：它和任何值都不相等，包括自身。也就是说没有办法通过x&#x3D;&#x3D;NaN来判断变量x是否是NaN。相反，应当使用x!&#x3D;x来判断，当且仅当x为NaN时，表达式的结果才为true。（与函数isNaN()和函数isFinite（）类似）</li><li>正零值与负零值相等</li><li>JS二进制浮点数能胜任大多数任务，发生的错误在判等的时候才会出现</li><li>JS并没有表示单个字符的“字符型”。要表示一个16位值，只需将其赋值给字符串变量即可，这个字符串长度为1</li><li>在JS代码和HTML代码混杂在一起时，最好在JS和HTML代码中各自使用独立的引号风格</li><li>JS中字符串是固定不变的，类似replace（）和toUpperCase（）方法都返回新字符串，原字符串本身并没有发生改变</li><li>空字符串会被转换成false</li><li>对null执行typeof运算，结果返回字符串”object”，也就是说，可以将null认为是一个特殊的对象值，含义是“非对象”</li><li>undefined说明变量没有初始化或者这个属性或元素不存在，如果函数没有返回任何值，则返回undefined，引用没有提供实参的函数形参的值也只会得到undefined，他是预定义的全局变量</li><li>null和undefined往往可以互换，判断相等运算符”&#x3D;&#x3D;”认为二者是相等的（要使用严格相等运算符”&#x3D;&#x3D;&#x3D;”来区分它们）</li><li>字符串不是对象，为什么会有属性呢？只要引用了字符串s的属性，JS就会将字符串值通过调用new String(s)的方式转换成对象，这个对象继承了字符串的方法，并被用来处理属性的引用，一旦属性引用结束，这个新创建的对象就会销毁</li><li>同字符串一样，数字和布尔值也具有各自的方法：通过Number()和Boolean()构造函数创建一个临时对象，这些方法的调用均是来自于这个临时对象</li><li>存取字符串、数字或布尔值的属性时创建的临时对象称作包装对象，通常，包装对象被看做是一种实现细节，而不用特别关注</li><li>JS会在必要时将包装对象转换成原始值</li><li>原始值（undefined,null,布尔值，数字，字符串）是不可更改的，任何方法都无法更改（或“突变”）一个原始值</li><li>对象和原始值不同，首先它们是可变的，它们的值是可修改的</li><li>对象的比较并非值的比较：即使两个对象包含同样的属性及相同的值，它们也是不相等的。各个索引元素完全相等的两个数组也不相等</li><li>我们通常将对象称为引用类型，以此来和JS的基本类型区分开来，依照术语的叫法，对象值都是引用，对象的比较均是引用的比较：当且仅当它们引用同一个基对象时，它们才相等</li><li>“&#x3D;&#x3D;”判等运算符在判断两个值是否相等时做了一些类型转换，而恒等运算符“&#x3D;&#x3D;&#x3D;”在判断相等时并未做任何类型转换</li><li>一个值转换为另一个值并不意味着两个值相等</li><li><strong>显示类型转换</strong></li></ol><p>2021.7.19</p><ol><li><p><strong>声明提前的经典例子</strong></p><p><img src="https://i.loli.net/2021/07/19/if6ha9yO8UrqgKv.png" alt="image-20210719184902628.png"></p></li><li><p><strong>作用域链</strong></p><p>当JS需要查找变量X的值的时候（这个过程称之为变量解析），它会从链中的第一个对象开始查找，如果这个对象有一个名为X的属性，则会直接使用这个属性的值，如果第一个对象不存在名为X的属性，则会继续查找下一个对象，以此类推。如果作用域链上没有任何一个对象含有属性X,那么就认为这段代码的作用域上不存在X，并最终抛出一个引用错误异常</p></li><li><p><strong>原始表达式</strong></p><p>JS中的原始表达式包含常量或直接量，关键字和变量</p></li><li><p><strong>属性访问表达式</strong></p><p><img src="https://i.loli.net/2021/07/19/dcUD4JakKeNpGxO.png" alt="image-20210719191812762.png"></p></li><li><p>一元操作符，赋值和三元条件运算符都具有从右至左的结合性</p></li><li><p><img src="C:\Users\11505\AppData\Roaming\Typora\typora-user-images\image-20210719201719516.png" alt="image-20210719201719516"></p></li><li><p>取余结果的符号与被除数保持一致</p></li><li><p>1+2+” blind mice” &#x2F;&#x2F;&#x3D;&gt;”3 blind mice”</p><p>1+(2+” blind mice”) &#x2F;&#x2F;&#x3D;&gt;”12 blind mice”</p></li><li><p>NaN和其他任何值都是不相等的，包括它本身</p></li></ol><h2 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h2><h3 id="1-块级元素和行内元素的相互转换"><a href="#1-块级元素和行内元素的相互转换" class="headerlink" title="1.块级元素和行内元素的相互转换"></a>1.块级元素和行内元素的相互转换</h3><p>我们可以通过<code>display</code>属性将块级元素和行内元素进行相互转换。display即“显示模式”。</p><p>块级元素可以转换为行内元素：</p><p>一旦，给一个块级元素（比如div）设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display: inline;</span><br></pre></td></tr></table></figure><p>那么，这个标签将立即变为行内元素，此时它和一个span无异。inline就是“行内”。也就是说：</p><ul><li>此时这个div不能设置宽度、高度；</li><li>此时这个div可以和别人并排了。</li></ul><p><strong>关于浮动：</strong></p><h4 id="性质1：浮动的元素脱标"><a href="#性质1：浮动的元素脱标" class="headerlink" title="性质1：浮动的元素脱标"></a>性质1：浮动的元素脱标</h4><p><strong>一旦一个元素浮动了，那么，将能够并排了，并且能够设置宽高了。无论它原来是个div还是个span</strong></p><h4 id="性质2：浮动的元素互相贴靠"><a href="#性质2：浮动的元素互相贴靠" class="headerlink" title="性质2：浮动的元素互相贴靠"></a>性质2：浮动的元素互相贴靠</h4><h4 id="性质3：浮动的元素有“字围”效果"><a href="#性质3：浮动的元素有“字围”效果" class="headerlink" title="性质3：浮动的元素有“字围”效果"></a>性质3：浮动的元素有“字围”效果</h4><p>关于浮动我们要强调一点，浮动这个东西，为避免混乱，我们在初期一定要遵循一个原则：<strong>永远不是一个东西单独浮动，浮动都是一起浮动，要浮动，大家都浮动。</strong></p><h4 id="性质4：收缩"><a href="#性质4：收缩" class="headerlink" title="性质4：收缩"></a>性质4：收缩</h4><p>收缩：一个浮动的元素，如果没有设置width，那么将自动收缩为内容的宽度（这点非常像行内元素）。</p><p>举例如下：</p><p><img src="http://img.smyhvae.com/20170801_1720.png" alt="img"></p><p>上图中，div本身是块级元素，如果不设置widh，它会单独霸占整行；但是，设置div浮动后，它会收缩</p><h3 id="2-margin-和-padding"><a href="#2-margin-和-padding" class="headerlink" title="2.margin 和 padding"></a>2.margin 和 padding</h3><p>如果我们想要移动盒子等的位置 ，除了可以用相对定位和绝对定位还可以用margin 和paddinng；</p><p><img src="https://img-blog.csdnimg.cn/20190418091918148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0ODg1Mzc0,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>margin的用法说明：<br>（1）上下相连的两个盒子之间的空白需要相互抵消时，比如15px+30px的margin，将得到30px的空白距离。（两个盒子都有margin时，选择较大距离的）</p><p>（2）需要在border外侧添加空白时。<br>（3）空白处不需要有背景色时。</p><p>padding的用法说明：<br>（1）padding不能给负值，margin可以给负值。<br>（2）需要在border内测添加空白时（文字与边框距离的设置）<br>（3）上下相连的两个盒子之间的空白希望等于两者之和时，比如15px<br>+20px的padding，将得到35px的空白。</p><ol start="3"><li>usemap的用法</li></ol><p>……</p><h3 id="3-CSS属性之过渡（transition）属性"><a href="#3-CSS属性之过渡（transition）属性" class="headerlink" title="3.CSS属性之过渡（transition）属性"></a>3.CSS属性之过渡（transition）属性</h3><p>定义<br>过渡transition是个复合属性，它包括了transition-property、transition-duration、transition-timing-function、transition-delay这四个属性，配合这四个属性完成一个完整的过渡动画效果。</p><p>transition-property: 过渡属性，指定属性的name、transition效果（默认值为all）</p><p>transition-duration: 过渡效果需要多久时间完成，指定完成过渡的时间。（单位：s&#x2F;ms）</p><p>transition-timing-function: 指定完成过渡的曲线。（是匀速还是非匀速）</p><p>transition-delay: 指定延迟时间。（延迟多久后开始执行）</p><p>缩写形式：transition: transition-property transition-duration transition-timing-function transition-delay;</p><!DOCTYPE html><html lang="zh">  <head>    <meta charset="utf-8">    <title>过渡属性</title>    <style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  #trans &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line">height: 100px;</span><br><span class="line">border: 1px solid red;</span><br><span class="line">background-color: blue;</span><br><span class="line"></span><br><span class="line">-webkit-transition-property: width;</span><br><span class="line">transition-property: width;</span><br><span class="line"></span><br><span class="line">-webkit-transition-duration: 2s;</span><br><span class="line">transition-duration: 2s;</span><br><span class="line"></span><br><span class="line">-webkit-transition-timing-function: ease;</span><br><span class="line">transition-timing-function: ease;</span><br><span class="line"></span><br><span class="line">-webkit-transition-delay: 2s;</span><br><span class="line">transition-delay: 2s;</span><br><span class="line">  &#125;</span><br><span class="line">  #trans:hover &#123;</span><br><span class="line">    width: 400px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>  </head>  <body>    <pre><code>&lt;div id=&quot;trans&quot;&gt;  过渡&lt;/div&gt;</code></pre><p>​<br>  </body></p></html><p>行距等于line-height减font-size</p><h3 id="4-transform-translate-方法坐标详解"><a href="#4-transform-translate-方法坐标详解" class="headerlink" title="4.transform:translate()方法坐标详解"></a>4.transform:translate()方法坐标详解</h3><p>定义：translate()方法，根据左(X轴)和顶部(Y轴)位置给定的参数，从当前元素位置移动。</p><p>但是如何移动呢？于是做了以下实验：</p><p>实验1.设置transform:translate(0px,0px),即延X轴和延Y轴均移动0像素，保持原有位置</p><p>实验2：设置transform:translate(10px,10px),即延X轴和延Y轴均移动10像素</p><p>结论：当移动的数是正数时，在Y轴方向上，相对原来的位置向下移动，在X轴方向上，相对原来的位置向右移动。</p><p>实验3：设置transform:translate(-50%,-50%),即延X轴和延Y轴均移动50%</p><p><img src="https://i.loli.net/2021/08/05/sDGiInFYJlA6oLE.png" alt="transform translate.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（七）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%83%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="数据可视化Echarts"><a href="#数据可视化Echarts" class="headerlink" title="数据可视化Echarts"></a>数据可视化Echarts</h2><h3 id="1-什么是数据可视化"><a href="#1-什么是数据可视化" class="headerlink" title="1. 什么是数据可视化"></a>1. 什么是数据可视化</h3><h4 id="1-1-数据可视化"><a href="#1-1-数据可视化" class="headerlink" title="1.1  数据可视化"></a>1.1  数据可视化</h4><p><img src="https://i.loli.net/2021/08/28/t36lFmy9YDXA5ZV.png" alt="数据可视化.png"></p><h4 id="1-2-数据可视化的场景"><a href="#1-2-数据可视化的场景" class="headerlink" title="1.2 数据可视化的场景"></a>1.2 数据可视化的场景<img src="https://i.loli.net/2021/08/28/zHIWEQCo6cO58gm.png" alt="数据可视化的场景.png"></h4><h4 id="1-3-常见的数据可视化库"><a href="#1-3-常见的数据可视化库" class="headerlink" title="1.3 常见的数据可视化库"></a>1.3 常见的数据可视化库</h4><p><img src="https://i.loli.net/2021/08/28/2ueCVlTqEy3FXLZ.png" alt="常见数据可视化库.png"></p><h3 id="2-数据可视化项目概述"><a href="#2-数据可视化项目概述" class="headerlink" title="2. 数据可视化项目概述"></a>2. 数据可视化项目概述</h3><p>学习目的：<strong>承上启下</strong></p><p>承上：</p><ol><li>复习以前学习内容</li><li>HTML5+CSS3 布局相关技术</li><li>JavaScript\jQuery相关技术</li></ol><p>启下：</p><ol><li>为学习服务器编程做铺垫</li><li>如何把服务器里面的数据渲染到页面中</li></ol><p><strong>项目技术：</strong></p><p><img src="https://i.loli.net/2021/08/28/DJRIVaXN2vPsbMW.png" alt="项目技术.png"></p><h3 id="3-ECharts简介"><a href="#3-ECharts简介" class="headerlink" title="3. ECharts简介"></a>3. ECharts简介</h3><p><img src="https://i.loli.net/2021/08/28/WiIezknx8g9K5TJ.png" alt="Echarts简介.png"></p><h3 id="4-Echarts的基本使用"><a href="#4-Echarts的基本使用" class="headerlink" title="4. Echarts的基本使用"></a>4. Echarts的基本使用</h3><h4 id="4-1-使用五部曲"><a href="#4-1-使用五部曲" class="headerlink" title="4.1 使用五部曲"></a>4.1 使用五部曲</h4><p><img src="https://i.loli.net/2021/08/28/Qv2ufR37lBcHn5V.png" alt="五部曲.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">立即执行函数</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//1.实例化对象</span></span><br><span class="line"><span class="keyword">var</span> myChart=echarts.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.pie&quot;</span>));</span><br><span class="line"><span class="comment">//2.指定配置项和数据</span></span><br><span class="line"><span class="keyword">var</span> option=&#123;</span><br><span class="line">…………</span><br><span class="line">………………</span><br><span class="line">…………</span><br><span class="line">&#125;；</span><br><span class="line">配置项和数据给实例化对象</span><br><span class="line">myChart.<span class="title function_">setOption</span>(option);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-2-相关配置"><a href="#4-2-相关配置" class="headerlink" title="4.2 相关配置"></a>4.2 相关配置</h4><p><img src="https://i.loli.net/2021/08/28/o1ZNuBjYdqzbeip.png" alt="相关配置.png"></p><h4 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h4><p><img src="https://i.loli.net/2021/08/28/Vu3pTIKizAlwFJk.png" alt="小结.png"></p><p><strong>grid配置</strong>：</p><p>就是里面的那个表格，设置left right bottom 这些</p><p>有个containLabel属性，设置为true可以防止数据显示溢出</p><p>设置为false则可能溢出</p><p><strong>xAxis和yAxis：</strong></p><p>就是用来设置X和Y坐标轴相关的一些数据的</p><p>xAxis中的<strong>type</strong>设置坐标轴类型 data就是上图中的周一周二周三 <strong>boundaryGap</strong>若设置为true则周一周二周三设置在两个刻度的中间 flase是刻度与文字正好对齐</p><p>修改线的颜色就直接(就相当于有几条线数组里面就有几个元素)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">color</span>:[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>,<span class="string">&#x27;green&#x27;</span>];</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/28/ps7rMdNjTtw16LD.png" alt="小结2.png"></p><h4 id="4-4-相关配置讲解"><a href="#4-4-相关配置讲解" class="headerlink" title="4.4 相关配置讲解"></a>4.4 相关配置讲解</h4><p><img src="https://i.loli.net/2021/08/28/dvYq4PKVCRS6Zmz.png" alt="series系列列表.png"></p><h3 id="5-数据可视化项目"><a href="#5-数据可视化项目" class="headerlink" title="5. 数据可视化项目"></a>5. 数据可视化项目</h3><h4 id="1-数据可视化项目适配方案"><a href="#1-数据可视化项目适配方案" class="headerlink" title="1.数据可视化项目适配方案"></a>1.数据可视化项目适配方案</h4><ol><li>宽度在1024–1920px自适应</li><li>适配方案</li></ol><p><img src="https://i.loli.net/2021/08/29/5qiXk3z1yuWhH2w.png" alt="适配方案.png"></p><p><strong>REM适配</strong></p><ul><li><p>设计稿是1920px</p></li><li><p>PC端适配：宽度在1024-1920之间页面元素宽高自适应</p><ol><li><p>flexible.js 把屏幕分为24等份</p></li><li><p>cssrem 插件的基准值是80px</p><p>插件配置按钮—配置扩展设置—Root Font Size 里面设置</p><p>但是别忘记重启vscode</p></li><li><p>要把屏幕宽度约束在1024-1902之间有适配，实现代码：</p></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//实现rem适配</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1024px</span>)&#123;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">42.66px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1920px</span>)&#123;</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line"><span class="attribute">font-size</span>:<span class="number">80px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-数据可视化项目开发"><a href="#6-数据可视化项目开发" class="headerlink" title="6. 数据可视化项目开发"></a>6. 数据可视化项目开发</h3><ol><li><p>项目基础布局</p><p>一个大的viewport</p><p>三个column</p><ul><li>body设置背景图</li><li>viewport主体容器，限制最小宽度1024px，最大宽度1920px，最小高度780px<ul><li>需要居中显示</li><li>使用logo.png作为背景图，在容器内显示</li><li>内间距 88px 20px 0</li></ul></li><li>column 列容器，分三列，占比3:4:3<ul><li>中间容器外间距 32px 20px 0</li></ul></li></ul><p>注意到cover和contain区别！logo用contain(不能被遮挡)</p></li><li><p>边框图片</p><p>盒子大小不一，但是边框样式相同</p><p>CSS3中，<strong>border-image属性</strong>，指定一幅图像作为元素的边框</p><p>切图！四刀九宫格！</p><p><img src="https://i.loli.net/2021/08/29/34WkVof8SEqeIO1.png" alt="边框切割语法.png"></p></li></ol><p><strong>公共面板样式开发</strong></p><p><img src="https://i.loli.net/2021/08/29/OcoWdPzsxEnr85g.png" alt="公共面板.png"></p><p>​    里面的文字会出现在中间，因此再建一个新盒子 top left设置负值，子绝父相</p><p><strong>字体图标</strong></p><p><img src="https://i.loli.net/2021/08/29/HyDKQcsMGqV4nT3.png" alt="类名调用.png"></p><p>调用注意路径问题</p><p><strong>立即执行函数</strong></p><p><img src="https://i.loli.net/2021/08/29/96nBWFtVsUTXN2r.png" alt="立即执行函数.png"></p><p>多个立即执行函数必须用分号隔开</p><p><strong>无缝滚动</strong></p><p><img src="https://i.loli.net/2021/08/29/LsjWFxOCNvUqZr7.png" alt="无缝滚动.png"></p><p><img src="https://i.loli.net/2021/08/29/z5FqPKbv29rHIpB.png" alt="无缝滚动2.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//鼠标经xxx 就停止动画</span><br><span class="line">xxx<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">animation-play-state</span>:paused;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>饼形图的一些参数</strong></p><ol><li><p>tooptip:</p><ul><li><p>trigger:触发方式 </p><ul><li>item:数据项图形触发，主要在散点图，饼图等无类目轴的图表中使用</li><li>axis：坐标轴触发，主要在柱状图，折线图等会使用类目轴的图表中使用</li><li>none:什么都不触发</li></ul></li><li><p>formatter:决定触发的内容</p><ul><li><p>a代表series系列图表名称</p></li><li><p>b代表series 数据名称data 里面的name</p></li><li><p>c代表series数据值data里面的value</p></li><li><p>d代表 当前数据&#x2F;总数据的比例</p></li></ul><p>eg.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">formatter</span>:<span class="string">&quot;&#123;a&#125; &lt;br/&gt;&#123;b&#125;:&#123;c&#125; (&#123;d&#125;%)&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>series</p></li></ol><p><img src="https://i.loli.net/2021/08/29/kyO4x6bXriUeJW9.png" alt="series.png"></p><p>注意color写在tooltips和series中间</p><p>……</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Echarts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（六）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%85%AD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><h4 id="1-1-JavaScript-库"><a href="#1-1-JavaScript-库" class="headerlink" title="1.1 JavaScript 库"></a>1.1 JavaScript 库</h4><p>封装好的特定的集合（方法和函数）</p><p>比如JQuery，方便操作DOM</p><h4 id="1-2-jQuery概念"><a href="#1-2-jQuery概念" class="headerlink" title="1.2 jQuery概念"></a>1.2 jQuery概念</h4><p>“Write Less, Do More”</p><p>用它加快开发速度</p><p><strong>链式编程，隐式迭代</strong></p><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2.基本使用"></a>2.基本使用</h3><p>jQuery 的入口函数（两种写法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">...<span class="comment">//此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">...<span class="comment">//此处是页面DOM加载完成的入口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li>等着DOM结构渲染完毕即可执行内部代码，不必等到所有外部资源加载完成，jQuery 帮我们完成了封装</li><li>相当于原生 JS 中的 DOMContentLoaded</li><li>不同于原生 JS 中的 load 时间是等页面文档，外部的 js 文件、CSS 文件、图片加载完毕才执行内部代码</li><li>更推荐第一种方式</li></ol><h4 id="2-1-jQuery-的顶级对象"><a href="#2-1-jQuery-的顶级对象" class="headerlink" title="2.1 jQuery 的顶级对象 $"></a>2.1 jQuery 的顶级对象 $</h4><ol><li>$ 是 jQuery 的别称</li><li>$ 同时也是 jQuery 的顶级对象</li></ol><h4 id="2-2-jQuery-对象和-DOM对象"><a href="#2-2-jQuery-对象和-DOM对象" class="headerlink" title="2.2 jQuery 对象和 DOM对象"></a>2.2 jQuery 对象和 DOM对象</h4><ol><li>DOM 对象：用原生js获取过来的对象就是DOM对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>jQuery 对象：用 jQuery 方式获取过来的对象就是 jQuery 对象</li></ol><p><strong>本质：通过$把DOM元素进行了包装</strong>（伪数组形式存储）</p><ol start="3"><li><strong>jQuery 对象只能使用 jQuery 方法， DOM对象则使用原生的 JavaScript 属性和方法</strong></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&#x27;div&#x27;); //$(&#x27;div&#x27;)是一个jQuery 对象</span><br></pre></td></tr></table></figure><h4 id="2-3-jQuery-对象和-DOM对象"><a href="#2-3-jQuery-对象和-DOM对象" class="headerlink" title="2.3 jQuery 对象和 DOM对象"></a>2.3 jQuery 对象和 DOM对象</h4><p>二者可以相互转换</p><ol><li>DOM 转 JQ（两种）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;标签名&#x27;</span>);</span><br><span class="line">$(对象名);</span><br></pre></td></tr></table></figure><ol start="2"><li>JQ 转 DOM（两种）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>)[index] <span class="comment">//index 是索引号</span></span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).<span class="title function_">get</span>(index)<span class="comment">//index 是索引号</span></span><br></pre></td></tr></table></figure><h3 id="3-jQuery-常用API"><a href="#3-jQuery-常用API" class="headerlink" title="3. jQuery 常用API"></a>3. jQuery 常用API</h3><h4 id="3-1-jQuery-基础选择器"><a href="#3-1-jQuery-基础选择器" class="headerlink" title="3.1 jQuery 基础选择器"></a>3.1 jQuery 基础选择器</h4><p><img src="https://i.loli.net/2021/04/27/OXPklcbF2U6ixaY.png" alt="JQ基础选择器.png"></p><h4 id="3-2-jQuery-层级选择器"><a href="#3-2-jQuery-层级选择器" class="headerlink" title="3.2 jQuery 层级选择器"></a>3.2 jQuery 层级选择器</h4><p><img src="https://i.loli.net/2021/04/27/cj5EC7NKuXYJRDm.png" alt="层级选择器.png"></p><h4 id="3-3-隐式迭代（重要）"><a href="#3-3-隐式迭代（重要）" class="headerlink" title="3.3 隐式迭代（重要）"></a>3.3 隐式迭代（重要）</h4><p>遍历内部 DOM 元素 （伪数组形式存储）的过程叫做 <strong>隐式迭代</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul li&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="3-4-jQuery-筛选选择器"><a href="#3-4-jQuery-筛选选择器" class="headerlink" title="3.4 jQuery 筛选选择器"></a>3.4 jQuery 筛选选择器</h4><p><img src="https://i.loli.net/2021/08/26/wCrIM2PspciO1uH.png" alt="JQ筛选选择器.png"></p><h4 id="3-5-jQuery-筛选方法"><a href="#3-5-jQuery-筛选方法" class="headerlink" title="3.5 jQuery 筛选方法"></a>3.5 jQuery 筛选方法</h4><p><img src="https://i.loli.net/2021/08/26/kQzbPJT3q7WUsXu.png" alt="筛选方法.png"></p><p>利用隐式迭代实现排他思想</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;red&quot;</span>);   $(<span class="variable language_">this</span>).<span class="title function_">siblings</span>(<span class="string">&quot;button&quot;</span>).<span class="title function_">css</span>(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>重点记住：parent() children() find() siblings() eq()</strong></p><h4 id="3-6-jQuery-样式操作"><a href="#3-6-jQuery-样式操作" class="headerlink" title="3.6 jQuery 样式操作"></a>3.6 jQuery 样式操作</h4><ol><li>参数只写属性名，则是返回属性值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>参数是 <strong>属性名，属性值，逗号分隔</strong>，是设置一组样式，属性必须加引号，值如果是数字可以不用跟引号和单位</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>参数可以是对象形式，方便设置多组样式。属性名和属性值用冒号隔开，属性可以不用加引号。如果是复合属性要用驼峰命名法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(&#123;<span class="string">&quot;color&quot;</span>:<span class="string">&quot;white&quot;</span>,<span class="string">&quot;font-size&quot;</span>:<span class="string">&quot;20px&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>设置类样式方法</strong></p><ol><li>添加类 <strong>里面参数不要加点</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>删除类</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">removeClass</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>切换类</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">toggleClass</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>新浪下拉菜单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;.nav&gt;li&quot;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//this不加引号</span></span><br><span class="line">        <span class="comment">//show()显示元素 hide()隐藏元素</span></span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">&quot;.nav&gt;li&quot;</span>),<span class="title function_">mouseout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">children</span>(<span class="string">&quot;ul&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>淘宝精品服饰案例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;#left li&quot;</span>).<span class="title function_">mouseover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> index=$(<span class="variable language_">this</span>).<span class="title function_">index</span>();</span><br><span class="line">$(<span class="string">&quot;#content div&quot;</span>).<span class="title function_">eq</span>(index).<span class="title function_">show</span>();</span><br><span class="line">$(<span class="string">&quot;#content div&quot;</span>).<span class="title function_">eq</span>(index).<span class="title function_">siblings</span>().<span class="title function_">hide</span>();</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>类操作与className区别</strong></p><p>原生JS 中className 会覆盖元素原先里面的类名。</p><p>jQuery 里面类操作只是对指定类进行操作，不影响原先的类名。</p><h4 id="3-7-链式编程"><a href="#3-7-链式编程" class="headerlink" title="3.7 链式编程"></a>3.7 链式编程</h4><p>是为了节省代码量，看起来更优雅</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">css</span>(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="4-jQuery-效果"><a href="#4-jQuery-效果" class="headerlink" title="4. jQuery 效果"></a>4. jQuery 效果</h3><ol><li>显示隐藏<ul><li>show()</li><li>hide()</li><li>toggle()</li></ul></li><li>滑动<ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul></li><li>淡入淡出<ul><li>fadeIn()</li><li>fadeOut()</li><li>fadeToggle()</li><li>fadeTo()</li></ul></li><li>自定义动画<ul><li>animate()</li></ul></li></ol><h4 id="4-1-显示隐藏效果"><a href="#4-1-显示隐藏效果" class="headerlink" title="4.1 显示隐藏效果"></a>4.1 显示隐藏效果</h4><ol><li><p><strong>显示语法规范</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show([speed,[easing,][fn]])</span><br></pre></td></tr></table></figure></li><li><p><strong>显示参数</strong></p><ul><li>参数都可以省略，无动画直接显示</li><li>speed:三种预定速度之一的字符串（“slow”,”normal”,or”fast”）或表示动画时长的毫秒数值（如：1000）</li><li>easing:(Optional)用来指定切换效果，默认是“swing”,可用参数”linear”</li><li>fn:回调函数，在动画完成时执行的函数，每个元素执行一次</li></ul></li></ol><h4 id="4-2-上拉下拉"><a href="#4-2-上拉下拉" class="headerlink" title="4.2 上拉下拉"></a>4.2 上拉下拉</h4><ol><li><strong>隐藏和上拉下拉其实都跟显示差不多</strong></li></ol><h4 id="4-3-事件切换"><a href="#4-3-事件切换" class="headerlink" title="4.3 事件切换"></a>4.3 事件切换</h4><ol><li><p>事件切换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">hover</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; );</span><br></pre></td></tr></table></figure><p>前者是鼠标经过的函数，后者是鼠标离开的函数</p><p>如果只写一个函数，那么鼠标经过和离开都会触发这个函数</p></li></ol><h4 id="4-4-动画队列及其停止排队方法"><a href="#4-4-动画队列及其停止排队方法" class="headerlink" title="4.4 动画队列及其停止排队方法"></a>4.4 动画队列及其停止排队方法</h4><ol><li><p><strong>动画或效果队列</strong></p><p>动画或者效果一旦触发就会执行，如果多次触发，就造成多个动画或者效果排队执行</p></li><li><p><strong>停止排队</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">stop</span>();</span><br></pre></td></tr></table></figure><p>该方法必须写到动画的前面！！</p></li></ol><h4 id="4-5-淡入淡出效果"><a href="#4-5-淡入淡出效果" class="headerlink" title="4.5 淡入淡出效果"></a>4.5 淡入淡出效果</h4><ol><li><p><strong>淡入效果语法规范</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fadeIn</span>([speed,[easing],[fn]])</span><br></pre></td></tr></table></figure></li><li><p><strong>淡入效果参数</strong></p><ul><li>参数都可以省略，无动画直接显示</li><li>speed:三种预定速度之一的字符串（“slow”,”normal”,or”fast”）或表示动画时长的毫秒数值（如：1000）</li><li>easing:(Optional)用来指定切换效果，默认是“swing”,可用参数”linear”</li><li>fn:回调函数，在动画完成时执行的函数，每个元素执行一次</li></ul></li><li><p><strong>渐进方式调整到指定的不透明度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fadeTo([[speed],opacity,[easing],[fn]])</span><br></pre></td></tr></table></figure></li><li><p><strong>效果参数</strong></p><ul><li><p>opacity透明度必须写，取值0~1之间</p></li><li><p>speed:三种预定速度之一的字符串（“slow”,”normal”,or”fast”）或表示动画时长的毫秒数值（如：1000）</p></li><li><p>easing:(Optional)用来指定切换效果，默认是“swing”,可用参数”linear”</p></li><li><p>fn:回调函数，在动画完成时执行的函数，每个元素执行一次</p></li></ul></li></ol><h4 id="4-6-自定义动画-animate"><a href="#4-6-自定义动画-animate" class="headerlink" title="4.6 自定义动画 animate"></a>4.6 自定义动画 animate</h4><ol><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">animate</span>(params,[speed],[easing],[fn])</span><br></pre></td></tr></table></figure></li><li><p>参数</p><ul><li>params:想要更改的样式属性，以对象形式传递，必须写。属性名可以不用带引号，如果是复合属性则需要采取驼峰命名法borderLeft。其余参数都可以省略</li><li>speed：三种预定速度之一的字符串（“slow”，”normal”,or “fast”)或表示动画时长的毫秒数值（如：1000）</li><li>easing:(Optional)用来指定切换效果，默认是”swing”，可用参数”linear”</li><li>fn:回调函数，在动画完成时执行的函数，每个元素执行一次</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">animate</span>(&#123;</span><br><span class="line"><span class="attr">left</span>:<span class="number">500</span>,</span><br><span class="line"><span class="attr">top</span>:<span class="number">300</span>,</span><br><span class="line"><span class="attr">opacity</span>:<span class="number">.4</span>,</span><br><span class="line"><span class="attr">width</span>:<span class="number">500</span></span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-jQuery-属性操作"><a href="#5-jQuery-属性操作" class="headerlink" title="5. jQuery 属性操作"></a>5. jQuery 属性操作</h3><h4 id="5-1-设置或获取元素固有属性值-prop"><a href="#5-1-设置或获取元素固有属性值-prop" class="headerlink" title="5.1 设置或获取元素固有属性值 prop()"></a>5.1 设置或获取元素固有属性值 prop()</h4><p>所谓元素固有属性就是元素本身自带的属性，比如<a>元素里面的href,比如<input>元素里面的type</p><ol><li>获取属性语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>设置属性语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">prop</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="5-2-设置或获取元素自定义属性值-attr"><a href="#5-2-设置或获取元素自定义属性值-attr" class="headerlink" title="5.2 设置或获取元素自定义属性值 attr()"></a>5.2 设置或获取元素自定义属性值 attr()</h4><p>用户自己给元素添加的属性，我们称之为自定义属性。比如给div 添加index&#x3D;”1”</p><ol><li>获取属性语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>) <span class="comment">//类似原生getAttribute()</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置属性语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">attr</span>(<span class="string">&quot;属性&quot;</span>,<span class="string">&quot;属性值&quot;</span>) <span class="comment">//类似原生setAttribute()</span></span><br></pre></td></tr></table></figure><h4 id="5-3-数据缓存data"><a href="#5-3-数据缓存data" class="headerlink" title="5.3 数据缓存data()"></a>5.3 数据缓存data()</h4><p>data()方法可以在指定的元素上存取数据，并不会修改DOM元素结构。一旦页面刷新，之前存放的数据都将被移除</p><ol><li>附加数据语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;value&quot;</span>) <span class="comment">//向被选元素附加数据</span></span><br></pre></td></tr></table></figure><ol start="2"><li>获取数据语法</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="string">&quot;name&quot;</span>) <span class="comment">//向被选元素获取数据</span></span><br></pre></td></tr></table></figure><p>同时可以获取data-index h5自定义属性第一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.<span class="title function_">data</span>(<span class="string">&quot;index&quot;</span>) <span class="comment">//不用谢data- 而且返回的是数字型</span></span><br></pre></td></tr></table></figure><h3 id="6-jQuery-内容文本值"><a href="#6-jQuery-内容文本值" class="headerlink" title="6. jQuery 内容文本值"></a>6. jQuery 内容文本值</h3><ol><li>普通元素内容html()( 相当于原生innerHTML)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html() //获取元素的内容</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html(&quot;内容&quot;) //设置元素的内容</span><br></pre></td></tr></table></figure><ol start="2"><li><p>普通元素文本内容text() （相当于原生innerText)</p><p>跟上面一样</p></li><li><p>表单的值 val() （相当于原生value）</p></li></ol><h3 id="7-jQuery-元素操作"><a href="#7-jQuery-元素操作" class="headerlink" title="7.  jQuery 元素操作"></a>7.  jQuery 元素操作</h3><p>主要是遍历、创建、添加、删除元素操作</p><h4 id="7-1遍历元素"><a href="#7-1遍历元素" class="headerlink" title="7.1遍历元素"></a>7.1遍历元素</h4><p>jQuery 隐式迭代是对同一类元素做了同样的操作。如果想要给同一类元素做不同操作，就需要用到遍历</p><p><img src="https://i.loli.net/2021/08/26/Y2VwUbTgIQcm3oX.png" alt="jq遍历元素.png"></p><p><img src="https://i.loli.net/2021/08/26/DHbWawc3grOvzPq.png" alt="JQ遍历2.png"></p><h4 id="7-2-创建元素"><a href="#7-2-创建元素" class="headerlink" title="7.2 创建元素"></a>7.2 创建元素</h4><p><strong>语法：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>动态创建li标签</p><h4 id="7-3-添加元素"><a href="#7-3-添加元素" class="headerlink" title="7.3 添加元素"></a>7.3 添加元素</h4><ol><li><p>内部添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">append</span>(<span class="string">&quot;内容&quot;</span>)</span><br></pre></td></tr></table></figure><p>把内容放入匹配元素内部最后面，类似原生 appenChild</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">prepend</span>(<span class="string">&quot;内容&quot;</span>)</span><br></pre></td></tr></table></figure><p>把内容放入匹配元素内部最前面</p></li><li><p>外部添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">after</span>(<span class="string">&quot;内容&quot;</span>)  <span class="comment">//把内容放入目标元素后面</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">before</span>(<span class="string">&quot;内容&quot;</span>) <span class="comment">//把内容放入目标元素前面</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="7-4-删除元素"><a href="#7-4-删除元素" class="headerlink" title="7.4 删除元素"></a>7.4 删除元素</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">remove</span>() <span class="comment">//删除匹配的元素（本身） 自杀</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">empty</span>() <span class="comment">//删除匹配的元素集合中所有的子节点</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">html</span>(<span class="string">&quot;&quot;</span>)<span class="comment">//清空匹配的元素内容</span></span><br></pre></td></tr></table></figure><h3 id="8-jQuery-尺寸、位置操作"><a href="#8-jQuery-尺寸、位置操作" class="headerlink" title="8. jQuery 尺寸、位置操作"></a>8. jQuery 尺寸、位置操作</h3><h4 id="8-1-jQuery-尺寸"><a href="#8-1-jQuery-尺寸" class="headerlink" title="8.1 jQuery 尺寸"></a>8.1 jQuery 尺寸</h4><p><img src="https://i.loli.net/2021/08/26/9nUm1SZDsvOirta.png" alt="JQ尺寸.png"></p><ul><li>以上参数为空，则是获取相应值，返回的是数字型</li><li>如果参数为数字，则是修改相应值</li><li>参数可以不必写单位</li></ul><h4 id="8-2-jQuery-位置"><a href="#8-2-jQuery-位置" class="headerlink" title="8.2 jQuery 位置"></a>8.2 jQuery 位置</h4><p>位置主要有三个：offset()、position()、scrollTop()&#x2F;scrollLeft()</p><ol><li><p>获取设置距离文档的位置（偏移）offset（跟父级没有关系）</p><p><img src="https://i.loli.net/2021/08/28/X4kMQWvd8nboEAK.png" alt="offset.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="title function_">funtion</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//修改位置</span></span><br><span class="line">$(<span class="string">&quot;.son&quot;</span>).<span class="title function_">offset</span>(&#123;</span><br><span class="line">    <span class="attr">top</span>:<span class="number">200</span>,</span><br><span class="line">    <span class="attr">left</span>:<span class="number">200</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取距离带有定位父级位置（偏移）position</p><p>如果没有定位的父级，则以文档为准</p><p>这个方法只能获取不能设置偏移</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="string">&quot;.son&quot;</span>).<span class="title function_">position</span>());</span><br></pre></td></tr></table></figure></li><li><p>scrollTop()&#x2F;scrollLeft()设置或获取元素被卷去的头部和左侧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>(<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">var</span> boxTop=$(<span class="string">&quot;.container&quot;</span>).<span class="title function_">offset</span>().<span class="property">top</span>;</span><br><span class="line">$(<span class="variable language_">window</span>).<span class="title function_">scroll</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>());</span><br><span class="line">    <span class="keyword">if</span> ($(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>()&gt;=botTop)&#123;</span><br><span class="line">        $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">fadeIn</span>();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">         $(<span class="string">&quot;.back&quot;</span>).<span class="title function_">fadeOut</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;.back&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="variable language_">document</span>).<span class="title function_">scrollTop</span>(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><img src="https://i.loli.net/2021/08/28/SGk7RsXuFMdfP91.png" alt="动画返回顶部.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.back&quot;).click(function()&#123;</span><br><span class="line">//不能是文档而是html和body元素做动画</span><br><span class="line">$(&quot;body,html&quot;).stop().animate(&#123;</span><br><span class="line">scrollTop:0</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>电梯导航案例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.fixedtool li&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($(<span class="variable language_">this</span>).<span class="title function_">index</span>());</span><br><span class="line"><span class="keyword">var</span> current=$(<span class="string">&quot;.floor .w&quot;</span>).<span class="title function_">eq</span>($(<span class="variable language_">this</span>).<span class="title function_">index</span>()).<span class="title function_">offset</span>().<span class="property">top</span>;</span><br><span class="line">$(<span class="string">&quot;body.html&quot;</span>).<span class="title function_">stop</span>().<span class="title function_">animate</span>(&#123;</span><br><span class="line"><span class="attr">scrollTop</span>:current</span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">//li 添加类</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>滑动页面自动添加和移除类名</p><p><img src="https://i.loli.net/2021/08/28/rh7V4gubWCximYL.png" alt="滑动页面自动添加和移除类名.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.floor .w&quot;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params">i,ele</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="variable language_">document</span>).<span class="property">scrollTop</span>&gt;=$(ele).<span class="title function_">offset</span>().<span class="property">top</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">$(<span class="string">&quot;.fixedtool li&quot;</span>).<span class="title function_">eq</span>(i).<span class="title function_">addClass</span>(<span class="string">&quot;current&quot;</span>).<span class="title function_">siblings</span>().<span class="title function_">removeClass</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>节流阀（互斥锁！）</strong>：设置flag，并在最后用回调函数进行修改</p><h3 id="9-jQuery-事件"><a href="#9-jQuery-事件" class="headerlink" title="9. jQuery 事件"></a>9. jQuery 事件</h3><h4 id="9-1-jQuery-事件注册"><a href="#9-1-jQuery-事件注册" class="headerlink" title="9.1 jQuery 事件注册"></a>9.1 jQuery 事件注册</h4><p><strong>单个事件注册</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;事件处理程序&#125;)</span><br></pre></td></tr></table></figure><h4 id="9-2-jQuery事件处理"><a href="#9-2-jQuery事件处理" class="headerlink" title="9.2 jQuery事件处理"></a>9.2 jQuery事件处理</h4><ol><li>事件处理 on() 绑定事件</li></ol><p><img src="https://i.loli.net/2021/08/28/l2F1XcJ9MB7qzwr.png" alt="on__.png"></p><p><img src="https://i.loli.net/2021/08/28/xnU73FCdio5BVNz.png" alt="on优势.png"></p><p><img src="https://i.loli.net/2021/08/28/hGltsbXHB63v5PQ.png" alt="优势2.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原理是冒泡</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;这是事件委托&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/28/uh3NmjOPlLf2ZiY.png" alt="优势3.png"></p><p><strong>微博发布案例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">$(<span class="string">&quot;.btn&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> li=$(<span class="string">&quot;&lt;li&gt;&lt;/li&gt;&quot;</span>);</span><br><span class="line">li.<span class="title function_">html</span>($(<span class="string">&quot;.txt&quot;</span>).<span class="title function_">val</span>()+<span class="string">&quot;&lt;a href=&#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">prepend</span>(li);</span><br><span class="line">li.<span class="title function_">slideDown</span>();</span><br><span class="line">$(<span class="string">&quot;.txt&quot;</span>).<span class="title function_">val</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//点击的删除按钮，可以删除当前的微博留言li</span></span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//slideUp中的回调函数</span></span><br><span class="line">    $(<span class="variable language_">this</span>).<span class="title function_">parent</span>().<span class="title function_">slideUp</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">         $(<span class="variable language_">this</span>).<span class="title function_">remove</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>事件处理 off() 解绑事件</li></ol><p><img src="https://i.loli.net/2021/08/28/FrzGu6JP2wgVce5.png" alt="off__.png"></p><ol start="3"><li><p>one() 但是它只能触发事件一次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">one</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="number">11</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>自动触发事件</p></li></ol><p><img src="https://i.loli.net/2021/08/28/AwXa6sevu5zm3BF.png" alt="自动触发事件.png"></p><h4 id="9-3-jQuery-事件对象"><a href="#9-3-jQuery-事件对象" class="headerlink" title="9.3 jQuery 事件对象"></a>9.3 jQuery 事件对象</h4><p><img src="https://i.loli.net/2021/08/28/idsXS3cKQVPOG7h.png" alt="jQuery 事件对象.png"></p><h3 id="10-jQuery-其他方法"><a href="#10-jQuery-其他方法" class="headerlink" title="10. jQuery 其他方法"></a>10. jQuery 其他方法</h3><h4 id="10-1-jQuery-拷贝对象"><a href="#10-1-jQuery-拷贝对象" class="headerlink" title="10.1 jQuery 拷贝对象"></a>10.1 jQuery 拷贝对象</h4><p><img src="https://i.loli.net/2021/08/28/1zG4a6k7MVy3f9Z.png" alt="jq拷贝2.png"></p><p>浅拷贝会直接覆盖掉，但是深拷贝如果原来的对象里面有同名的内容，会进行添加而非进行覆盖</p><h4 id="10-2-jQuery-多库共存"><a href="#10-2-jQuery-多库共存" class="headerlink" title="10.2 jQuery 多库共存"></a>10.2 jQuery 多库共存</h4><p><img src="https://i.loli.net/2021/08/28/Tvt9njy4X3gLSPd.png" alt="多库共存.png"></p><h4 id="10-3-jQuery-插件"><a href="#10-3-jQuery-插件" class="headerlink" title="10.3 jQuery 插件"></a>10.3 jQuery 插件</h4><p><strong>推荐网站：</strong></p><ol><li>jQuery之家</li><li>jQuery插件库</li></ol><p><strong>使用步骤：</strong></p><ol><li>引入相关文件（jQuery文件和插件文件）</li><li>复制相关html、css、js(调用插件)</li></ol><p>常见的用法：</p><ol><li><p>瀑布流</p></li><li><p>图片懒加载</p></li><li><p>全屏滚动（fullpage.js）</p><p><strong>bootstrap组件和JS插件</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（五）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="PC-端网页特效"><a href="#PC-端网页特效" class="headerlink" title="PC 端网页特效"></a>PC 端网页特效</h2><h3 id="1-元素偏移量-offset-系列"><a href="#1-元素偏移量-offset-系列" class="headerlink" title="1. 元素偏移量 offset 系列"></a>1. 元素偏移量 offset 系列</h3><h4 id="1-1-offset-概述"><a href="#1-1-offset-概述" class="headerlink" title="1.1 offset 概述"></a>1.1 offset 概述</h4><p>offset 翻译过来就是偏移量，我们使用offset 系列相关属性可以 <strong>动态的</strong> 得到该元素的位置（偏移）、大小等。</p><ul><li>获取元素距离带有定位父元素的位置</li><li>获取元素自身的大小（宽度高度）</li><li>注意：返回的数值都不带单位</li></ul><p>offset 系列常用属性</p><table><thead><tr><th>offset系列属性</th><th>作用</th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回作为该元素<strong>带有定位</strong>的父级元素 如果父级都没有定位则返回 body</td></tr><tr><td>element.offsetTop</td><td>返回元素相对<strong>带有定位</strong>父元素上方的偏移 父亲没有定位以 body 为准</td></tr><tr><td>element.offsetLeft</td><td>返回元素相对<strong>带有定位</strong>父元素左边框的偏移 父亲没有定位以 body 为准</td></tr><tr><td>element.offsetWidth</td><td>返回自身包括padding、边框、内容区的宽度，返回数值不带单位</td></tr><tr><td>element.offsetHeight</td><td>返回自身包括padding、边框、内容区的高度，返回数值不带单位</td></tr></tbody></table><p><strong>注意</strong>：</p><ol><li>element.offsetParent 与 element.parentNode 的区别在于 后者不需要有定位，而是返回最近一级的父元素</li></ol><h4 id="1-2-offset-与-style-区别"><a href="#1-2-offset-与-style-区别" class="headerlink" title="1.2 offset 与 style 区别"></a>1.2 offset 与 style 区别</h4><p><img src="https://i.loli.net/2021/08/04/x7gldyz8sZWw3Fc.png" alt="offset 与 style 的区别.png"></p><h3 id="2-元素可视区-client-系列"><a href="#2-元素可视区-client-系列" class="headerlink" title="2.元素可视区 client 系列"></a>2.元素可视区 client 系列</h3><p>client 翻译过来就是客户端，我们使用client系列的相关属性来获取元素可视区的相关信息。通过client系列的相关属性可以动态的得到该元素的边框大小、元素大小等</p><table><thead><tr><th>client 属性系列</th><th>作用</th></tr></thead><tbody><tr><td>element.clientTop</td><td>返回元素上边框的大小</td></tr><tr><td>element.clientLeft</td><td>返回元素左边框的大小</td></tr><tr><td>element.clientWidth</td><td>返回自身包括padding、内容区的宽度，不含边框，返回数值不带单位</td></tr><tr><td>element.clientHeight</td><td>返回自身包括padding、内容区的高度，不含边框，返回数值不带单位</td></tr></tbody></table><p><strong>立即执行函数</strong></p><ol><li><p><strong>立即执行函数：不需要调用，立马能够自己执行的函数</strong></p></li><li><p>写法：</p><ol><li>(function(){})();</li></ol><p>第二个小括号可以看做是调用函数，里面带实参</p><ol start="2"><li>(function(){}());</li></ol></li><li><p>主要作用：创建了一个独立的作用域，避免了命名冲突问题</p></li></ol><p>下面三种情况都会刷新页面都会触发 load 事件</p><ol><li><p>a 标签的超链接    </p></li><li><p>F5或者刷新按钮（强制刷新）</p></li><li><p>前进后退按钮</p><p>但是火狐中“往返缓存”导致其页面保存在内存中，此时后退按钮不能刷新页面</p><p>此时可以使用pageshow事件来触发，这个事件在页面显示时触发，无论页面是否来自缓存。在重新加载页面中，pageshow会在load事件触发后触发；根据事件对象中的persisted来判断是否是缓存中的页面触发的pageshow事件，注意这个事件给window添加</p></li></ol><h3 id="3-元素滚动-scroll-系列"><a href="#3-元素滚动-scroll-系列" class="headerlink" title="3. 元素滚动 scroll 系列"></a>3. 元素滚动 scroll 系列</h3><h4 id="3-1-元素-scroll-系列属性"><a href="#3-1-元素-scroll-系列属性" class="headerlink" title="3.1 元素 scroll 系列属性"></a>3.1 元素 scroll 系列属性</h4><p>我们使用 scroll 系列的相关属性可以动态的得到该元素的大小，滚动距离等</p><table><thead><tr><th><strong>scroll系列属性</strong></th><th>作用</th></tr></thead><tbody><tr><td>element.scrollTop</td><td>返回被卷去的上侧距离，返回数值不带单位</td></tr><tr><td>element.scrollLeft</td><td>返回被卷去的左侧距离，返回数值不带单位</td></tr><tr><td>element.scrollWidth</td><td>返回自身实际的宽度，不含边框，返回数值不带单位</td></tr><tr><td>element.scrollLeft</td><td>返回自身实际的高度，不含边框，返回数值不带单位</td></tr></tbody></table><h4 id="3-2-页面被卷去的头部"><a href="#3-2-页面被卷去的头部" class="headerlink" title="3.2 页面被卷去的头部"></a>3.2 页面被卷去的头部</h4><p>当滚动条向下滚动时，页面上面被隐藏掉的高度，我们就称为页面被卷去的头部。滚动条在滚动时会触发onscroll事件</p><p><strong>页面被卷去的头部：</strong>可以通过<strong>window.pageYOffset</strong> 获得</p><p><strong>三大系列总结：</strong></p><p>主要用法：</p><ol><li>offset 系列经常用于获得元素位置 <strong>offsetLeft offsetTop</strong></li><li>client 经常用于获取元素大小 <strong>clientWidth clientHeight</strong></li><li>scroll 经常用于获取滚动距离 <strong>scrollTop scrollLeft</strong></li><li>注意页面滚动的距离通过 window.pageXOffset 获得</li></ol><h4 id="3-3-mouseenter-和-mouseover的区别"><a href="#3-3-mouseenter-和-mouseover的区别" class="headerlink" title="3.3 mouseenter 和 mouseover的区别"></a>3.3 <strong>mouseenter 和 mouseover的区别</strong></h4><p><strong>mouseenter 鼠标事件</strong>    </p><ul><li>当鼠标移动到元素上时就会触发 mouseenter 事件</li><li>类似mouseover,它们之间的差别是</li><li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发，mouseenter 只会经过自身盒子触发</li><li>mouseenter 不会冒泡</li><li>跟mouseenter 搭配mouseleave 同样不会冒泡</li></ul><h3 id="4-动画函数封装"><a href="#4-动画函数封装" class="headerlink" title="4.动画函数封装"></a>4.动画函数封装</h3><h4 id="4-1-动画实现原理"><a href="#4-1-动画实现原理" class="headerlink" title="4.1 动画实现原理"></a>4.1 动画实现原理</h4><p><strong>核心原理：</strong> 通过定时器setInterval()不断移动盒子位置</p><p>实现步骤：</p><ol><li>获得盒子当前位置    </li><li>让盒子在当前位置加上一个移动距离</li><li>利用定时器不断重复这个操作</li><li>加一个结束定时器的条件</li><li>注意此元素需要添加定位，才能使用element.style.left</li></ol><h4 id="4-2-简单动画函数封装"><a href="#4-2-简单动画函数封装" class="headerlink" title="4.2 简单动画函数封装"></a>4.2 简单动画函数封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单动画函数封装 obj目标对象 target 目标位置</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj,target</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> timer=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">offsetLeft</span>&gt;=target)&#123;</span><br><span class="line">            <span class="comment">//停止动画 本质是停止定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span>=obj.<span class="property">offsetLeft</span>+<span class="number">1</span>+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-动画函数给不同元素记录不同定时器"><a href="#4-3-动画函数给不同元素记录不同定时器" class="headerlink" title="4.3 动画函数给不同元素记录不同定时器"></a>4.3 动画函数给不同元素记录不同定时器</h4><p>核心原理：利用 JS 是一门动态语言，可以很方便的给当前对象添加属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单动画函数封装 obj目标对象 target 目标位置</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj,target</span>)&#123;</span><br><span class="line"><span class="comment">//先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">    obj.<span class="property">timer</span>=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">offsetLeft</span>&gt;=target)&#123;</span><br><span class="line">            <span class="comment">//停止动画 本质是停止定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span>=obj.<span class="property">offsetLeft</span>+<span class="number">1</span>+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-缓动效果原理"><a href="#4-4-缓动效果原理" class="headerlink" title="4.4 缓动效果原理"></a>4.4 缓动效果原理</h4><p>缓动动画就是让元素运动速度有所变化，最常见的是让速度慢慢停下来</p><p>思路：</p><ol><li>让盒子每次移动的距离慢慢变小，速度就会慢慢落下来</li><li>核心算法：（目标值-现在的位置）&#x2F;10 作为每次移动的距离的步长</li><li>停止的条件是：让当前盒子位置等于目标位置就停止定时器</li><li>注意步长值需要取整</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单动画函数封装 obj目标对象 target 目标位置</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj,target</span>)&#123;</span><br><span class="line"><span class="comment">//先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">    obj.<span class="property">timer</span>=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//步长值写到定时器里面</span></span><br><span class="line">        <span class="comment">//把我们步长值改为整数 正值往大取，负值往小取</span></span><br><span class="line">        <span class="keyword">var</span> step=(target-obj.<span class="property">offsetLeft</span>)/<span class="number">10</span>;</span><br><span class="line">        step=step&gt;<span class="number">0</span>?<span class="title class_">Math</span>.<span class="title function_">ceil</span>(step):<span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">offsetLeft</span>==target)&#123;</span><br><span class="line">            <span class="comment">//停止动画 本质是停止定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span>=obj.<span class="property">offsetLeft</span>+step+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6-动画函数添加回调函数"><a href="#4-6-动画函数添加回调函数" class="headerlink" title="4.6 动画函数添加回调函数"></a>4.6 动画函数添加回调函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单动画函数封装 obj目标对象 target 目标位置</span></span><br><span class="line"><span class="comment">//callback是一个回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params">obj,target,callback</span>)&#123;</span><br><span class="line"><span class="comment">//先清除以前的定时器，只保留当前的一个定时器执行</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">    obj.<span class="property">timer</span>=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//步长值写到定时器里面</span></span><br><span class="line">        <span class="comment">//把我们步长值改为整数 正值往大取，负值往小取</span></span><br><span class="line">        <span class="keyword">var</span> step=(target-obj.<span class="property">offsetLeft</span>)/<span class="number">10</span>;</span><br><span class="line">        step=step&gt;<span class="number">0</span>?<span class="title class_">Math</span>.<span class="title function_">ceil</span>(step):<span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="property">offsetLeft</span>==target)&#123;</span><br><span class="line">            <span class="comment">//停止动画 本质是停止定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(obj.<span class="property">timer</span>);</span><br><span class="line">            <span class="keyword">if</span>(callback)&#123;</span><br><span class="line">            <span class="comment">//调用函数</span></span><br><span class="line">                <span class="title function_">callback</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        obj.<span class="property">style</span>.<span class="property">left</span>=obj.<span class="property">offsetLeft</span>+step+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7-动画函数封装到单独JS-文件里面"><a href="#4-7-动画函数封装到单独JS-文件里面" class="headerlink" title="4.7 动画函数封装到单独JS 文件里面"></a>4.7 动画函数封装到单独JS 文件里面</h4><p>因为以后经常使用这个动画特效，可以单独封装到一个JS文件里面，使用的时候引用这个JS文件即可</p><h3 id="5-常见网页特效案例"><a href="#5-常见网页特效案例" class="headerlink" title="5.常见网页特效案例"></a>5.常见网页特效案例</h3><h4 id="5-1-网页轮播图"><a href="#5-1-网页轮播图" class="headerlink" title="5.1 网页轮播图"></a>5.1 网页轮播图</h4><p>ul li里面放图</p><p>ol li里面放小圆圈</p><p>小圆圈的排他思想</p><p>自定义属性</p><p>自动轮播（手动调用点击事件）</p><h4 id="5-2-节流阀"><a href="#5-2-节流阀" class="headerlink" title="5.2 节流阀"></a>5.2 节流阀</h4><p>防止轮播图按钮连续点击造成播放过快</p><p>核心实现思路：利用回调函数，添加一个变量来控制，锁住函数和解锁函数</p><p>开始设置一个变量var flag&#x3D;true;</p><p>if(flag){flag&#x3D;false;do something} 关闭水龙头    </p><p>利用回调函数 动画执行完毕，flag&#x3D;true 打开水龙头</p><p><strong>返回顶部：</strong></p><p>滚动窗口至文档中的特定位置</p><p>window.scroll(x,y)</p><h2 id="移动端网页特效"><a href="#移动端网页特效" class="headerlink" title="移动端网页特效"></a>移动端网页特效</h2><h3 id="1-触屏事件"><a href="#1-触屏事件" class="headerlink" title="1. 触屏事件"></a>1. 触屏事件</h3><h4 id="1-1-触屏事件概述"><a href="#1-1-触屏事件概述" class="headerlink" title="1.1 触屏事件概述"></a>1.1 触屏事件概述</h4><p>移动端浏览器兼容性较好，我们不需要考虑以前 JS 的兼容性问题，可以放心的使用原生 JS 书写效果，但是移动端也有自己独特的地方。比如 <strong>触屏事件touch</strong>，Android和 IOS 都有。 </p><p>touch 对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可相应用户手指（或触控笔）对屏幕或者触控板操作。</p><table><thead><tr><th><strong>触屏touch事件</strong></th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个DOM元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个DOM元素上滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个DOM元素上移开时触发</td></tr></tbody></table><h4 id="1-2-触摸事件对象（TouchEvent"><a href="#1-2-触摸事件对象（TouchEvent" class="headerlink" title="1.2 触摸事件对象（TouchEvent)"></a>1.2 触摸事件对象（TouchEvent)</h4><table><thead><tr><th>触摸列表</th><th>说明</th></tr></thead><tbody><tr><td>touches</td><td>正在触摸屏幕的所有手指的一个列表</td></tr><tr><td>targetTouches</td><td>正在触摸当前DOM元素上的手指的一个列表</td></tr><tr><td>changeTouches</td><td>手指状态发生了改变的列表，从无到有，从有到无变化</td></tr></tbody></table><p>因为我们一般都是触摸元素，所以最经常使用的是 targetTouches</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">targetTouches</span>[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">//可以得到正在触摸dom元素的第一个手指的相关信息比如手指的坐标等等</span></span><br></pre></td></tr></table></figure><h4 id="1-3-移动端拖动元素"><a href="#1-3-移动端拖动元素" class="headerlink" title="1.3 移动端拖动元素"></a>1.3 移动端拖动元素</h4><ol><li>touchstart,touchmove,touchend可以实现拖动元素</li><li>但是拖动元素需要当前手指的坐标值 我们可以使用targetTouches[0]里面的pageX和pageY</li><li>移动端拖动的原理：手指移动中，计算出手指移动的距离。然后用盒子原来的位置+手指移动的距离</li><li>手指移动的距离：手指滑动中的位置减去手指刚开始触摸的位置</li></ol><p>拖动元素三部曲：</p><ol><li>触摸元素 touchstart: 获取手指初始坐标，同时获得盒子原来的位置    </li><li>移动手指touchmove:计算手指的滑动距离，并且移动盒子</li><li>离开手指touchend;</li></ol><p><strong>注意：</strong>手指移动也会触发滚动屏幕所以这里要阻止默认的屏幕滚动 e.preventDefault();</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> startX=<span class="number">0</span>;<span class="comment">//获取手指初始坐标</span></span><br><span class="line"><span class="keyword">var</span> startY=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> x=<span class="number">0</span>;<span class="comment">//获得盒子原来的位置</span></span><br><span class="line"><span class="keyword">var</span> y=<span class="number">0</span>;</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//获取手指初始坐标</span></span><br><span class="line">    startX=e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span>;</span><br><span class="line">    startY=e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>;</span><br><span class="line">    x=<span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span><br><span class="line">    y=<span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span><br><span class="line">&#125;)</span><br><span class="line">div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="comment">//计算手指移动的距离 手指移动之后的坐标减去手指的初始坐标</span></span><br><span class="line"><span class="keyword">var</span> moveX=e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span>-startX;</span><br><span class="line">    <span class="keyword">var</span> moveY=e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>-startY;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">left</span>=x+moveX+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">top</span>=y+moveY+<span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-移动端常见特效"><a href="#2-移动端常见特效" class="headerlink" title="2.移动端常见特效"></a>2.移动端常见特效</h3><h4 id="2-1-移动端轮播图（见个人练习项目）"><a href="#2-1-移动端轮播图（见个人练习项目）" class="headerlink" title="2.1 移动端轮播图（见个人练习项目）"></a>2.1 移动端轮播图（见个人练习项目）</h4><ol><li>自动播放功能的实现</li><li>开启定时器</li><li>移动端移动，可以使用translate移动</li><li>添加过渡效果</li><li>无缝滚动（检测过渡完成事件transitionend）</li></ol><p><strong>classList 属性</strong></p><p>classList属性是HTML5新增的一个属性，返回元素的类名。</p><p>该属性用于在元素中添加，移除以及切换CSS类。有以下方法</p><p>添加类：</p><p>element.classList.add(‘类名’);</p><p>移除类：</p><p>element.classList.remove(‘类名’);</p><p>切换类：</p><p>element.classList.toggle(‘类名’);</p><h4 id="2-2-click-延时解决方案"><a href="#2-2-click-延时解决方案" class="headerlink" title="2.2 click 延时解决方案"></a>2.2 click 延时解决方案</h4><p>移动端click 事件会有300ms 的延时，原因是移动端屏幕双击会缩放（double tap to zoom)页面</p><p>解决方案：</p><ol><li>禁用缩放。浏览器禁用默认的双击缩放行为并且去掉300ms的点击延迟</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;user-scalable=no&quot;</span>&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>利用 touch 事件自己封装这个事件解决300ms延迟</p><p>原理就是：</p><ol><li>当我们手指触摸屏幕，记录当前触摸时间</li><li>当我们手指离开屏幕，用离开的时间减去触摸的时间</li><li>如果时间小于150ms，并且没有滑动过屏幕，那么我们定义为点击</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装tap,解决click 300ms 延时</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tap</span>(<span class="params">obj,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> isMove=<span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> startTime=<span class="number">0</span>;<span class="comment">//记录触摸时候的时间变量</span></span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        isMove=<span class="literal">true</span>;<span class="comment">//看看是否有滑动，有滑动算拖拽，不算点击</span></span><br><span class="line">    &#125;);</span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!isMove&amp;&amp;(<span class="title class_">Date</span>.<span class="title function_">now</span>()-startTime)&lt;<span class="number">150</span>)&#123;</span><br><span class="line">            isMove=<span class="literal">false</span>;<span class="comment">//取反 重置</span></span><br><span class="line">            startTime=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="title function_">tap</span>(div,<span class="title function_">funciton</span>(<span class="params"></span>)&#123;执行代码&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>fastclick插件</li></ol><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="3-移动端常用开发插件"><a href="#3-移动端常用开发插件" class="headerlink" title="3.移动端常用开发插件"></a>3.移动端常用开发插件</h3><h4 id="3-1-什么是插件"><a href="#3-1-什么是插件" class="headerlink" title="3.1 什么是插件"></a>3.1 什么是插件</h4><p>​    JS 插件是JS 文件</p><p>特点：它一般是为了解决某个问题而专门存在，其功能单一，并且比较小</p><h4 id="3-2-fastclick插件"><a href="#3-2-fastclick插件" class="headerlink" title="3.2 fastclick插件"></a>3.2 fastclick插件</h4><p>GitHub官网地址：<a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></p><h4 id="3-3-Swiper-插件的使用（轮播图等）"><a href="#3-3-Swiper-插件的使用（轮播图等）" class="headerlink" title="3.3 Swiper 插件的使用（轮播图等）"></a>3.3 Swiper 插件的使用（轮播图等）</h4><p><a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p><ol><li>引入插件相关文件</li><li>按照规定语法使用</li></ol><p>引入相关文件（CSS和JS，自己挑选的JS放下面）</p><p>HTML里面的结构复制一份，类名不要乱动</p><p>复制相关的CSS</p><p>最后把自己挑选的JS复制一份就完成了</p><p>可修改相关参数(API)</p><p>可自己再写一份CSS把原来的覆盖掉（!important）</p><h4 id="3-4-其他移动端常见插件"><a href="#3-4-其他移动端常见插件" class="headerlink" title="3.4 其他移动端常见插件"></a>3.4 其他移动端常见插件</h4><ul><li>superslide:<a href="http://www.superslide2.com/">http://www.superslide2.com/</a>    </li><li>iscroll:<a href="https://github.com/cubiq/iscroll">https://github.com/cubiq/iscroll</a></li></ul><h4 id="3-5-插件的使用总结"><a href="#3-5-插件的使用总结" class="headerlink" title="3.5 插件的使用总结"></a>3.5 插件的使用总结</h4><ol><li>确认插件实现的功能</li><li>去官网查看使用说明</li><li>下载插件</li><li>打开demo实例文件，查看需要引入的相关文件，并且引入</li><li>复制demo实例文件中的结构html,样式css以及js代码</li></ol><h4 id="3-6-练习-移动端视频插件-zy-media-js"><a href="#3-6-练习-移动端视频插件-zy-media-js" class="headerlink" title="3.6 练习-移动端视频插件 zy.media.js"></a>3.6 练习-移动端视频插件 zy.media.js</h4><p>H5 给我们提供了video 标签，但是浏览器的支持情况不同</p><p>不同的视频格式文件，我们可以通过source解决</p><p>但是外观样式，还有暂停，播放，全屏等功能我们只能自己写代码解决</p><p>这个时候我们可以使用插件方式来制作</p><h3 id="4-移动端常用开发框架"><a href="#4-移动端常用开发框架" class="headerlink" title="4.移动端常用开发框架"></a>4.移动端常用开发框架</h3><h4 id="4-1-框架概述"><a href="#4-1-框架概述" class="headerlink" title="4.1 框架概述"></a>4.1 框架概述</h4><p>顾名思义是一套架构，它会基于自身的特点向用户提供一套较为完整的解决方案。框架的控制权在框架本身，使用者要按照框架所规定的某种规范进行开发</p><p>插件一般是为了解决某个问题而专门存在，其功能单一，并且比较小</p><p>常用框架：<strong>Bootstrap Vue React Angular</strong></p><p>常用插件：<strong>swiper superslide iscroll</strong></p><h4 id="4-2-Bootstrap"><a href="#4-2-Bootstrap" class="headerlink" title="4.2 Bootstrap"></a>4.2 Bootstrap</h4><p>Bootstrap JS插件使用步骤：</p><ol><li>引入相关js文件</li><li>复制HTML结构</li><li>修改对应样式</li><li>修改相应JS参数</li></ol><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变得越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案</p><h3 id="1-本地存储特性"><a href="#1-本地存储特性" class="headerlink" title="1.本地存储特性"></a>1.本地存储特性</h3><ol><li>数据存储在用户浏览器中</li><li>设置、读取方便，甚至页面刷新不丢失数据</li><li>容量较大，sessionStorage约5M，localStorege约20M</li><li>只能存储字符串，可以将对象JSON.stringify()编码后存储</li></ol><h3 id="2-window-sessionStorage"><a href="#2-window-sessionStorage" class="headerlink" title="2.window.sessionStorage"></a>2.window.sessionStorage</h3><ol><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口（页面）下数据可以共享</li><li>以键值对的形式存储使用</li></ol><p><strong>存储数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(key,value)</span><br></pre></td></tr></table></figure><p><strong>获取数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><p><strong>删除所有数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h3 id="3-window-localStorage"><a href="#3-window-localStorage" class="headerlink" title="3. window.localStorage"></a>3. window.localStorage</h3><ol><li>生命周期永久生效，除非手动删除，否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ol><p><strong>存储数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key,value)</span><br></pre></td></tr></table></figure><p><strong>获取数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure><p><strong>删除数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><p><strong>删除所有数据</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 网页特效与存储 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> PC端网页特效 </tag>
            
            <tag> 移动端网页特效 </tag>
            
            <tag> 网页本地存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（四）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><h3 id="1-Web-APIs-和-JS-基础关联性"><a href="#1-Web-APIs-和-JS-基础关联性" class="headerlink" title="1. Web APIs 和 JS 基础关联性"></a>1. Web APIs 和 JS 基础关联性</h3><p><strong>JS基础阶段</strong></p><ul><li>学习的基础语法</li><li>做不了网页交互效果</li><li>目的是为后面的课程打基础做铺垫</li></ul><p><strong>Web APIs 阶段</strong></p><ul><li>Web APIs 是 W3C 组织的标准</li><li>学习DOM BOM</li><li>是 JS 独有 部分</li><li>学习页面交互功能</li></ul><h3 id="2-API-和-Web-API"><a href="#2-API-和-Web-API" class="headerlink" title="2.API 和 Web API"></a>2.API 和 Web API</h3><h4 id="2-1-API"><a href="#2-1-API" class="headerlink" title="2.1 API"></a>2.1 API</h4><p>应用程序编程接口，一种工具，更轻松的实现想要完成的功能（不必纠结内部如何实现）</p><h4 id="2-2-Web-API"><a href="#2-2-Web-API" class="headerlink" title="2.2 Web API"></a>2.2 Web API</h4><p>浏览器提供的一套操作浏览器功能和页面元素的API（BOM 和 DOM）</p><h3 id="3-DOM"><a href="#3-DOM" class="headerlink" title="3. DOM"></a>3. DOM</h3><h4 id="3-1-什么是DOM"><a href="#3-1-什么是DOM" class="headerlink" title="3.1 什么是DOM"></a>3.1 什么是DOM</h4><p>文档对象模型(Document Object Model),处理可扩展标记语言的标准 <strong>编程接口</strong></p><h4 id="3-2-DOM-树"><a href="#3-2-DOM-树" class="headerlink" title="3.2 DOM 树"></a>3.2 DOM 树</h4><ul><li>文档：一个页面就是一个文档，DOM 中使用 document 表示</li><li>元素：页面中所有标签都是元素，DOM 中使用 element 表示</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用 node 表示</li></ul><p><strong>以上都能看做对象</strong></p><h3 id="4-获取元素"><a href="#4-获取元素" class="headerlink" title="4. 获取元素"></a>4. 获取元素</h3><h4 id="4-1-如何获取页面元素"><a href="#4-1-如何获取页面元素" class="headerlink" title="4.1 如何获取页面元素"></a>4.1 如何获取页面元素</h4><ul><li>ID</li><li>标签名</li><li>HTML5新增方法</li><li>特殊元素获取</li></ul><p><strong>根据 ID 获取</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;time&quot;</span>&gt;<span class="number">2021</span>-<span class="number">4</span>-<span class="number">27</span>&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> timer=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;time&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//返回的是一个Element对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//console.dir 打印我们返回的元素对象，更好的查看里面的属性和方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">dir</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>根据标签名获取</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure><p>返回的是获取过来元素对象的集合，以伪数组的形式存储</p><ol><li>因为得到的是一个对象的集合，所以我们想要操作里面的元素就需要遍历</li><li>得到元素对象是动态的</li><li>如果只有对象中只有一个元素，返回的还是<strong>伪数组</strong>的形式</li><li>如果页面中没有这个元素，返回空的伪数组</li><li>还可以获取某个元素（父元素）内部所有指定标签名的子元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">getElementByTagName</span>(<span class="string">&#x27;标签名&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>注意：父元素必须是单个对象（必须指明是哪一个元素对象）。获取的时候不包括父元素自己</strong></p><p><strong>通过 HTML5 新增的方法获取</strong></p><p>根据类名返回元素对象集合</p><ol><li>document.<strong>getElementsByClassName</strong>(‘box’);</li></ol><p>根据指定选择器返回第一个元素对象</p><ol start="2"><li><p>document.<strong>querySelector</strong>(‘选择器’)；</p></li><li><p><strong>获取body元素</strong></p><ol><li>document.body  &#x2F;&#x2F;返回body元素对象</li></ol><p><strong>获取html元素</strong></p><ol><li>document.documentElement &#x2F;&#x2F;返回html元素对象</li></ol></li></ol><h3 id="5-事件"><a href="#5-事件" class="headerlink" title="5. 事件"></a>5. 事件</h3><p><strong>事件三要素</strong></p><ol><li><p>事件源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件类型</p><p>比如鼠标点击onclick</p></li><li><p>事件处理程序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;点秋香&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-操作元素"><a href="#6-操作元素" class="headerlink" title="6.操作元素"></a>6.操作元素</h3><ol><li><p>改变元素的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.innerText</span><br></pre></td></tr></table></figure><p>不识别HTML标签 非标准</p><p>从起始位置到终止位置的内容，但是它去除html标签，同时空格和换行也会去掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.innerHTML</span><br></pre></td></tr></table></figure><p>识别html标签 W3C标准</p><p>起始位置到终止位置的全部内容，包括html标签，同时保留空格和换行</p></li><li><p>常用元素的属性操作</p><ul><li>innerText、innerHTML 改变元素内容</li><li>src、href</li><li>id、alt、title</li></ul></li><li><p>表单元素的操作属性</p><p>type</p><p>value</p><p>checked</p><p>selected</p><p>disabled(表单是否被使用)</p><p><strong>表单里面的文字内容是通过 操作value</strong>来实现改变的</p></li><li><p>样式属性操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.element.style   行内样式操作</span><br><span class="line">//如果样式比较少，或者功能简单的情况下使用</span><br><span class="line"></span><br><span class="line">2.element.className 类名样式操作</span><br><span class="line">//适合于样式较多或者功能复杂的情况</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>JS 里面的样式采取驼峰命名法 如 fontSize、 backgroundColor</li><li>JS 修改 style  样式操作，产生的是行内样式，CSS 权重比较高</li><li>如果样式修改较多，可以采取操作类名方式更改元素样式</li><li>class因为是个保留字，因此使用className 来操作元素类名属性</li><li>className 会直接更改元素的类名，会覆盖原先的类名</li></ul></li></ol><p>要保留原来的类名的话 直接加个新添加的类名就行了（多类名选择器）</p><p><strong>排他思想</strong></p><ol><li>所有元素清除样式</li><li>给当前元素设定样式</li></ol><p><strong>H5 自定义属性</strong></p><p>目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p><p>自定义属性获取是通过 <strong>getAttribute(‘属性’)</strong> 获取、</p><ol><li><p>设置H5自定义属性</p><p>H5规定自定义属性data-开头作为属性名并且赋值</p><p>比如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-index=&#x27;&quot;l&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>或者用JS设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.setAttriubute(&#x27;data-index&#x27;,2)</span><br></pre></td></tr></table></figure></li><li><p>获取H5自定义属性</p><ol><li><p>兼容性获取 element.getAttribute(‘data-index’);</p></li><li><p>H5新增 element.dataset.index 或者 element.dataset[‘index’]</p><p>ie 11 才开始支持</p></li></ol></li></ol><h3 id="7-节点操作"><a href="#7-节点操作" class="headerlink" title="7.节点操作"></a>7.节点操作</h3><p>为什么学习节点操作？</p><p><strong>获取元素通常使用两种方式：</strong></p><ol><li>利用DOM 提供的方法获取元素</li></ol><ul><li>document.getElementById()</li><li>document.getElementsByTagName()</li><li>document.querySelector 等</li><li>逻辑性不强、繁琐</li></ul><ol start="2"><li>利用节点层次关系获取元素</li></ol><ul><li>利用父子兄弟节点关系获取元素</li><li>逻辑性强， 但兼容性较差</li></ul><h4 id="7-1节点概述"><a href="#7-1节点概述" class="headerlink" title="7.1节点概述"></a><strong>7.1节点概述</strong></h4><p>万物皆节点</p><p>一般的，节点至少拥有nodeType、nodeName和nodeValue真三个基本属性</p><ul><li>元素节点 nodeType 为1</li><li>属性节点 nodeType 为2</li><li>文本节点 nodeType 为3（文本节点包含文字、空格、换行等）</li></ul><p>实际开发中，主要操作的是元素节点</p><h4 id="7-2节点层级"><a href="#7-2节点层级" class="headerlink" title="7.2节点层级"></a><strong>7.2节点层级</strong></h4><p><strong>常见的是父子层级关系</strong></p><p>父节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="property">parentNode</span></span><br><span class="line"><span class="comment">//得到的是离元素最近的父节点（亲爸爸）如果找不到父节点返回为空</span></span><br></pre></td></tr></table></figure><p>子节点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.<span class="title function_">childNodes</span>(标准)</span><br><span class="line"><span class="comment">//返回包含指定节点的子节点的集合，该集合为即时更新的集合</span></span><br></pre></td></tr></table></figure><p>注意，返回的子节点的集合包括了元素节点，属性节点和文本节点</p><p>如果只要元素节点，可以用以下代码实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; ul.<span class="property">length</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ul.<span class="property">childNodes</span>[i].<span class="property">nodeType</span>==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ul.<span class="property">childNodes</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还有个更简单的！</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="title function_">children</span>(非标准)</span><br><span class="line"><span class="comment">//是一个只读属性，返回所有的子元素节点。</span></span><br><span class="line"><span class="comment">//它只返回子元素节点，其余节点不返回</span></span><br><span class="line"><span class="comment">//虽然children 是一个非标准，但是得到了各个浏览器的支持，因此我们可以放心使用</span></span><br></pre></td></tr></table></figure><p><strong>获取第一个子元素和最后一个子元素</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">firstChild</span></span><br><span class="line"><span class="comment">//获取的第一个子节点</span></span><br><span class="line">parentNode.<span class="property">lastChild</span></span><br><span class="line"><span class="comment">//返回最后一个子节点，找不到则返回NULL</span></span><br><span class="line"><span class="comment">//以上都是包含所有节点</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parentNode.<span class="property">firstElementChild</span></span><br><span class="line">parentNode.<span class="property">lastElementChild</span></span><br><span class="line"><span class="comment">//返回的是第一个子元素节点和最后一个子元素节点</span></span><br></pre></td></tr></table></figure><p><strong>兄弟节点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回下一个兄弟节点</span></span><br><span class="line">element.<span class="property">nextSibling</span></span><br><span class="line"><span class="comment">//返回上一个兄弟节点</span></span><br><span class="line">element.<span class="property">previousSibling</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以下IE9以上支持，存在兼容性问题</span></span><br><span class="line"><span class="comment">//返回下一个兄弟元素节点</span></span><br><span class="line">element.<span class="property">nextElementSibling</span></span><br><span class="line"><span class="comment">//返回上一个兄弟元素节点</span></span><br><span class="line">element.<span class="property">previousElementSibling</span></span><br></pre></td></tr></table></figure><h4 id="7-3-创建节点"><a href="#7-3-创建节点" class="headerlink" title="7.3 创建节点"></a>7.3 创建节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tagName&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="7-4-添加节点"><a href="#7-4-添加节点" class="headerlink" title="7.4 添加节点"></a>7.4 添加节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">appendChild</span>(child)<span class="comment">//后面追加元素，类似于数组里面的push</span></span><br><span class="line"><span class="comment">//将一个节点添加到指定父节点的子节点列表末尾，类似于CSS里面after伪元素</span></span><br><span class="line">node.<span class="title function_">insertBefore</span>(child,指定元素)<span class="comment">//前面添加元素，放在指定元素的前面</span></span><br></pre></td></tr></table></figure><h4 id="7-5-删除节点"><a href="#7-5-删除节点" class="headerlink" title="7.5 删除节点"></a>7.5 删除节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">removeChild</span>(child)</span><br></pre></td></tr></table></figure><h4 id="7-6-复制节点"><a href="#7-6-复制节点" class="headerlink" title="7.6 复制节点"></a>7.6 复制节点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node.<span class="title function_">cloneNode</span>()</span><br><span class="line"><span class="comment">//括号为空或者里面是false 浅拷贝 只复制标签不复制里面的内容</span></span><br><span class="line">node.<span class="title function_">cloneNode</span>(ture)</span><br><span class="line"><span class="comment">//此时是深拷贝</span></span><br></pre></td></tr></table></figure><h4 id="7-7-三种动态创建元素的区别"><a href="#7-7-三种动态创建元素的区别" class="headerlink" title="7.7 三种动态创建元素的区别"></a>7.7 三种动态创建元素的区别</h4><ul><li><p>document.write()  创建元素</p><p>是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面<strong>全部重绘</strong></p></li><li><p>innerHTML 创建元素</p></li><li><p>document.createElement()</p><ol><li>innerHTML 是将内容写入某个DOM节点，不会导致页面全部重绘</li><li>innerHTML 创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍微复杂</li><li>createElement() 创建多个元素效率低一些，但是十分清晰</li></ol></li></ul><h3 id="8-DOM-重点核心"><a href="#8-DOM-重点核心" class="headerlink" title="8. DOM 重点核心"></a>8. DOM 重点核心</h3><p>……</p><h3 id="9-事件高级"><a href="#9-事件高级" class="headerlink" title="9. 事件高级"></a>9. 事件高级</h3><h4 id="9-1-注册事件"><a href="#9-1-注册事件" class="headerlink" title="9.1 注册事件"></a>9.1 注册事件</h4><h5 id="9-1-1注册事件概述"><a href="#9-1-1注册事件概述" class="headerlink" title="9.1.1注册事件概述"></a>9.1.1注册事件概述</h5><p>​        给元素添加事件，成为 <strong>注册事件</strong> 或者 <strong>绑定事件</strong></p><p>​        注册事件有两种方式： <strong>传统方式和    方法监听注册方式</strong></p><p>​    </p><p>​         <strong>传统注册方式</strong></p><ul><li><p>​    利用 on 开头的事件 onclick</p></li><li><p>&lt;button onclick&#x3D;”alert(“hi~)”&gt;</button></p></li><li><p>btn.onclick &#x3D; function () {}</p></li><li><p>特点：注册事件的 <strong>唯一性</strong></p></li><li><p>同一个元素同一个事件只能设置一个处理函数，最后注册的处理函数将会覆盖前面注册的处理函数</p><p>​    </p><p>​    <strong>方法监听注册方式</strong></p></li><li><p>w3c 标准 推荐方式</p></li><li><p>addEventListener() 它是一个方法</p></li><li><p>IE9 之前的IE 不支持此方法，可使用attachEvent()代替</p></li><li><p>特点：同一个元素同一个事件可以注册多个监听器</p></li><li><p>按注册顺序依次执行</p></li></ul><h5 id="9-1-2-addEventListener-事件监听方式"><a href="#9-1-2-addEventListener-事件监听方式" class="headerlink" title="9.1.2 addEventListener 事件监听方式"></a>9.1.2 addEventListener 事件监听方式</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">addEventListener</span>(<span class="string">&#x27;type&#x27;</span>,listener[,useCapture])</span><br></pre></td></tr></table></figure><p>该方法接收三个参数：</p><ul><li><strong>type</strong> : 事件类型字符串，比如click,mouseover,注意这里不带on!!</li><li><strong>listener</strong> : 事件处理函数，事件发生时，会调用该监听函数</li><li><strong>useCapture</strong>: 可选参数，是一个布尔值，默认是false</li></ul><h5 id="9-1-3-attachEvent-事件监听方式-IE独有，非常不推荐使用"><a href="#9-1-3-attachEvent-事件监听方式-IE独有，非常不推荐使用" class="headerlink" title="9.1.3 attachEvent 事件监听方式(IE独有，非常不推荐使用)"></a>9.1.3 attachEvent 事件监听方式(IE独有，非常不推荐使用)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">attachEvent</span>(<span class="string">&#x27;eventNameWithOn&#x27;</span>,callback)</span><br></pre></td></tr></table></figure><p>该方法接收两个参数：</p><ul><li><strong>eventNameWithOn</strong>:事件类型字符串，比如onclick,onmouseover,这里要带on</li><li><strong>callback:</strong> 事件处理函数，当目标出发事件时回调函数被调用</li></ul><h4 id="9-2-删除事件"><a href="#9-2-删除事件" class="headerlink" title="9.2 删除事件"></a>9.2 删除事件</h4><h5 id="9-2-1-删除事件的方式"><a href="#9-2-1-删除事件的方式" class="headerlink" title="9.2.1 删除事件的方式"></a>9.2.1 删除事件的方式</h5><ol><li><p>传统注册方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="property">onclick</span>=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>方法监听注册方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eventTarget.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;type&#x27;</span>,listener[,useCapture])</span><br><span class="line"></span><br><span class="line">eventTarget.<span class="title function_">detachEvent</span>(<span class="string">&#x27;eventNameWithOn&#x27;</span>,callback)</span><br></pre></td></tr></table></figure></li></ol><h4 id="9-3-DOM-事件流"><a href="#9-3-DOM-事件流" class="headerlink" title="9.3 DOM 事件流"></a>9.3 DOM 事件流</h4><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即 DOM 事件流</p><p>DOM 事件流分为3个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ol><ul><li>事件冒泡： IE 最早提出，事件开始时由最具体的元素接收，然后逐级向上传播到到DOM 最顶层节点的过程</li><li>事件捕获：网景最早提出，由DOM 最顶层节点开始，然后逐级向下传播到最具体的元素接收的过程<img src="https://i.loli.net/2021/07/30/ta1okjiuFEq4BwQ.png" alt="DOM事件流.png"></li></ul><p>注意：</p><ol><li>JS 代码 中只能执行捕获或者冒泡其中的一个功能</li><li>onclick  和 attachEvent 只能得到冒泡阶段</li><li>addEventListener(type,listener[,useCapture]) 第三个参数如果是true,表示在事件捕获阶段调用事件处理程序；如果是false(不写默认就是false)，表示在事件冒泡阶段调用事件处理程序</li><li>实际开发中我们很少使用事件捕获，我们更关注事件冒泡</li><li>有些事件是没有冒泡的，比如 onblur,onfocus,onmouseenter,onmouseleave</li></ol><h4 id="9-4-事件对象"><a href="#9-4-事件对象" class="headerlink" title="9.4 事件对象"></a>9.4 事件对象</h4><ol><li>event 就是一个时间对象，写到我们侦听函数的小括号里 当做形参来看</li><li>事件对象只有有了事件才会存在，它是系统给我们自动创建的，不需要我们传递参数</li><li>事件对象 是我们事件的一系列相关数据的集合，跟事件相关的，比如鼠标点击里面就包含了相关信息，鼠标坐标，如果是键盘事件里面就包含的键盘事件的信息，比如判断用户按下了哪个键</li><li>这个事件对象我们可以自己命名，比如event,evt,e</li><li>事件对象也有兼容性问题 ie678 通过window.event 兼容性的写法e&#x3D;e||window.event；</li></ol><h4 id="9-5-常见事件对象的属性和方法"><a href="#9-5-常见事件对象的属性和方法" class="headerlink" title="9.5 常见事件对象的属性和方法"></a>9.5 常见事件对象的属性和方法</h4><ol><li><p>返回事件类型：e.target 返回的是触发事件的对象（元素）this 返回的是绑定事件的对象（元素）</p><p>区别：</p><p>e.target 点击了那个元素，就返回那个元素</p><p>this 那个元素绑定了这个点击事件，就返回谁</p><p>又涉及兼容性处理……</p></li><li><p>阻止默认行为（事件）让链接不跳转，或者让提交按钮不提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();<span class="comment">//dom 标准写法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>传统的注册方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line"><span class="comment">//普通浏览器e.preventDefault();方法</span></span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line"><span class="comment">//低版本浏览器 ie678 returnValue 属性</span></span><br><span class="line">e.<span class="property">returnValue</span>;</span><br><span class="line"><span class="comment">//return false 也能阻止默认行为，没有兼容性问题，特点就是return 后面的代码不执行了 而且只限于传统的注册方式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="9-6阻止事件冒泡的两种方式"><a href="#9-6阻止事件冒泡的两种方式" class="headerlink" title="9.6阻止事件冒泡的两种方式"></a>9.6阻止事件冒泡的两种方式</h4><p><strong>阻止事件冒泡</strong></p><ul><li><p>标准写法：利用事件对象里面的 stopPropagation ()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">stopPropagation</span>()</span><br></pre></td></tr></table></figure></li><li><p>非标准写法：IE 6-8 利用事件对象 cancelBubble属性</p></li></ul><h4 id="9-7-事件委托"><a href="#9-7-事件委托" class="headerlink" title="9.7 事件委托"></a>9.7 事件委托</h4><p>也叫作事件代理</p><p><strong>原理</strong>：不是每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个节点</p><p><strong>作用：</strong> 只操作一次DOM，提高了程序的性能</p><h4 id="9-8-常见的鼠标事件"><a href="#9-8-常见的鼠标事件" class="headerlink" title="9.8 常见的鼠标事件"></a>9.8 常见的鼠标事件</h4><ol><li><p>禁止鼠标右键菜单</p><p>contextmenu主要控制应该何时显示上下文菜单，主要用于程序员取消，默认的上下文菜单</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>禁止鼠标选中(selectstart)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>鼠标事件对象</strong></p><p><strong>event</strong> 对象代表事件的状态，跟事件相关的一系列信息的集合。现阶段我们主要是用鼠标事件对象 <strong>MouseEvent</strong> 和键盘事件对象<strong>KeyboardEvent</strong></p><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口可视区的X坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口可视区的Y坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于文档页面的X坐标 IE9+支持</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于文档页面的Y坐标 IE9+支持</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于屏幕的X坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于屏幕的Y坐标</td></tr></tbody></table></li></ol><h4 id="9-9-常见的键盘事件"><a href="#9-9-常见的键盘事件" class="headerlink" title="9.9 常见的键盘事件"></a>9.9 常见的键盘事件</h4><table><thead><tr><th>键盘事件</th><th>触发条件</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发 <strong>但他不识别功能键，比如ctrl shift 箭头等</strong></td></tr></tbody></table><p><strong>注意：</strong></p><ol><li><p>三个事件的执行顺序</p><p>keydown–keypress–keyup</p></li><li><p>如果使用addEventListener 不需要加on</p></li><li><p>onkeypress 和前面两个的区别是：</p><p>他不识别功能键，比如ctrl shift 箭头等</p></li></ol><p><strong>键盘事件对象</strong></p><p>键盘事件对象中的keyCode属性 可以得到相应键的ASCII码值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">//1.我们的keyup 和 keydown 事件不区分字母大小写，a 和 A得到的都是65</span></span><br><span class="line"><span class="comment">//2.我们的keypress事件区分大小写</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keypress&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">keyCode</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h3 id="10-BOM"><a href="#10-BOM" class="headerlink" title="10.BOM"></a>10.BOM</h3><h4 id="10-1-BOM-概述"><a href="#10-1-BOM-概述" class="headerlink" title="10.1 BOM 概述"></a>10.1 BOM 概述</h4><h5 id="10-1-1-什么是BOM"><a href="#10-1-1-什么是BOM" class="headerlink" title="10.1.1 什么是BOM"></a>10.1.1 什么是BOM</h5><p>BOM即 <strong>浏览器对象模型</strong>，它提供了独立于页面而与 <strong>浏览器窗口进行交互的对象</strong>，其核心对象是window</p><p>BOM 由一系列相关的对象构成，并且每个对象都提供了很多方法和属性</p><p>BOM 缺乏标准</p><h5 id="10-1-2-BOM-的构成"><a href="#10-1-2-BOM-的构成" class="headerlink" title="10.1.2 BOM 的构成"></a>10.1.2 BOM 的构成</h5><p>BOM 比 DOM 更大，它包含 DOM</p><p><img src="https://i.loli.net/2021/07/31/jng7ci5CobS4VvB.png" alt="window顶级对象.png"></p><p><strong>window 对象是浏览器的顶级对象</strong>，它具有双重角色</p><ol><li><p>它是 JS 访问浏览器窗口的一个接口</p></li><li><p>它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法</p><p>在调用的时候可以省略window，前面学习的对话框都属于window对象方法，如alert(),prompt()等</p></li></ol><p><strong>注意：</strong> window 下的一个特殊属性 window.name</p><h4 id="10-2-window-对象的常见事件"><a href="#10-2-window-对象的常见事件" class="headerlink" title="10.2 window 对象的常见事件"></a>10.2 window 对象的常见事件</h4><h5 id="10-2-1-窗口加载事件"><a href="#10-2-1-窗口加载事件" class="headerlink" title="10.2.1 窗口加载事件"></a>10.2.1 窗口加载事件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">或者</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span><br></pre></td></tr></table></figure><p>window.onload 是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件（包括图像、脚本文件、文件等），就调用的处理函数</p><p><strong>注意：</strong></p><ol><li>有了 window.onload 就可以把 JS 代码写到页面元素上方，因为onload 等页面内内容全部加载完毕，再去执行处理函数</li><li>window.onload 传统注册事件方式只能写一次，如果有多个，会以最后一个window.onload为准</li><li>如果使用addEventListener 则没有限制</li></ol><p><img src="https://i.loli.net/2021/08/04/7syPeaYiE9VZ154.png" alt="window顶级对象.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>DOMContentLoaded 事件触发时，仅当DOM 加载完成，不包括样式表，图片，flash等等</p><p>IE9 以上才支持</p><p>如果页面的图片很多的话，从用户访问到onload 触发可能需要较长的时间，交互效果就不能实现，必然影响用户的体验，此时用DOMContentLoaded 事件比较合适</p><h5 id="10-2-2-调整窗口大小事件"><a href="#10-2-2-调整窗口大小事件" class="headerlink" title="10.2.2 调整窗口大小事件"></a>10.2.2 调整窗口大小事件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>window.onresize 是调整窗口大小加载事件，当触发时就调用的处理函数</p><p><strong>注意</strong>：</p><ol><li>只要窗口大小发生像素变化，就会触发这个事件</li><li>我们经常利用这个事件完成响应式布局。window.innerWidth 当前屏幕的宽度</li></ol><h4 id="10-3-定时器"><a href="#10-3-定时器" class="headerlink" title="10.3 定时器"></a>10.3 定时器</h4><h5 id="10-3-1-两种定时器"><a href="#10-3-1-两种定时器" class="headerlink" title="10.3.1 两种定时器"></a>10.3.1 两种定时器</h5><p>window 对象给我们提供了2个非常好用的方法-<strong>定时器</strong></p><ul><li>setTimeout()</li><li>setInterval()</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(调用函数，[延迟的毫秒数]);</span><br></pre></td></tr></table></figure><p>setTimeout() 方法用于设置一个定时器，该定时器在定时器到期后执行调用函数</p><p><strong>注意：</strong></p><ol><li>window 在使用时可以省略</li><li>这个延迟时间单位是毫秒，可以省略，如果省略默认为0</li><li>这个调用函数可以直接写函数 还可以写函数名</li><li>页面中可能有很多的定时器，我们经常给定时器加标识符（名字）</li></ol><h5 id="10-3-2-setTimeout-定时器"><a href="#10-3-2-setTimeout-定时器" class="headerlink" title="10.3.2 setTimeout() 定时器"></a>10.3.2 setTimeout() 定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(调用函数，[延迟的毫秒数] ); </span><br></pre></td></tr></table></figure><p>setTimeout() 这个调用函数我们也称为 <strong>回调函数callback</strong></p><p>简单理解：回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数</p><h5 id="10-3-3-停止-setTimeout-定时器"><a href="#10-3-3-停止-setTimeout-定时器" class="headerlink" title="10.3.3 停止 setTimeout() 定时器"></a>10.3.3 停止 setTimeout() 定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(timeout <span class="variable constant_">ID</span>)</span><br></pre></td></tr></table></figure><p>clearTimeout() 方法取消了先前通过调用setTimeout() 建立的定时器</p><p><strong>注意：</strong></p><ol><li>window可以省略</li><li>括号里面就是定时器的标识符</li></ol><h5 id="10-3-4-setInterval-定时器"><a href="#10-3-4-setInterval-定时器" class="headerlink" title="10.3.4 setInterval() 定时器"></a>10.3.4 setInterval() 定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">setInterval</span>(调用函数，[延迟的毫秒数] ); </span><br></pre></td></tr></table></figure><p>setInterval()方法重复调用一个函数，每隔这个时间，就去调用一次回调函数</p><p><strong>注意：</strong></p><ol><li><p>window可以省略</p></li><li><p>这个调用函数可以直接写函数，或者函数名或者采取字符串’函数名（’</p><p>三种形式</p></li><li><p>间隔的毫秒数默认是0，如果写，必须是毫秒，表示每隔多少毫秒就自动调用这个函数</p></li><li><p>因为定时器可能有很多，所以我们经常给定时器赋值一个标识符</p></li></ol><h5 id="10-3-5-停止-setInterval-定时器"><a href="#10-3-5-停止-setInterval-定时器" class="headerlink" title="10.3.5 停止 setInterval() 定时器"></a>10.3.5 停止 setInterval() 定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(intervalID);</span><br></pre></td></tr></table></figure><p>clearInterval() 方法取消了先前通过调用setInterval()建立的定时器</p><p><strong>注意：</strong></p><ol><li>window可以省略</li><li>里面的参数就是定时器的标识符</li><li>注意一些技巧，全局变量的声明以及初始化时赋值null（是一个对象）</li></ol><h5 id="10-3-6-this"><a href="#10-3-6-this" class="headerlink" title="10.3.6 this"></a>10.3.6 this</h5><p>this 的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this 到底指向谁，一般情况下this的最终指向是那个调用它的对象</p><ol><li>全局作用域或者普通函数中this指向全局对象window(定时器也是)</li><li>方法调用中谁调用this指向谁</li><li>构造函数中this指向构造函数的实例</li></ol><h4 id="10-4-JS-执行队列"><a href="#10-4-JS-执行队列" class="headerlink" title="10.4 JS 执行队列"></a>10.4 JS 执行队列</h4><h5 id="10-4-1-JS-是单线程"><a href="#10-4-1-JS-是单线程" class="headerlink" title="10.4.1 JS 是单线程"></a>10.4.1 JS 是单线程</h5><p><strong>同一时间只能做一件事</strong></p><p>意味着所有的任务都需要排队</p><h5 id="10-4-3-同步和异步"><a href="#10-4-3-同步和异步" class="headerlink" title="10.4.3 同步和异步"></a>10.4.3 同步和异步</h5><p>HTML5 提出 Web Worker 标准，允许JavaScript脚本创建多个线程，于是，JS中出现了同步和异步</p><p><strong>同步</strong></p><p>前一个任务结束再执行后一个任务，程序的执行顺序与任务的排列顺序是一致的、同步的。</p><p><strong>异步</strong></p><p>你在做一件事情时，因为这件事情会花费很长时间，在做这件事的同时，还可以去做别的事</p><p><strong>同步任务</strong></p><p>同步任务都在主线程上执行，形成一个 <strong>执行线</strong></p><p><strong>异步任务</strong></p><p>JS 的异步是通过回调函数实现的</p><p>一般而言，异步任务有以下三种类型：</p><ol><li>普通事件，如 click, resize 等</li><li>资源加载，如 load,error 等</li><li>定时器，包括 setInterval、setTimeout 等</li></ol><h5 id="10-4-4-JS-执行机制"><a href="#10-4-4-JS-执行机制" class="headerlink" title="10.4.4 JS 执行机制"></a>10.4.4 JS 执行机制</h5><ol><li>先执行执行线中的同步任务</li><li>异步任务（回调函数）放入任务队列中</li><li>一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态 ，进入执行栈，开始执行</li></ol><p><img src="https://i.loli.net/2021/08/04/MU2Kp4yOPIwbos9.png" alt="执行栈.png"></p><p><img src="https://i.loli.net/2021/08/04/uTJNyC92sKmGtfn.png" alt="event loop.png"></p><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为 <strong>事件循环（event loop）</strong></p><h4 id="10-5-location-对象"><a href="#10-5-location-对象" class="headerlink" title="10.5 location 对象"></a>10.5 location 对象</h4><h5 id="10-5-1-什么是location对象"><a href="#10-5-1-什么是location对象" class="headerlink" title="10.5.1 什么是location对象"></a>10.5.1 什么是location对象</h5><p>window 对象给我们提供了一个 <strong>location 属性</strong> 用于<strong>获取或设置窗体的url</strong>，并且可以<strong>用于解析url</strong>。因为这个属性返回的是一个对象，所以我们将这个属性也称为<strong>location对象</strong></p><h5 id="10-5-2-URL"><a href="#10-5-2-URL" class="headerlink" title="10.5.2 URL"></a>10.5.2 URL</h5><p>统一资源定位符 是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它</p><p>URL 的一般语法格式为：</p><p>protocol:&#x2F;&#x2F;host[:port]&#x2F;path&#x2F;[?query]#fragment</p><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议 常用的http,ftp,maito等</td></tr><tr><td>host</td><td>主机（域名）</td></tr><tr><td>port</td><td>端口号 可选，省略时使用方案的默认端口 如http的默认端口为80</td></tr><tr><td>path</td><td>路径 由 零或多个’&#x2F;‘符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td>query</td><td>参数 以键值对的形式，通过&amp;符号分隔开</td></tr><tr><td>fragment</td><td>片段 # 后面的内容 常见于链接锚点</td></tr></tbody></table><h5 id="10-5-3-location-对象的属性"><a href="#10-5-3-location-对象的属性" class="headerlink" title="10.5.3 location 对象的属性"></a>10.5.3 location 对象的属性</h5><table><thead><tr><th>location 对象属性</th><th>返回值</th></tr></thead><tbody><tr><td>location.<strong>href</strong></td><td>获取或者设置 整个URL</td></tr><tr><td>location.host</td><td>返回主机（域名）</td></tr><tr><td>location.port</td><td>返回端口号 如果未写返回 空字符串</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td>location.<strong>search</strong></td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段 # 后面内容 常见于链接 锚点</td></tr></tbody></table><h5 id="10-5-4-location-对象的方法"><a href="#10-5-4-location-对象的方法" class="headerlink" title="10.5.4 location 对象的方法"></a>10.5.4 location 对象的方法</h5><table><thead><tr><th>location 对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跟 href 一样，可以跳转页面（也称为重定向页面）</td></tr><tr><td>location.replace()</td><td>替换当前页面，因为不记录历史，所以不能后退页面</td></tr><tr><td>location.reload()</td><td>重新加载页面，相当于刷新按钮或者f5 如果参数为 true 强制刷新 ctrl +f5</td></tr></tbody></table><h4 id="10-6-navigator-对象"><a href="#10-6-navigator-对象" class="headerlink" title="10.6 navigator 对象"></a>10.6 navigator 对象</h4><p>navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent,该属性可以返回由客户机发送服务器的user-agent 头部的值。</p><p>下面前端代码可以判断用户哪个终端打开页面，实现跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|Blackberry|IEMobile|MQQBrowser|JUC|Fennec|WSOBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>)))&#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;&quot;</span>; <span class="comment">//手机</span></span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;&quot;</span>; <span class="comment">//电脑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-7-history-对象"><a href="#10-7-history-对象" class="headerlink" title="10.7 history 对象"></a>10.7 history 对象</h4><p>window 对象给我们提供了一个history 对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL</p><table><thead><tr><th>history 对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go(参数)</td><td>前进后退功能 参数如果是1 前进1个页面 如果是-1 后退1个页面</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Web APIs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Web APIs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（三）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-编程语言"><a href="#1-编程语言" class="headerlink" title="1. 编程语言"></a>1. 编程语言</h3><h4 id="1-1-编程"><a href="#1-1-编程" class="headerlink" title="1.1 编程"></a>1.1 编程</h4><p><img src="https://i.loli.net/2021/04/20/EgqViwTZI3aJnoQ.png" alt="编程.png"></p><h4 id="1-2-计算机语言"><a href="#1-2-计算机语言" class="headerlink" title="1.2 计算机语言"></a>1.2 计算机语言</h4><h4 id="1-3-编程语言"><a href="#1-3-编程语言" class="headerlink" title="1.3 编程语言"></a>1.3 编程语言</h4><h4 id="1-4-翻译器"><a href="#1-4-翻译器" class="headerlink" title="1.4 翻译器"></a>1.4 翻译器</h4><h4 id="1-5-编程语言与标记语言的区别"><a href="#1-5-编程语言与标记语言的区别" class="headerlink" title="1.5 编程语言与标记语言的区别"></a>1.5 编程语言与标记语言的区别</h4><p><img src="https://i.loli.net/2021/04/20/5D9n3Blu6RKbjz4.png" alt="区别.png"></p><h3 id="2-计算机基础"><a href="#2-计算机基础" class="headerlink" title="2. 计算机基础"></a>2. 计算机基础</h3><h4 id="2-1-计算机组成"><a href="#2-1-计算机组成" class="headerlink" title="2.1 计算机组成"></a>2.1 计算机组成</h4><p><img src="https://i.loli.net/2021/04/20/6HKZ7eFc1DTd5hV.png" alt="计算机组成.png"></p><h4 id="2-2-数据存储"><a href="#2-2-数据存储" class="headerlink" title="2.2 数据存储"></a>2.2 数据存储</h4><p><img src="https://i.loli.net/2021/04/20/VpLhlbZejBdyW5O.png" alt="数据存储.png"></p><h4 id="2-3-数据存储单位"><a href="#2-3-数据存储单位" class="headerlink" title="2.3 数据存储单位"></a>2.3 数据存储单位</h4><p><img src="https://i.loli.net/2021/04/20/gQXxrGU53VhmZzu.png" alt="数据存储单位.png"></p><h4 id="2-4-程序运行"><a href="#2-4-程序运行" class="headerlink" title="2.4 程序运行"></a>2.4 程序运行</h4><p><img src="https://i.loli.net/2021/04/20/MmaTi4jJeNStrV1.png" alt="程序运行.png"></p><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="1-初识JavaScript"><a href="#1-初识JavaScript" class="headerlink" title="1. 初识JavaScript"></a>1. 初识JavaScript</h3><h4 id="1-1-JavaScript历史"><a href="#1-1-JavaScript历史" class="headerlink" title="1.1 JavaScript历史"></a>1.1 JavaScript历史</h4><p><img src="https://i.loli.net/2021/04/20/H9VvLTNpb5ElqJj.png" alt="历史.png"></p><h4 id="1-2-JavaScript是什么"><a href="#1-2-JavaScript是什么" class="headerlink" title="1.2 JavaScript是什么"></a>1.2 JavaScript是什么</h4><ul><li>世界上最流行的语言之一，是一种运行在客户端的脚本语言</li><li>脚本语言：不需要编译，运行过程中由js解释器（js引擎）逐行来进行解释并执行</li><li>现在也可以基于Node.js技术进行服务器编程</li></ul><h4 id="1-3-JS的作用"><a href="#1-3-JS的作用" class="headerlink" title="1.3 JS的作用"></a>1.3 JS的作用</h4><p><img src="https://i.loli.net/2021/04/20/4XkH5giSPbudNV9.png" alt="作用.png"></p><h4 id="1-4-三件套的关系"><a href="#1-4-三件套的关系" class="headerlink" title="1.4 三件套的关系"></a>1.4 三件套的关系</h4><p>前两个属于标记语言——描述性语言</p><p>后两个属于脚本语言——编程类语言</p><h4 id="1-5-浏览器执行JS简介"><a href="#1-5-浏览器执行JS简介" class="headerlink" title="1.5 浏览器执行JS简介"></a>1.5 浏览器执行JS简介</h4><p><img src="https://i.loli.net/2021/04/20/Ip3v1VeEMK8utyX.png" alt="执行JS.png"></p><h4 id="1-6-JS的组成"><a href="#1-6-JS的组成" class="headerlink" title="1.6 JS的组成"></a>1.6 JS的组成</h4><p><img src="https://i.loli.net/2021/04/20/KGadXSyPB8WTqV6.png" alt="JS组成.png"></p><ol><li>ECMAScript:规定基础语法</li><li>DOM</li><li>BOM</li></ol><h4 id="1-7-JS初体验"><a href="#1-7-JS初体验" class="headerlink" title="1.7 JS初体验"></a>1.7 JS初体验</h4><p>三种书写位置，分别为行内，内嵌和外部</p><ol><li>行内式 JS</li></ol><p><code>&lt;input type=&quot;button&quot; value=&quot;点我试试&quot; onclick=&quot;alert(&#39;Hello World&#39;)&quot;&gt;</code></p><ul><li>可以将单行或者少量JS代码写在HTML标签事件属性中(以on开头的属性)，如：onclick</li><li>注意单双引号的使用：在 <strong>HTML</strong> 中我们用双引号，在 <strong>JS</strong> 中我们用单引号</li><li>可读性差，在html中编写JS大量代码时，不方便阅读</li><li>引号易错，引号多层嵌套匹配时，非常容易弄混</li><li>特殊情况下使用</li></ul><ol start="2"><li>内嵌JS</li></ol><p><code>&lt;script&gt;</code></p><p><code>alert(&#39;Hello World&#39;);</code></p><p><code>&lt;/script&gt;</code></p><ul><li>可以将多行JS代码写到<script>标签中</li><li>内嵌 JS 是学习时常用的方式</li></ul><ol start="3"><li>外部JS文件</li></ol><p><code>&lt;script src=&quot;my.js&quot;&gt;&lt;/script&gt;</code></p><h4 id="1-8-JS-注释"><a href="#1-8-JS-注释" class="headerlink" title="1.8 JS 注释"></a>1.8 JS 注释</h4><ol><li>单行注释</li><li>多行注释</li></ol><h3 id="2-JavaScript-输入输出语句"><a href="#2-JavaScript-输入输出语句" class="headerlink" title="2. JavaScript 输入输出语句"></a>2. JavaScript 输入输出语句</h3><p><img src="https://i.loli.net/2021/04/20/u24LJ3cK7kXDgyS.png" alt="输入输出语句.png"></p><h3 id="3-变量"><a href="#3-变量" class="headerlink" title="3.  变量"></a>3.  变量</h3><h4 id="3-1-什么是变量"><a href="#3-1-什么是变量" class="headerlink" title="3.1 什么是变量"></a>3.1 什么是变量</h4><p>变量是用于存放数据的容器。是程序在内存中申请的一块用于存放数据的空间</p><h4 id="3-2-变量的使用"><a href="#3-2-变量的使用" class="headerlink" title="3.2 变量的使用"></a>3.2 变量的使用</h4><ol><li>声明变量</li></ol><p><code>var age；</code></p><p>（variable)</p><ol start="2"><li>赋值</li></ol><p><code>age=10;</code></p><h4 id="3-3-变量的初始化"><a href="#3-3-变量的初始化" class="headerlink" title="3.3 变量的初始化"></a>3.3 变量的初始化</h4><p><code>var myname=&#39;lzrj&#39;；</code></p><h4 id="3-4-变量语法扩展"><a href="#3-4-变量语法扩展" class="headerlink" title="3.4 变量语法扩展"></a>3.4 变量语法扩展</h4><ol><li>更新变量</li></ol><p><code>var age = 18;</code></p><p><code>age = 10;</code></p><ol start="2"><li><p>同时声明多个变量</p></li><li><p>声明变量的特殊情况</p></li></ol><ul><li>只声明不赋值，undefined</li><li>不声明不赋值，报错</li><li>不声明直接赋值使用</li></ul><h4 id="3-5-变量命名规范"><a href="#3-5-变量命名规范" class="headerlink" title="3.5 变量命名规范"></a>3.5 变量命名规范</h4><p><img src="https://i.loli.net/2021/04/20/pn9NZbHX1kqoVmK.png" alt="变量命名规范.png"></p><h3 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型"></a>4. 数据类型</h3><h4 id="4-1-为什么需要数据类型"><a href="#4-1-为什么需要数据类型" class="headerlink" title="4.1 为什么需要数据类型"></a>4.1 为什么需要数据类型</h4><h4 id="4-2-变量的数据类型"><a href="#4-2-变量的数据类型" class="headerlink" title="4.2 变量的数据类型"></a>4.2 变量的数据类型</h4><p><strong>JavaScript是一种弱类型或者说动态语言</strong></p><p>在运行过程中确定类型</p><h4 id="4-3-数据类型的分类"><a href="#4-3-数据类型的分类" class="headerlink" title="4.3 数据类型的分类"></a>4.3 数据类型的分类</h4><ol><li><p>简单数据类型</p><p><img src="https://i.loli.net/2021/04/20/jD6zW3KoZnP5Mtr.png" alt="简单数据类型.png"></p><p>数字型 <strong>Number</strong>：</p><ol><li><p>进制：2 8 10 16</p></li><li><p>数字型范围</p></li><li><p>三个特殊值</p></li></ol><p><img src="https://i.loli.net/2021/04/20/eifLO9REGphjXto.png" alt="三个特殊值.png"></p><ol start="4"><li><strong>isNaN ()</strong></li></ol><p>判断是不是数字，是返回true,不是返回false。</p></li></ol><p>​            字符串型 <strong>String</strong>：</p><p>​        只需注意：外双内单，外单内双，内部用转义符实现换行等功能</p><p>​        str.length  显示字符串长度</p><p>​        字符串的拼接：字符串＋任意类型=拼接后的字符串</p><p>​        字符串拼接加强：（就是改成变量而已）</p><p>​        boolean型</p><p>​        undefined 和 null 型：</p><p>​        undefined和数字相加 最后结果是NaN</p><p>​        null和数字相加是数字</p><p>​    </p><ol start="2"><li>复杂数据类型</li></ol><h4 id="4-4-typeof检测数据类型"><a href="#4-4-typeof检测数据类型" class="headerlink" title="4.4 typeof检测数据类型"></a>4.4 typeof检测数据类型</h4><p><code>console.log(typeof age);</code></p><p>注意到prompt取回来的值是字符型</p><p>字面量：</p><ul><li>数字字面量</li><li>字符串字面量</li><li>布尔字面量</li></ul><h4 id="4-5-数据类型转换"><a href="#4-5-数据类型转换" class="headerlink" title="4.5 数据类型转换"></a>4.5 数据类型转换</h4><ol><li>转换为字符串</li></ol><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>.toString()</td><td>转成字符串</td><td>var num &#x3D; 1;alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num&#x3D;1；alert(String(num));</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num&#x3D;1;alert(num+’’);</td></tr></tbody></table><ol start="2"><li>转换为数字型</li></ol><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>parseInt(string)函数</td><td>将string类型转成整数数值类型</td><td>parseInt(‘66’)</td></tr><tr><td>parseFloat(string)函数</td><td>将string类型转成浮点数数值类型</td><td>parseFloat(‘66.6’)</td></tr><tr><td>Number()强制转函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js隐式转换(- * &#x2F;)</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table><h4 id="4-6-转换为Boolean型"><a href="#4-6-转换为Boolean型" class="headerlink" title="4.6 转换为Boolean型"></a>4.6 转换为Boolean型</h4><table><thead><tr><th>方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔型</td><td>Boolean(‘true’);</td></tr></tbody></table><p>代表 <strong>空的，否定</strong> 的值都会转换成false</p><h3 id="5-Javascript-运算符"><a href="#5-Javascript-运算符" class="headerlink" title="5. Javascript 运算符"></a>5. Javascript 运算符</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><p>很常规的一些知识，注意浮点数的精度问题最高是17位，精确度却不如整数</p><p>……这一部分笔记不记了，跟C语言基本上一模一样</p><p>比较运算符里面 有个比较特殊的 <strong>===</strong> ，不仅要求值一样，还有数据类型也得完全一致才行 <strong>==</strong> 有隐式转换</p><p>真就基本一模一样</p><h3 id="6-流程控制"><a href="#6-流程控制" class="headerlink" title="6.流程控制"></a>6.流程控制</h3><p><strong>顺序结构 分支结构 循环结构</strong></p><p>就是一些if else , switch ，三元表达式之类的东西，跟C语言一样</p><p>循环这部分就新学了个 <strong>断点测试</strong></p><p><img src="https://i.loli.net/2021/04/20/BghRFQ65bIqxT2N.png" alt="断点测试.png"></p><p>for ,while,do while等基本上和C语言一模一样</p><p>continue,break也是如此</p><h3 id="7-命名规范和语法格式"><a href="#7-命名规范和语法格式" class="headerlink" title="7. 命名规范和语法格式"></a>7. 命名规范和语法格式</h3><h4 id="7-1-标识符命名规范"><a href="#7-1-标识符命名规范" class="headerlink" title="7.1 标识符命名规范"></a>7.1 标识符命名规范</h4><ul><li>变量、函数的命名必须要有意义</li><li>变量的名称一般用名词</li><li>函数的名称一般用动词</li></ul><h4 id="7-2-操作符规范"><a href="#7-2-操作符规范" class="headerlink" title="7.2 操作符规范"></a>7.2 操作符规范</h4><p>操作符的左右两边各留一个空格</p><h4 id="7-3-单行注释规范"><a href="#7-3-单行注释规范" class="headerlink" title="7.3 单行注释规范"></a>7.3 单行注释规范</h4><p>单行注释前面注意前面有个空格</p><h4 id="7-4-其他规范"><a href="#7-4-其他规范" class="headerlink" title="7.4 其他规范"></a>7.4 其他规范</h4><h3 id="8-数组"><a href="#8-数组" class="headerlink" title="8. 数组"></a>8. 数组</h3><h4 id="8-1-数组的概念"><a href="#8-1-数组的概念" class="headerlink" title="8.1 数组的概念"></a>8.1 数组的概念</h4><p><img src="https://i.loli.net/2021/04/20/IhPivX6aqOlngSb.png" alt="8.3 "></p><h4 id="8-2-利用-new-创建数组"><a href="#8-2-利用-new-创建数组" class="headerlink" title="8.2 利用 new 创建数组"></a>8.2 利用 new 创建数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 数组名 = <span class="keyword">new</span>  <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(); <span class="comment">//创建一个新的空数组</span></span><br></pre></td></tr></table></figure><h4 id="8-3-利用数组字面量创建数组"><a href="#8-3-利用数组字面量创建数组" class="headerlink" title="8.3 利用数组字面量创建数组"></a>8.3 利用数组字面量创建数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 使用数组字面量的方式创建空的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名=[];</span><br><span class="line"><span class="comment">//2. 使用数组字面量方式创建带初始值的数组</span></span><br><span class="line"><span class="keyword">var</span> 数组名=[<span class="string">&#x27;小白&#x27;</span>，<span class="string">&#x27;小黑&#x27;</span>]；</span><br></pre></td></tr></table></figure><p><strong>使用最多</strong></p><h4 id="8-3-数组元素的类型"><a href="#8-3-数组元素的类型" class="headerlink" title="8.3 数组元素的类型"></a>8.3 数组元素的类型</h4><p>可以存放 <strong>任意类型</strong> 的数据，例如字符串，数字（这里跟C语言里面的不太一样）</p><h4 id="8-4-数组的索引"><a href="#8-4-数组的索引" class="headerlink" title="8.4 数组的索引"></a>8.4 数组的索引</h4><p>这里跟C差不多一致</p><h4 id="8-5-遍历数组"><a href="#8-5-遍历数组" class="headerlink" title="8.5 遍历数组"></a>8.5 遍历数组</h4><p>直接用循环</p><h4 id="8-6-数组长度"><a href="#8-6-数组长度" class="headerlink" title="8.6 数组长度"></a>8.6 数组长度</h4><p>直接 <strong>.length</strong> 获取长度</p><h4 id="8-7-数组新增元素"><a href="#8-7-数组新增元素" class="headerlink" title="8.7 数组新增元素"></a>8.7 数组新增元素</h4><ol><li>通过修改length长度新增元素</li></ol><p>增加元素后，声明的变量未给值，默认值就是 <strong>undefined</strong></p><ol start="2"><li>通过修改数组索引新增数组元素</li></ol><ul><li>可以通过修改数组索引的方式追加数组元素</li><li>不能直接给数组名赋值，否则会覆盖掉以前的数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr[<span class="number">4</span>]=<span class="string">&#x27;hotpot&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p><strong>最常用</strong></p><h3 id="9-函数"><a href="#9-函数" class="headerlink" title="9.函数"></a>9.函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">function</span> 函数名（）&#123;</span><br><span class="line">    <span class="comment">//函数体代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明不调用</p><p><strong>函数的封装</strong>：就是打包</p><h4 id="9-1函数的参数"><a href="#9-1函数的参数" class="headerlink" title="9.1函数的参数"></a>9.1函数的参数</h4><p>可以有也可以么有</p><p>就是形参实参那些东西</p><p>有几个特殊的</p><ol><li><p>如果实参的个数和形参的个数一样，则输出正常结果</p></li><li><p>如果实参的个数多与形参的个数，会取到形参的个数</p></li><li><p>如果实参的个数小于形参的个数,多的形参定义为undefined，结果为NaN</p></li></ol><p>尽量让形参个数和实参个数相匹配</p><h4 id="9-2-函数的返回值"><a href="#9-2-函数的返回值" class="headerlink" title="9.2 函数的返回值"></a>9.2 函数的返回值</h4><ol><li><p>函数只是实现某种功能，最终的结构需要返回给函数的调用者</p></li><li><p>只要函数遇到return，就把后面的结果，返回给函数的调用者 函数名（）= return 后的结果</p></li></ol><p><strong>函数返回值注意事项</strong></p><ol><li><p><strong>return 终止函数</strong></p></li><li><p>函数只能返回一个值</p></li><li><p>函数没有return，则返回undefined</p></li></ol><h4 id="9-3-arguments-的使用"><a href="#9-3-arguments-的使用" class="headerlink" title="9.3 arguments 的使用"></a>9.3 arguments 的使用</h4><p>是当前函数的一个内置对象，<strong>存储了传递的所有实参</strong></p><p><img src="https://i.loli.net/2021/04/21/lrTOdizZCeoNEHY.png" alt="arguments.png"></p><p>利用函数求任意个数的最大值</p><p>函数可以调用另一个函数</p><h4 id="9-4-函数的两种声明方式"><a href="#9-4-函数的两种声明方式" class="headerlink" title="9.4 函数的两种声明方式"></a>9.4 函数的两种声明方式</h4><ol><li>利用函数关键字自定义函数（命名函数）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><ol start="2"><li><p>函数表达式（）匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="title function_">funciton</span>(<span class="params"></span>)&#123;&#125;;</span><br></pre></td></tr></table></figure><p><strong>这个变量里面存的是函数，函数表达式也可以传递参数</strong></p></li></ol><h3 id="10-作用域"><a href="#10-作用域" class="headerlink" title="10. 作用域"></a>10. 作用域</h3><p>全局作用域，局部作用域</p><p>全局变量：在全局作用域下的变量，在全局下都可以使用</p><p><strong>注意：如果在函数内部里没有声明直接赋值的变量也是局部变量</strong></p><p>局部变量：在局部作用域下的变量 后者在函数内部的变量就是局部变量</p><p><strong>注意：函数的形参也可以看做是局部变量</strong></p><p>从执行效率来看全局变量和局部变量</p><ol><li>全局变量只有浏览器关闭的时候才会销毁，比较占内存资源</li><li>局部变量在代码运行块结束后就会被销毁，节省内存空间</li></ol><p><strong>JS 在 es6 新增的块级作用域</strong></p><p><strong>作用域链：</strong></p><ul><li><p>只要是代码，就至少有一个作用域</p></li><li><p>写在函数内部的局部作用域</p></li><li><p>如果函数中还有函数，那么在这个作用域中就可以又产生一个作用域</p></li><li><p>根据内部函数可以访问外部函数变量这一机制，用链式查找决定哪些数据能被内部函数访问，就称作作用域</p></li></ul><h3 id="11-预解析"><a href="#11-预解析" class="headerlink" title="11. 预解析"></a>11. 预解析</h3><p>JavaScript 代码是由浏览器中的 JavaScript 解析器来执行的。JavaScript 解析器在运行 JavaScript 代码的时候分为两步： 预解析和代码执行</p><p><strong>预解析：</strong>js引擎会把js 里面所有的 var 还有function 提升到当前作用域的最前面</p><p><strong>代码执行：</strong> 按照代码数学的顺序从上往下执行</p><p>预解析分为 <strong>变量预解析（变量提升）</strong> 和 <strong>函数预解析（函数提升）</strong></p><ol><li>变量提升就是把所有的变量声明提升到当前作用域的最前面，不提升赋值操作</li><li>函数提升就是把所有的函数声明提升到当前作用域的最前面</li></ol><h3 id="12-对象"><a href="#12-对象" class="headerlink" title="12. 对象"></a>12. 对象</h3><h4 id="12-1-什么是对象"><a href="#12-1-什么是对象" class="headerlink" title="12.1 什么是对象"></a>12.1 什么是对象</h4><p><strong>对象是一个具体的事物</strong></p><p>在 JS 中，对象是一组无序的相关属性和方法的结合，所有的事物都是对象，例如字符串、数值、数组、函数等</p><p>对象是由 <strong>属性和方法</strong> 组成的</p><ul><li>属性：事物的特征，在对象中用属性来表示（常用名词）</li><li>方法：事物的行为，在对象中用行为来表示（常用动词）</li></ul><h4 id="12-2-为什么要对象"><a href="#12-2-为什么要对象" class="headerlink" title="12.2 为什么要对象"></a>12.2 为什么要对象</h4><p>使表达结构更清晰，更强大</p><h4 id="12-3-创造对象的三种方式"><a href="#12-3-创造对象的三种方式" class="headerlink" title="12.3 创造对象的三种方式"></a>12.3 创造对象的三种方式</h4><ol><li><strong>利用字面量创建对象</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">uname</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>里面的属性或者方法我们采取键值对的形式 键 属性名： 值 属性值</li><li>多个属性或者方法中间用逗号隔开的</li><li>方法后面跟的是一个匿名函数</li></ol><p>调用对象的属性 <strong>对象名.属性名</strong>或者 <strong>对象名['属性名']</strong></p><p>调用对象的方法 <strong>对象名.方法名（）</strong>，别忘记添加小括号</p><ol start="2"><li><strong>利用new Object 创建对象</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">uname</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">obj.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>我们是利用 等号 = 赋值的方法 添加对象的属性和方法</p></li><li><p>每个属性和方法之间用 分号结束</p></li><li><p><strong>我们为什么需要构造函数</strong></p></li></ol><p>因为我们前面两种创建对象的方式一次只能创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ldh = &#123;</span><br><span class="line">uname :<span class="string">&#x27;liudehua&#x27;</span>,</span><br><span class="line">age : <span class="number">55</span>,</span><br><span class="line"><span class="attr">sing</span>:<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;冰雨&#x27;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们可以利用函数的方法，重复这些相同的代码，我们把这种函数称之为 <strong>构造函数</strong></p><p>因为这个函数不一样，里面封装的不是普通代码，而是对象</p><p><strong>语法格式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 构造函数名（）&#123;</span><br><span class="line"><span class="variable language_">this</span>.属性 = 值;</span><br><span class="line"><span class="variable language_">this</span>.方法 = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> 构造函数名（）;</span><br></pre></td></tr></table></figure><ul><li><p>构造函数名字首字母要大写</p></li><li><p>我们构造函数不需要return 就可以返回结果</p></li><li><p>我们构造函数必须使用new</p></li><li><p>我们只要调用函数就能创建一个 对象</p></li></ul><p><strong>构造函数和对象的区别</strong></p><ol><li>构造函数，抽象了对象的公共部分，封装到了函数里面，它泛指某一大类（class)</li><li>创建对象，特指某一个，通过new关键字创建对象的过程我们也称为对象实例化</li></ol><h4 id="12-4-new-关键字执行过程"><a href="#12-4-new-关键字执行过程" class="headerlink" title="12.4 new 关键字执行过程"></a>12.4 new 关键字执行过程</h4><ol><li>new 构造函数可以在内存中创建了一个空的对象</li><li>this 就会指向刚才创建的空对象</li><li>执行构造函数里面的代码，给这个新对象添加属性和方法</li><li>返回这个新对象（所以构造函数里面不需要return）</li></ol><h4 id="12-5-遍历对象"><a href="#12-5-遍历对象" class="headerlink" title="12.5 遍历对象"></a>12.5 遍历对象</h4><p>for in 遍历我们的对象（有点像python)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (变量 <span class="keyword">in</span> 对象) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k); <span class="comment">//k 变量 输出得到的是属性名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[k]);<span class="comment">//obj[k]得到是 属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="13-内置对象"><a href="#13-内置对象" class="headerlink" title="13. 内置对象"></a>13. 内置对象</h3><ul><li><p>JS 中对象分为三种：自定义对象，内置对象，浏览器对象</p></li><li><p>前面两种对象是JS基础内容， 属于ECMAScript ;第三个浏览器对象属于JS独有</p></li><li><p>JS自带的一些对象，供开发者使用，并提供了一些常用的或是最基本而必要的功能（属性和方法）</p></li><li><p>内置对象最大的优点是帮助我们快速开发</p></li><li><p>eg: Math, Date , Array, String等</p></li></ul><p>…… </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript | MDN (mozilla.org)</a></p><h4 id="13-1-Math对象"><a href="#13-1-Math对象" class="headerlink" title="13.1 Math对象"></a>13.1 Math对象</h4><p>使用时不需要构造，直接调用即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span> <span class="title class_">Math</span>.<span class="title function_">max</span>()……</span><br></pre></td></tr></table></figure><p><strong>封装自己的数学对象</strong></p><p>常见的几个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span><span class="comment">//圆周率</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>()<span class="comment">//向下取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>()<span class="comment">//向上取整</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>()<span class="comment">//四舍五入版 就近取整，注意-3.5结果是-3</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>() <span class="comment">//绝对值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>()/<span class="title class_">Math</span>.<span class="title function_">min</span>()<span class="comment">//求最大和最小值</span></span><br></pre></td></tr></table></figure><h4 id="13-2-随机数方法-random"><a href="#13-2-随机数方法-random" class="headerlink" title="13.2 随机数方法 random()"></a>13.2 随机数方法 random()</h4><ol><li>random()返回一个随机浮点数 0<=x<1</li><li>这个方法不跟参数</li></ol><p><strong>得到一个两个数之间的随机整数，包括两个数在内</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomIntInclusive</span>(<span class="params">min,max</span>) &#123;</span><br><span class="line">min=<span class="title class_">Math</span>.<span class="title function_">ceil</span>(min);</span><br><span class="line">max=<span class="title class_">Math</span>.<span class="title function_">floor</span>(max);</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min+<span class="number">1</span>)+min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13-3-日期对象"><a href="#13-3-日期对象" class="headerlink" title="13.3 日期对象"></a>13.3 日期对象</h4><p>是一个构造函数，必须使用 new 来调用创建我们的日期对象</p><p><strong>日期格式化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="comment">//1.如果没有参数，返回当前系统的当前时间</span></span><br><span class="line"><span class="comment">//2.参数的常用写法 </span></span><br><span class="line">数字型： <span class="number">2021</span>,<span class="number">04</span>,<span class="number">27</span></span><br><span class="line">字符串型：<span class="string">&#x27;2021-04-27 8:8:8&#x27;</span></span><br><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date);</span><br><span class="line"><span class="comment">//格式化日期 年月日</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>());<span class="comment">//返回当前日期的年</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>()+<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>());            </span><br></pre></td></tr></table></figure><p><strong>获取日期的总的毫秒形式</strong></p><p>1970年1月1日开始……(时间戳)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="title function_">valueof</span>() <span class="number">2.</span><span class="title function_">getTime</span>()</span><br><span class="line"><span class="keyword">var</span> date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>());<span class="comment">//</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="number">2.</span><span class="keyword">var</span> date1=+<span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">//最常见</span></span><br><span class="line"><span class="number">3.</span><span class="variable constant_">H5</span>新增的</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br></pre></td></tr></table></figure><h4 id="13-4-倒计时"><a href="#13-4-倒计时" class="headerlink" title="13.4 倒计时"></a>13.4 倒计时</h4><p>核心：输入的时间减去现在的时间，但是不能拿着时分秒相减</p><p>用时间戳来做！！</p><p><img src="https://i.loli.net/2021/07/22/9vJCqZuQ2GlDsOy.png" alt="时间戳的转换倒计时.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> nowTime=+<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">InputTime</span>=+<span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line"><span class="keyword">var</span> times=(inputTime-nowTime)/<span class="number">1000</span>;<span class="comment">//转换成秒</span></span><br><span class="line"><span class="keyword">var</span> d=<span class="built_in">parseInt</span>(times/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);<span class="comment">//天</span></span><br><span class="line"><span class="keyword">var</span> h=<span class="built_in">parseInt</span>(times/<span class="number">60</span>/<span class="number">60</span>%<span class="number">24</span>);<span class="comment">//时</span></span><br><span class="line"><span class="keyword">var</span> m=<span class="built_in">parseInt</span>(times/<span class="number">60</span>%<span class="number">60</span>);<span class="comment">//分</span></span><br><span class="line"><span class="keyword">var</span> s=<span class="built_in">parseInt</span>(times%<span class="number">60</span>);<span class="comment">//当前的秒</span></span><br><span class="line"><span class="keyword">return</span> d+<span class="string">&#x27;天&#x27;</span>+h+<span class="string">&#x27;时&#x27;</span>+m+<span class="string">&#x27;分&#x27;</span>+s+<span class="string">&#x27;秒&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-数组对象"><a href="#14-数组对象" class="headerlink" title="14.数组对象"></a>14.数组对象</h3><h4 id="14-1-创建："><a href="#14-1-创建：" class="headerlink" title="14.1 创建："></a>14.1 创建：</h4><ol><li><p>字面量方式</p><p>var arr=[1,2,3];</p></li><li><p>new Array()</p><p>var arr1=new Array(2);//创建了一个空的数组，有两个空元素</p><p>var arr1=new Array(2，3);//等价于[2,3]</p></li></ol><h4 id="14-2检测是否为数组"><a href="#14-2检测是否为数组" class="headerlink" title="14.2检测是否为数组"></a>14.2检测是否为数组</h4><ol><li><p>instanceof 运算符 用来检测是否是数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);</span><br></pre></td></tr></table></figure></li><li><p>Array.isArray(参数)  H5新增的方法 ie9以上才支持</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));</span><br></pre></td></tr></table></figure><h4 id="14-3添加删除数组元素的方法"><a href="#14-3添加删除数组元素的方法" class="headerlink" title="14.3添加删除数组元素的方法"></a>14.3添加删除数组元素的方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="title function_">push</span>() 在我们数组的末尾 添加一个或者多个数组元素</span><br><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>,<span class="string">&#x27;pig&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"> 可以直接追加新的元素，参数直接写数组元素就行了，返回值是新数组的长度,原数组也会发生变化</span><br><span class="line"><span class="number">2.</span><span class="title function_">unshift</span>() 在数组的开头添加元素</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span><span class="title function_">pop</span>() 删除数组的最后一个元素</span><br><span class="line">没有参数，返回值是删除的那个元素</span><br><span class="line"><span class="number">4.</span><span class="title function_">shift</span>()  删除数组的第一个元素</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">shift</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="14-4数组排序"><a href="#14-4数组排序" class="headerlink" title="14.4数组排序"></a>14.4数组排序</h4><ol><li><p>翻转数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure></li><li><p>数组排序（冒泡排序）(直接就内置对象实现了)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure><p>但是如果是双位数就不行了（如何解决？？）</p><p><strong>这里看弹幕使用了跟java有关的比较器？？</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>];</span><br><span class="line">arr1.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b;<span class="comment">//升序的顺序排列</span></span><br><span class="line">    <span class="keyword">return</span> b-a;<span class="comment">//降序的顺序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);</span><br></pre></td></tr></table></figure></li></ol><h4 id="14-5-数组索引方法"><a href="#14-5-数组索引方法" class="headerlink" title="14.5 数组索引方法"></a>14.5 数组索引方法</h4><p><strong>indexOf(数组元素)</strong> 作用就是返回该数组元素的索引号</p><p>只返回第一个满足条件的索引号</p><p>如果返回-1，就是没找到</p><p><strong>lastIndexOf(数组元素)</strong> 是从后往前查找</p><h4 id="14-6-数组转化为字符串"><a href="#14-6-数组转化为字符串" class="headerlink" title="14.6 数组转化为字符串"></a>14.6 数组转化为字符串</h4><ol><li>toString()</li><li>join(分隔符)</li></ol><h3 id="15-字符串对象"><a href="#15-字符串对象" class="headerlink" title="15.字符串对象"></a>15.字符串对象</h3><p>//复杂数据类型才有属性和方法</p><p>//简单数据类型为什么会有length属性呢？</p><p>//基本包装类型，就是把简单数据类型包装成为了复杂数据类型</p><ol><li>把简单数据类型包装为复杂数据类型</li><li>给临时变量的值</li><li>销毁这个临时变量</li></ol><p>这样基本数据类型就有了属性和方法</p><p><strong>字符串的不可变</strong></p><p>里面的值不可变，只是指向的地址发生了改变（开辟新的空间）</p><p> <strong>根据字符返回位置</strong></p><p>str.indexOf('要查找的字符'，起始位置)</p><p><strong>根据位置返回字符</strong></p><ol><li><p>charAt(index) 根据位置返回字符</p></li><li><p>charCodeAt(index)获取指定位置处字符的ASCII码（index索引号）</p><p>str.charCodeAt(0)</p></li><li><p>str[index] 获取指定位置处的字符 HTML5,IE8+支持 和charAt() 等效</p></li></ol><p><strong>字符串的操作方法</strong></p><ol><li>concat('字符串1'，'字符串2'，……)</li><li>substr(start,length) 从start位置开始(索引号),length  取的个数 重点</li><li>slice(start,end) 从start位置开始，截取到end 位置，end取不到（两个都是索引号）</li><li>substring(start,end) 从start位置开始，截取到end 位置，end取不到（两个都是索引号） 和slice基本相同但是不接受负值</li><li>替换字符 replace('被替换的字符','替换为的字符')，它只会替换第一个字符</li><li>字符转换为数组split('分隔符') 与join相反</li></ol><h3 id="16-总结：JS中的简单类型与复杂数据类型"><a href="#16-总结：JS中的简单类型与复杂数据类型" class="headerlink" title="16.总结：JS中的简单类型与复杂数据类型"></a>16.总结：JS中的简单类型与复杂数据类型</h3><h4 id="1-简单类型和复杂类型"><a href="#1-简单类型和复杂类型" class="headerlink" title="1. 简单类型和复杂类型"></a>1. 简单类型和复杂类型</h4><p>简单类型又叫做基本数据类型或者 <strong>值类型</strong> ，复杂类型又叫做<strong>引用类型</strong></p><p>五个简单数据类型</p><ul><li>string  number  boolean  undefined  null</li></ul><p>引用类型：</p><ul><li>复杂数据类型，在存储变量中存储的仅仅是地址（引用），因此叫做引用数据类型</li></ul><p>通过new 关键字创建的对象（系统对象，自定义对象），如Object,Array,Date等</p><p>//简单数据类型 null 返回的是一个空的对象 object</p><p>//如果有个变量我们以后打算存储为对象，暂时没想好放啥，这个时候就放null</p><h4 id="2-堆和栈"><a href="#2-堆和栈" class="headerlink" title="2.堆和栈"></a>2.堆和栈</h4><p>简单数据类型存放到栈里面,里面直接开辟一个空间存放的是值</p><p>复杂数据类型放到堆里面，栈里面存放地址，这个地址指向堆里面的数据</p><h4 id="3-简单类型传参"><a href="#3-简单类型传参" class="headerlink" title="3.简单类型传参"></a>3.简单类型传参</h4><p>……值</p><h4 id="4-复杂数据类型传参"><a href="#4-复杂数据类型传参" class="headerlink" title="4.复杂数据类型传参"></a>4.复杂数据类型传参</h4><p>地址……</p><h3 id="17-原型链相关"><a href="#17-原型链相关" class="headerlink" title="17. 原型链相关"></a>17. 原型链相关</h3><p>[(32条消息) 深入看看 __proto__到底是什么_前端苦行僧的博客-CSDN博客](</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（二）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS-第一天"><a href="#CSS-第一天" class="headerlink" title="CSS 第一天"></a>CSS 第一天</h2><h3 id="1-CSS-简介"><a href="#1-CSS-简介" class="headerlink" title="1.CSS 简介"></a>1.CSS 简介</h3><p>CSS的主要使用场景就是美化网页，布局页面的</p><h4 id="1-1-HTML-的局限性"><a href="#1-1-HTML-的局限性" class="headerlink" title="1.1 HTML 的局限性"></a>1.1 HTML 的局限性</h4><p>他只关注内容的语义， <strong>丑</strong> ！</p><h4 id="1-2-CSS-网页的美容师"><a href="#1-2-CSS-网页的美容师" class="headerlink" title="1.2 CSS-网页的美容师"></a>1.2 CSS-网页的美容师</h4><p>CSS 是 <strong>层叠样式表</strong> 的简称，也是一种标记语言</p><p><strong>其最大价值在于让HTML去做结构呈现，而把样式交给CSS，实现结构样式相分离</strong></p><h4 id="1-3-CSS-语法规范"><a href="#1-3-CSS-语法规范" class="headerlink" title="1.3 CSS 语法规范"></a>1.3 CSS 语法规范</h4><p>规则由两个主要部分组成： <strong>选择器</strong> <strong>一条或多条声明</strong></p><ul>    <li>选择器 用于指定CSS样式的HTML标签，花括号内是该对象设置的具体样式</li>       <li>属性和属性值以“键值对”的形式出现</li>    <li>属性是指定的对象设置的样式属性，例如字体大小，文本颜色等</li>     <li>属性和属性值之间用英文":"分开</li>     <li>多个"键值对"之间用英文";"进行区分</li></ul><h4 id="1-4-CSS-代码风格"><a href="#1-4-CSS-代码风格" class="headerlink" title="1.4 CSS 代码风格"></a>1.4 CSS 代码风格</h4><p>选用 <strong>展开格式</strong> 进行书写 注意空格保留和大小写</p><h3 id="2-CSS-基础选择器"><a href="#2-CSS-基础选择器" class="headerlink" title="2. CSS 基础选择器"></a>2. CSS 基础选择器</h3><h4 id="2-1-CSS选择器的作用"><a href="#2-1-CSS选择器的作用" class="headerlink" title="2.1 CSS选择器的作用"></a>2.1 CSS选择器的作用</h4><p>说白了，就是用来选择标签的</p><h4 id="2-2-选择器分类"><a href="#2-2-选择器分类" class="headerlink" title="2.2 选择器分类"></a>2.2 选择器分类</h4><p><strong>选择器</strong> 分为 <strong>基础选择器</strong> 和 <strong>复合选择器</strong> 两大类</p><ol><li>基础选择器是由 <strong>单个选择器</strong> 组成的</li><li>基础选择器又包括：<strong>标签选择器、类选择器、id选择器、通配符选择器</strong></li></ol><h4 id="2-3-标签选择器"><a href="#2-3-标签选择器" class="headerlink" title="2.3 标签选择器"></a>2.3 标签选择器</h4><p>是指用 HTML标签名称作为选择器，按标签名称分类，为页面中的某一类标签指定统一的CSS样式</p><h4 id="2-4-类选择器"><a href="#2-4-类选择器" class="headerlink" title="2.4 类选择器"></a>2.4 类选择器</h4><p>差异化选择不同的标签</p><p>语法：</p><p><code>.类名 &#123;</code></p><p><code>属性1：属性值1</code></p><p><code>...</code></p><p><code>&#125;</code></p><p>注意还有多类名的情况</p><p><strong>命名要规范！！！！</strong></p><h4 id="2-5-id选择器"><a href="#2-5-id选择器" class="headerlink" title="2.5 id选择器"></a>2.5 id选择器</h4><p>语法：</p><p><code>#id名 &#123;</code></p><p><code>属性1：属性值1</code></p><p><code>...</code></p><p><code>&#125;</code></p><p>与类选择器的区别在于，id选择器他只供“一个人“使用</p><h4 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h4><p>语法：</p><p> <code>*&#123;</code></p><p><code>属性1：属性值1</code></p><p><code>...</code></p><p><code>&#125;</code></p><p>自动给所有元素使用样式</p><h3 id="3-CSS字体属性"><a href="#3-CSS字体属性" class="headerlink" title="3. CSS字体属性"></a>3. CSS字体属性</h3><h4 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h4><p>CSS 使用 <code>font-family</code>属性定义文本的字体系列</p><p><code>p &#123;font-family: &quot;微软雅黑&quot;&#125;</code></p><p>各种字体使用用英文逗号隔开</p><h4 id="3-2字体大小"><a href="#3-2字体大小" class="headerlink" title="3.2字体大小"></a>3.2字体大小</h4><p>CSS 使用 <code>font-size</code>属性定义字体大小</p><p><code>p &#123;</code></p><p>​    <code>font-size:  20px;</code></p><p><code>&#125;</code></p><p>px(像素)大小是我们网页最常用的单位</p><p>可以给body指定整个页面的字体大小</p><h4 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h4><p>CSS 使用 <code>font-weight</code>属性定义粗细</p><p>语法：</p><p><code>p &#123;</code></p><p>​    <code>font-weight:  700;</code></p><p><code>&#125;</code></p><p>常用来说，700&#x3D;bold粗体，400&#x3D;normal正常</p><h4 id="3-4-文字样式"><a href="#3-4-文字样式" class="headerlink" title="3.4 文字样式"></a>3.4 文字样式</h4><p>CSS 使用 <code>font-style</code>属性定义文字样式</p><p>语法：</p><p><code>p &#123;</code></p><p>​    <code>font-style:  italic;</code></p><p><code>&#125;</code></p><table><th>属性值</th><th>作用</th>    <tr> <td>normal</td>  <td>默认值</td> </tr>      <tr> <td>italic</td>  <td>斜体</td> </tr></table><h4 id="3-5-字体复合属性"><a href="#3-5-字体复合属性" class="headerlink" title="3.5 字体复合属性"></a>3.5 字体复合属性</h4><p><code>body &#123;</code></p><p>​    <code>font: font-style font-weight font-size/line-height font-family;</code></p><p><code>&#125;</code></p><p>说实话，我记不住……</p><h3 id="4-CSS-文本属性"><a href="#4-CSS-文本属性" class="headerlink" title="4. CSS 文本属性"></a>4. CSS 文本属性</h3><h4 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h4><p>语法：</p><p><code>div &#123;</code></p><p><code>color: red;</code></p><p><code>&#125;</code></p><p>三种表示：预定义的颜色值，十六进制，RGB代码</p><h4 id="4-2-对齐文本"><a href="#4-2-对齐文本" class="headerlink" title="4.2 对齐文本"></a>4.2 对齐文本</h4><p><strong>text-align</strong> 属性用于设置元素内文本内容的水平对齐方式</p><p><code>div &#123;</code></p><p><code>text-align:center;</code></p><p><code>&#125;</code></p><p>可选择left,right,center三种属性值</p><h4 id="4-3-装饰文本"><a href="#4-3-装饰文本" class="headerlink" title="4.3 装饰文本"></a>4.3 装饰文本</h4><p><strong>text-decoration</strong> 属性用于设置元素内文本的外观</p><p><code>div &#123;</code></p><p><code>text-decoration:underline;</code></p><p><code>&#125;</code></p><p>属性值：none(默认), <strong>underline</strong>, overline, line-through</p><h4 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h4><p><strong>text-indent</strong> 属性用来指定文本的第一行的缩进</p><p>语法：</p><p><code>div &#123;</code></p><p><code>text-indent:2em;</code></p><p><code>&#125;</code></p><h4 id="4-5-行间距（行高）"><a href="#4-5-行间距（行高）" class="headerlink" title="4.5 行间距（行高）"></a>4.5 行间距（行高）</h4><p><strong>line-height</strong> 属性用于设置行间的距离（行高）</p><h3 id="5-CSS-的引入方式"><a href="#5-CSS-的引入方式" class="headerlink" title="5.CSS 的引入方式"></a>5.CSS 的引入方式</h3><h4 id="5-1-CSS的三种样式表"><a href="#5-1-CSS的三种样式表" class="headerlink" title="5.1 CSS的三种样式表"></a>5.1 CSS的三种样式表</h4><ol><li>行内样式表</li><li>内部样式表</li><li>外部样式表</li></ol><h4 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h4><p><code>&lt;style&gt;</code></p><p>​    <code>div &#123;</code></p><p><code>color: red;</code></p><p><code>font-size:12px;</code></p><p><code>&#125;</code></p><p><code>&lt;/style&gt;</code></p><p>一般将其放在文档的<head>标签中</p><h4 id="5-3-行内样式表"><a href="#5-3-行内样式表" class="headerlink" title="5.3 行内样式表"></a>5.3 行内样式表</h4><p>语法：</p><p><code>&lt;div style=&quot;color: red; font-szie: 12px;&quot;&gt;666&lt;/div&gt;</code></p><h4 id="5-4-外部样式表"><a href="#5-4-外部样式表" class="headerlink" title="5.4 外部样式表"></a>5.4 外部样式表</h4><p>样式单独写到CSS文件中，之后进行引入</p><p>使用<code>&lt;link&gt;</code>标签进行引入</p><p>语法：</p><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></p><h2 id="CSS-第二天"><a href="#CSS-第二天" class="headerlink" title="CSS 第二天"></a>CSS 第二天</h2><h3 id="1-Emmet-语法"><a href="#1-Emmet-语法" class="headerlink" title="1. Emmet 语法"></a>1. Emmet 语法</h3><h4 id="1-1-快速生成HTML结构语法"><a href="#1-1-快速生成HTML结构语法" class="headerlink" title="1.1 快速生成HTML结构语法"></a>1.1 快速生成HTML结构语法</h4><ol><li>生成标签直接输入标签名按 tab 键即可</li><li>如果想要生成多个相同标签 加上 * 就可以了</li><li>如果有父子级关系的标签，可以用 &gt;</li><li>如果有兄弟关系的标签，可以用 +</li><li>如果生成带有类名或者id名的，直接写.demo 或者 #two   tab键就可以了</li><li>如果生成的div 类名是有顺序的，可以用自增符号 $</li></ol><h4 id="1-2-快速生成-CSS-样式语法"><a href="#1-2-快速生成-CSS-样式语法" class="headerlink" title="1.2 快速生成 CSS 样式语法"></a>1.2 快速生成 CSS 样式语法</h4><p>CSS 基本采取简写形式即可</p><h4 id="1-3-快速格式化代码"><a href="#1-3-快速格式化代码" class="headerlink" title="1.3 快速格式化代码"></a>1.3 快速格式化代码</h4><p>VS Code 中：Shift + Alt + F</p><h3 id="2-CSS-的复合选择器"><a href="#2-CSS-的复合选择器" class="headerlink" title="2.CSS 的复合选择器"></a>2.CSS 的复合选择器</h3><h4 id="2-1-什么是复合选择器"><a href="#2-1-什么是复合选择器" class="headerlink" title="2.1 什么是复合选择器"></a>2.1 什么是复合选择器</h4><p>复合选择器是建立在基础选择器之上，对基本选择器进行组合形成的</p><h4 id="2-2-后代选择器"><a href="#2-2-后代选择器" class="headerlink" title="2.2 后代选择器"></a>2.2 后代选择器</h4><p>语法：</p><p><code>元素1 元素2 &#123; 样式声明 &#125;</code></p><p>其中 <strong>元素2</strong> 是 <strong>元素1</strong> 的后代</p><h4 id="2-3-子选择器"><a href="#2-3-子选择器" class="headerlink" title="2.3 子选择器"></a>2.3 子选择器</h4><p>与后代选择器相比，其只能选亲儿子</p><p>语法：</p><p><code>元素1&gt;元素2 &#123;样式声明&#125;</code></p><h4 id="2-4-并集选择器"><a href="#2-4-并集选择器" class="headerlink" title="2.4 并集选择器"></a>2.4 并集选择器</h4><p>语法：</p><p><code>元素1，元素2 &#123;样式声明&#125;</code></p><h4 id="2-5伪类选择器"><a href="#2-5伪类选择器" class="headerlink" title="2.5伪类选择器"></a>2.5伪类选择器</h4><p>最大特点是用冒号表示，比如：hover</p><h4 id="2-6-链接伪类选择器"><a href="#2-6-链接伪类选择器" class="headerlink" title="2.6 链接伪类选择器"></a>2.6 链接伪类选择器</h4><p>a: link &#x2F; visited &#x2F; hover &#x2F; active</p><p>顺序:<strong>LVHA</strong></p><h4 id="2-7-focus-伪类选择器"><a href="#2-7-focus-伪类选择器" class="headerlink" title="2.7 focus 伪类选择器"></a>2.7 focus 伪类选择器</h4><p>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取</p><p>​    <code>input:focus &#123;</code></p><p><code>background-color:yellow;</code></p><p><code>&#125;</code></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="3-CSS-的元素显示模式"><a href="#3-CSS-的元素显示模式" class="headerlink" title="3. CSS 的元素显示模式"></a>3. CSS 的元素显示模式</h3><h4 id="3-1-什么是元素显示模式"><a href="#3-1-什么是元素显示模式" class="headerlink" title="3.1 什么是元素显示模式"></a>3.1 什么是元素显示模式</h4><p>就是元素以什么方式进行显示，一般 HTML 元素氛围 <strong>块元素</strong> 和 <strong>行内元素</strong> 两种类型 </p><h4 id="3-2-块元素"><a href="#3-2-块元素" class="headerlink" title="3.2 块元素"></a>3.2 块元素</h4><figure class="highlight plaintext"><figcaption><span>等</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中```&lt;div&gt;```标签是**最典型的块元素**</span><br><span class="line"></span><br><span class="line">**特点：**</span><br><span class="line"></span><br><span class="line">1. 独占一行</span><br><span class="line">2. 高度，宽度，外边距，内边距都可以控制</span><br><span class="line">3. 宽度默认是容器（父级宽度）的100%</span><br><span class="line">4. 是一个容器及盒子，里面可以放行内或者块级元素</span><br><span class="line"></span><br><span class="line">**注意：**</span><br><span class="line"></span><br><span class="line">1. 文字类元素内不能使用块级元素</span><br><span class="line">2. ```&lt;p&gt;```标签主要用于存放文字，一次```&lt;p&gt;``` 里面不能放块级元素，特别是不能放```&lt;div&gt;```</span><br><span class="line">3. 同理，```&lt;h1&gt;-&lt;h6&gt;```等都是文字类块级标签，里面也不能放其他块级元素</span><br><span class="line"></span><br><span class="line">#### 3.3 行内元素</span><br><span class="line"></span><br><span class="line">常见的行内元素有```&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;``` 等，其中```&lt;span&gt;```标签是最典型的行内元素</span><br><span class="line"></span><br><span class="line">**特点：** </span><br><span class="line"></span><br><span class="line">1. 相邻行内元素在一行上，一行可以显示多个</span><br><span class="line">2. 高、宽直接设置是无效的</span><br><span class="line">3. 默认宽度就是它本身内容的宽度</span><br><span class="line">4. 行内元素只能容纳文本或其他行内元素</span><br><span class="line"></span><br><span class="line">**注意：**</span><br><span class="line"></span><br><span class="line">1. 链接里面不能再放链接</span><br><span class="line">2. 特殊情况链接```&lt;a&gt;```里面可以放块级元素，但是给```&lt;/a&gt;```转换一下块级模式更安全</span><br><span class="line"></span><br><span class="line">#### 3.4 行内块元素</span><br><span class="line"></span><br><span class="line">在行内元素中有几个特殊的标签——```&lt;img/&gt;、&lt;input/&gt;、&lt;td&gt;``` 它们同时具有块元素和行内元素的特点</span><br><span class="line"></span><br><span class="line">**特点：**</span><br><span class="line"></span><br><span class="line">1. 和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙，一行可以显示多个（行内元素特点）</span><br><span class="line">2. 默认宽度就是它本身内容的宽度（行内元素特点）</span><br><span class="line">3. 高度，行高，外边距以及内边距都可以控制（块级元素特点）</span><br><span class="line"></span><br><span class="line">#### 3.5 元素显示模式转换</span><br><span class="line"></span><br><span class="line">行转块：```display: block;```</span><br><span class="line"></span><br><span class="line">块转行：```display: inline;```</span><br><span class="line"></span><br><span class="line">转为行内块：```display:inline-block; ```</span><br><span class="line"></span><br><span class="line">#### 3.6 小技巧使单行文字垂直居中</span><br><span class="line"></span><br><span class="line">让文字的行高等于盒子的高度</span><br><span class="line"></span><br><span class="line">考虑上空隙 下空隙 盒子高度和行高的关系</span><br><span class="line"></span><br><span class="line">### 4. CSS 的背景</span><br><span class="line"></span><br><span class="line">#### 4.1 背景颜色</span><br><span class="line"></span><br><span class="line">```background-color:颜色值；```</span><br><span class="line"></span><br><span class="line">#### 4.2 背景图片</span><br><span class="line"></span><br><span class="line">```background-image:none|url();```</span><br><span class="line"></span><br><span class="line">#### 4.3 背景平铺</span><br><span class="line"></span><br><span class="line">```background-repeat：repeat|repeat-x|repeat-y|no-repeat;```</span><br><span class="line"></span><br><span class="line">页面元素既可以添加背景颜色也可以添加背景图片 只不过背景图片会压住背景颜色</span><br><span class="line"></span><br><span class="line">#### 4.4 背景图片位置</span><br><span class="line"></span><br><span class="line">```background-position:x y;```</span><br><span class="line"></span><br><span class="line">x 坐标和 y 坐标，可使用方位名词或精确单位</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;th&gt;参数值&lt;/th&gt;&lt;th&gt;说明&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt; &lt;th&gt;length&lt;/th&gt;  &lt;th&gt;百分数|由浮点数字和单位标识符组成的长度值&lt;/th&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;th&gt;position&lt;/th&gt;  &lt;th&gt;top|center|bottom|left|center|right&lt;/th&gt; &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">二者可以混合使用</span><br><span class="line"></span><br><span class="line">#### 4.5 背景图像固定（背景附着）</span><br><span class="line"></span><br><span class="line">设置背景图像是否固定或者随着页面的其余部分滚动</span><br><span class="line"></span><br><span class="line">后期可以制作时差滚动效果</span><br><span class="line"></span><br><span class="line">```background-attachment: scroll|fixed;```</span><br><span class="line"></span><br><span class="line">#### 4.6 背景复合写法</span><br><span class="line"></span><br><span class="line">```background: transport url(image.jpg) repeat-y fixed top```</span><br><span class="line"></span><br><span class="line">#### 4.7 背景色透明</span><br><span class="line"></span><br><span class="line">```background: rgba(0,0,0,0.3)```;</span><br><span class="line"></span><br><span class="line">1. 最后一个参数是alpha透明度，取值范围在0~1之间</span><br><span class="line">2. 我们习惯吧0.3的0省略掉，写为```background: rgba(0,0,0,.3);```</span><br><span class="line">3. 修改此内容并不影响盒子里面的内容</span><br><span class="line"></span><br><span class="line">## CSS 第三天</span><br><span class="line"></span><br><span class="line">### 1.CSS 的三大特性</span><br><span class="line"></span><br><span class="line">层叠性、继承性、优先级</span><br><span class="line"></span><br><span class="line">#### 1.1 层叠性</span><br><span class="line"></span><br><span class="line">相同选择器给设置一个相同的样式，此时一个样式就会 **覆盖** 另一个冲突的样式。层叠性主要解决样式冲突的问题</span><br><span class="line"></span><br><span class="line">**原则：**</span><br><span class="line"></span><br><span class="line">1. 样式冲突，遵循就近原则</span><br><span class="line">2. 样式不冲突，不会层叠</span><br><span class="line"></span><br><span class="line">#### 1.2 继承性</span><br><span class="line"></span><br><span class="line">简单来说，子辈会继承父辈的属性</span><br><span class="line"></span><br><span class="line">（text- , font- , line- 这些元素开头的可以继承，以及color属性） </span><br><span class="line"></span><br><span class="line">**行高的继承性**</span><br><span class="line"></span><br><span class="line">​```body &#123;```</span><br><span class="line"></span><br><span class="line">```font:12px/1.5 Microsotf Yahei;```</span><br><span class="line"></span><br><span class="line">```&#125;```</span><br><span class="line"></span><br><span class="line">1. 行高可以跟单位也可以不跟单位</span><br><span class="line">2. 如果子元素没有设置行高，则会继承父元素的行高为1.5</span><br><span class="line">3. 此时子元素的行高是：当前子元素的文字大小*1.5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.3 优先级</span><br><span class="line"></span><br><span class="line">当一个元素指定多个选择器，则会有优先级的产生</span><br><span class="line"></span><br><span class="line">1. 选择器相同，则执行层叠性</span><br><span class="line">2. 选择器不同，则根据 **选择器权重** 执行</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;选择器&lt;/th&gt;     &lt;th&gt;选择器权重&lt;/th&gt;  </span><br><span class="line">    &lt;tr&gt; &lt;td&gt;继承 或者 *&lt;/td&gt; &lt;td&gt;0,0,0,0&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;元素选择器&lt;/td&gt; &lt;td&gt;0,0,0,1&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt; &lt;td&gt;类选择器，伪类选择器&lt;/td&gt; &lt;td&gt;0,0,1,0&lt;/td&gt; &lt;/tr&gt;   </span><br><span class="line">    &lt;tr&gt; &lt;td&gt;ID选择器&lt;/td&gt; &lt;td&gt;0，1，0，0&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;行内样式style=&quot;&quot;&lt;/td&gt; &lt;td&gt;1,0，0，0&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;!important&lt;/td&gt; &lt;td&gt;无穷大&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**优先级的注意点：**</span><br><span class="line"></span><br><span class="line">1. 权重有4位数字组成，但不会有进位</span><br><span class="line">2. 继承的权重是0，如果该元素没有直接选中，不管父元素的权重多高，子元素得到的权重是0</span><br><span class="line">3. 注意权重的叠加</span><br><span class="line"></span><br><span class="line">## CSS 第四天（页面布局）</span><br><span class="line"></span><br><span class="line">页面布局的三大核心</span><br><span class="line"></span><br><span class="line">1. 盒子模型</span><br><span class="line">2. 浮动</span><br><span class="line">3. 定位</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 1.盒子模型</span><br><span class="line"></span><br><span class="line">#### 1.1看透网页布局的本质</span><br><span class="line"></span><br><span class="line">网页布局过程：</span><br><span class="line"></span><br><span class="line">1. 先准备好相关的网页元素，基本都 box</span><br><span class="line">2. 利用 CSS 设置好盒子样式，然后摆到相应位置</span><br><span class="line">3. 往盒子里面装内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.2 盒子模型组成</span><br><span class="line"></span><br><span class="line">就是把 HTML 页面中的布局元素看作是一个矩形盒子，也就是一个盛装内容的容器</span><br><span class="line"></span><br><span class="line">CSS盒子模型本质上是一个盒子，封装周围的HTML元素，它包括：边框（border），外边距(margin)，内边距(padding)和实际内容(content)</span><br><span class="line"></span><br><span class="line">#### 1.3 边框（border)</span><br><span class="line"></span><br><span class="line">```border: border-width || border-style || border-color```</span><br><span class="line"></span><br><span class="line">```border-style:solid(实线边框) | dashed |（虚线边框）dotted（点线边框）```</span><br><span class="line"></span><br><span class="line">边框的复合写法没有顺序</span><br><span class="line"></span><br><span class="line">边框可以设置单边（分开写法）：</span><br><span class="line"></span><br><span class="line">```border-top: 1px solid red;```</span><br><span class="line"></span><br><span class="line">上述写法只设定了上边框</span><br><span class="line"></span><br><span class="line">#### 1.4 表格的细线边框</span><br><span class="line"></span><br><span class="line">```border-collapse```属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```border-collapse:collapese;```</span><br><span class="line"></span><br><span class="line">1. colllapse表示合并</span><br><span class="line">2. ```border-collapse:collapse;``` 表示相邻边框合并在一起</span><br><span class="line"></span><br><span class="line">#### 1.5 边框会影响盒子实际大小</span><br><span class="line"></span><br><span class="line">边框会额外增加盒子的实际大小。因此我们有两种方案结局：</span><br><span class="line"></span><br><span class="line">1. 测量盒子大小的时候，不量边框</span><br><span class="line">2. 如果测量的时候包含了边框，则需要width/height减去边框宽度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.6 内边距</span><br><span class="line"></span><br><span class="line">**padding** 属性用于设置内边距，即边框与内容之间的距离</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;属性&lt;/th&gt;     &lt;th&gt;作用&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;padding-left&lt;/td&gt;  &lt;td&gt;左内边距&lt;/td&gt;   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;padding-right&lt;/td&gt;  &lt;td&gt;右内边距&lt;/td&gt;   &lt;/tr&gt;</span><br><span class="line">   &lt;tr&gt; &lt;td&gt;padding-top&lt;/td&gt;  &lt;td&gt;上内边距&lt;/td&gt;   &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;padding-bottom&lt;/td&gt;  &lt;td&gt;下内边距&lt;/td&gt;   &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;值的个数&lt;/th&gt; &lt;th&gt;表达意思&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;1&lt;/td&gt;  &lt;td&gt;上下左右一样&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;先上下 再左右&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;3&lt;/td&gt;  &lt;td&gt;上 左右 下&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;4&lt;/td&gt;  &lt;td&gt;上 右 下 左&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">指定 ```padding``` 值后，发生了两件事情：</span><br><span class="line"></span><br><span class="line">1. 内容和边框有了距离，添加了内边距</span><br><span class="line">2. padding影响了盒子实际大小</span><br><span class="line"></span><br><span class="line">也就是说，如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子</span><br><span class="line"></span><br><span class="line">**解决方案：**</span><br><span class="line"></span><br><span class="line">如果保证盒子跟效果图大小保持一致，则让 **width/height减去多出来的内边距大小** 即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果盒子本身没有指定 width/height 属性大小，则此时padding不会撑开盒子大小</span><br><span class="line"></span><br><span class="line">#### 1.7 外边距</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">&lt;th&gt;属性&lt;/th&gt;&lt;th&gt;作用&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;margin-left&lt;/td&gt;  &lt;td&gt;左外边距&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">     &lt;tr&gt; &lt;td&gt;margin-right&lt;/td&gt;  &lt;td&gt;右外边距&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">     &lt;tr&gt; &lt;td&gt;margin-top&lt;/td&gt;  &lt;td&gt;上外边距&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">     &lt;tr&gt; &lt;td&gt;margin-bottom&lt;/td&gt;  &lt;td&gt;下外边距&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**外边距典型应用**：</span><br><span class="line"></span><br><span class="line">外边距可以让块级盒子水平居中，但必须满足两个条件：</span><br><span class="line"></span><br><span class="line">1. 盒子必须指定了宽度</span><br><span class="line">2. 盒子左右的外边距都设置成auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**注意：**</span><br><span class="line"></span><br><span class="line">行内元素或者行内块元素水平居中给其父元素添加text-align:center即可</span><br><span class="line"></span><br><span class="line">#### 1.8 外边距合并</span><br><span class="line"></span><br><span class="line">使用 **margin** 定义块元素的 **垂直外边距** 时，可能会出现外边距的合并</span><br><span class="line"></span><br><span class="line">**1. 相邻块元素垂直外边界的合并**</span><br><span class="line"></span><br><span class="line">两者实际相邻垂直外边距取上面元素的下外边距和下面元素的上外边距的最大值</span><br><span class="line"></span><br><span class="line">**解决方案：**尽量只给一个盒子添加margin值</span><br><span class="line"></span><br><span class="line"> **2. 嵌套块元素垂直外边距的塌陷**</span><br><span class="line"></span><br><span class="line">对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**解决方案**：</span><br><span class="line"></span><br><span class="line">1. 可以为父元素定义上边框</span><br><span class="line">2. 可以为父元素定义上内边距</span><br><span class="line">3. 可以为父元素添加overflow:hidden</span><br><span class="line"></span><br><span class="line">#### 1.9 清除内外边距</span><br><span class="line"></span><br><span class="line">网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局之前，首先要清除下网页元素的内外边距。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```* &#123;```</span><br><span class="line"></span><br><span class="line">```padding:0```;</span><br><span class="line"></span><br><span class="line">```margin:0;```</span><br><span class="line"></span><br><span class="line">```&#125;```</span><br><span class="line"></span><br><span class="line">**注意：** 行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距（因为可能根本不起作用）。但是转为块级或者行内块元素就可以了</span><br><span class="line"></span><br><span class="line">### 2.圆角边框</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```border-radius:length;```</span><br><span class="line"></span><br><span class="line">**radius半径（圆的半径）原理**：（椭）圆与边框的交集形成圆角效果</span><br><span class="line"></span><br><span class="line">- 参数值可以为 **数值** 或者 **百分比** 的形式</span><br><span class="line">- 如果是正方形，想要设置一个圆，把数值修改为高度或者宽度的一半即可，或者直接写50%</span><br><span class="line">- 如果是个矩形，设置为高度的一半就可以做比较好看的图标</span><br><span class="line">- 该属性是一个简写属性，可以跟四个值，分别代表左上角，右上角，左下角，右下角</span><br><span class="line"></span><br><span class="line">### 3.盒子阴影</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```box-shadow:值;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">| 值       | 描述                                 |</span><br><span class="line">| :------- | ------------------------------------ |</span><br><span class="line">| h-shadow | 必须，水平阴影的位置，允许负值       |</span><br><span class="line">| v-shadow | 必须，垂直阴影的位置，允许负值       |</span><br><span class="line">| blur     | 可选，模糊距离                       |</span><br><span class="line">| spread   | 可选，阴影的尺寸                     |</span><br><span class="line">| color    | 可选，阴影的颜色                     |</span><br><span class="line">| inset    | 可选，将外部阴影(outser)改为内部阴影 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4.文字阴影</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```text-shadow:h-shadow v-shadow blur color;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## CSS 浮动</span><br><span class="line"></span><br><span class="line">### 1. 浮动</span><br><span class="line"></span><br><span class="line">#### 1.1 传统网页布局的三种方式</span><br><span class="line"></span><br><span class="line">- 普通流（标准流）</span><br><span class="line">- 浮动</span><br><span class="line">- 定位</span><br><span class="line"></span><br><span class="line">#### 1.2 普通流</span><br><span class="line"></span><br><span class="line">就是标签按照规定好默认方式排列</span><br><span class="line"></span><br><span class="line">1. 块内元素会独占一行，从上向下顺序排列</span><br><span class="line"></span><br><span class="line">常用元素：div , hr , p , h1-h6 , ul , ol , dl , form , table</span><br><span class="line"></span><br><span class="line">2. 行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行</span><br><span class="line"></span><br><span class="line">常用元素：span , a, i , em等</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**标准流是最基本的布局方式**</span><br><span class="line"></span><br><span class="line">#### 1.3 为什么需要浮动</span><br><span class="line"></span><br><span class="line">有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局，因为浮动可以改变元素标签默认的排列方式</span><br><span class="line"></span><br><span class="line">浮动最典型的应用：可以让多个块级元素一行内排列显示</span><br><span class="line"></span><br><span class="line">网页布局第一准则：**多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动**</span><br><span class="line"></span><br><span class="line">#### 1.4 什么是浮动</span><br><span class="line"></span><br><span class="line">**float** 属性用于创建浮动框，将其移动到一边，直到左边缘或者右边缘触及包含块或另一个浮动框的边缘</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```选择器 &#123; float: 属性值；&#125;```</span><br><span class="line"></span><br><span class="line">| 属性值 | 描述                 |</span><br><span class="line">| ------ | -------------------- |</span><br><span class="line">| none   | 元素不浮动（默认值） |</span><br><span class="line">| left   | 元素向左浮动         |</span><br><span class="line">| right  | 元素向右浮动         |</span><br><span class="line"></span><br><span class="line">#### 1.5 浮动特性（重难点）</span><br><span class="line"></span><br><span class="line">特性一：</span><br><span class="line"></span><br><span class="line">1. 脱离标准普通流的控制（浮）移动到指定位置（动），（俗称脱标）</span><br><span class="line">2. 浮动的盒子**不再保留原先的位置**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特性二：</span><br><span class="line"></span><br><span class="line">如果多个盒子都设置了浮动，则它们会按照属性值 **一行内显示并且顶端对其排列**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">特性三：</span><br><span class="line"></span><br><span class="line">浮动元素具有行内块特性。**任何元素都可以浮动**。不管原先是什么模式的元素，添加浮动之后具有 **行内块元素** 相似的特性</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.6 浮动元素经常和标准流父级元素搭配使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">为了约束浮动元素位置，我们网页布局一般采取的策略是：</span><br><span class="line"></span><br><span class="line"> **先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置，复合网页布局第一准则**</span><br><span class="line"></span><br><span class="line">### 2. 常见网页布局</span><br><span class="line"></span><br><span class="line">#### 2.1 常见网页布局</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">![常见网页布局.png](https://i.loli.net/2021/04/15/RI7nm3TZXgFedsJ.png)</span><br><span class="line"></span><br><span class="line">![常见网页布局2.png](https://i.loli.net/2021/04/15/UPvfK2JIS5t3uFQ.png)</span><br><span class="line"></span><br><span class="line">#### 2.2 浮动布局注意点</span><br><span class="line"></span><br><span class="line">1. 浮动和标准流的父盒子搭配</span><br><span class="line"></span><br><span class="line">**先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置**</span><br><span class="line"></span><br><span class="line">2. 一个元素浮动了。理论上其余的兄弟元素也要浮动</span><br><span class="line"></span><br><span class="line">一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</span><br><span class="line"></span><br><span class="line">**浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流**</span><br><span class="line"></span><br><span class="line">理想中的状态，让子孩子撑开父亲，孩子有多少，父亲有多高</span><br><span class="line"></span><br><span class="line">### 3. 清除浮动</span><br><span class="line"></span><br><span class="line">#### 3.1 为什么清除浮动</span><br><span class="line"></span><br><span class="line">因为父级盒子很多情况下，不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为零0，就会影响下面使用的标准流盒子</span><br><span class="line"></span><br><span class="line">#### 3.2 清除浮动本质</span><br><span class="line"></span><br><span class="line">就是清除浮动造成的影响</span><br><span class="line"></span><br><span class="line">如果父盒子本身有高度，就不需要清除浮动</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```选择器&#123;clear: 属性值&#125;```</span><br><span class="line"></span><br><span class="line">| 属性值 | 描述                       |</span><br><span class="line">| ------ | -------------------------- |</span><br><span class="line">| left   | 不允许左侧有浮动元素       |</span><br><span class="line">| right  | 不允许右侧有浮动元素       |</span><br><span class="line">| both   | 同时清除左右两侧浮动的影响 |</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们实际工作中，几乎只用 **clear:both**</span><br><span class="line"></span><br><span class="line">清除浮动的策略是：闭合浮动</span><br><span class="line"></span><br><span class="line">#### 3.3 清除浮动方法</span><br><span class="line"></span><br><span class="line">1. 额外标签法 也称为隔墙法，是 W3C 推荐的做法</span><br><span class="line">2. 父级添加overflow属性</span><br><span class="line">3. 父级添加after伪元素</span><br><span class="line">4. 父级添加双伪元素</span><br><span class="line"></span><br><span class="line">**1.额外标签法**：再加一个盒子</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line"></span><br><span class="line">```&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;```</span><br><span class="line"></span><br><span class="line">优点：通俗易懂，书写方便</span><br><span class="line"></span><br><span class="line">缺点：添加许多无意义的标签，结构化较差</span><br><span class="line"></span><br><span class="line">**2.父级添加overflow**</span><br><span class="line"></span><br><span class="line">```overflow:hidden```</span><br><span class="line"></span><br><span class="line">可设置属性值为hidden,auto或scroll</span><br><span class="line"></span><br><span class="line">优点：代码简洁</span><br><span class="line"></span><br><span class="line">缺点：无法显示溢出部分</span><br><span class="line"></span><br><span class="line">**3.after伪元素法**</span><br><span class="line"></span><br><span class="line">![after伪元素.png](https://i.loli.net/2021/04/15/BsKH4W6A5mL2cPq.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">优点：没有增加额外标签，结构更简单</span><br><span class="line"></span><br><span class="line">缺点：照顾低版本浏览器</span><br><span class="line"></span><br><span class="line">**4. 清除浮动之双伪元素**</span><br><span class="line"></span><br><span class="line">![双伪元素.png](https://i.loli.net/2021/04/15/njI59Zwy36sQCUl.png)</span><br><span class="line"></span><br><span class="line">优点：代码更简洁</span><br><span class="line"></span><br><span class="line">缺点：照顾低版本浏览器</span><br><span class="line"></span><br><span class="line">### 4. PS 切图</span><br><span class="line"></span><br><span class="line">#### 4.1 常见的图片格式</span><br><span class="line"></span><br><span class="line">![常见图片格式.png](https://i.loli.net/2021/04/15/KCAh1N6y73eU4RE.png)</span><br><span class="line"></span><br><span class="line">### 5. 页面布局整体思路</span><br><span class="line"></span><br><span class="line">![页面布局.png](https://i.loli.net/2021/04/15/FoLfyCqOT76xZDK.png)</span><br><span class="line"></span><br><span class="line">## CSS 定位</span><br><span class="line"></span><br><span class="line">### 1. 定位</span><br><span class="line"></span><br><span class="line">#### 1.1 为什么需要定位</span><br><span class="line"></span><br><span class="line">![为什么需要定位.png](https://i.loli.net/2021/04/15/8f3v2DwnbSIlVsZ.png)</span><br><span class="line"></span><br><span class="line">#### 1.2 定位组成</span><br><span class="line"></span><br><span class="line">![定位组成.png](https://i.loli.net/2021/04/15/8jnVQzkOau5K13f.png)</span><br><span class="line"></span><br><span class="line">1. 定位模式</span><br><span class="line"></span><br><span class="line">定位模式决定元素的定位方式，它通过 CSS 的 **position** 属性来设置，其可以分为四个：</span><br><span class="line"></span><br><span class="line">| 值       | 语义     |</span><br><span class="line">| -------- | -------- |</span><br><span class="line">| static   | 静态定位 |</span><br><span class="line">| relative | 相对定位 |</span><br><span class="line">| absolute | 绝对定位 |</span><br><span class="line">| fixed    | 固定定位 |</span><br><span class="line"></span><br><span class="line">2. 边偏移</span><br><span class="line"></span><br><span class="line">边偏移就是定位的盒子移动到的最终位置。有top、 bottom、 left和right4个属性</span><br><span class="line"></span><br><span class="line">| 边偏移属性 | 示例         | 描述                                         |</span><br><span class="line">| ---------- | ------------ | -------------------------------------------- |</span><br><span class="line">| top        | top: 80px    | 顶端偏移量，定义元素相对于其父亲上边线的距离 |</span><br><span class="line">| bottom     | bottom: 80px | 底部偏移量，定义元素相对于其父亲下边线的距离 |</span><br><span class="line">| left       | left:80px    | 左侧偏移量，定义元素相对于其父亲左边线的距离 |</span><br><span class="line">| right      | right:80px   | 右侧偏移量，定义元素相对于其父亲右边线的距离 |</span><br><span class="line"></span><br><span class="line">#### 1.3 静态定位 static（了解）</span><br><span class="line"></span><br><span class="line">就是无定位的意思</span><br><span class="line"></span><br><span class="line">```选择器 &#123;positon: static;&#125;```</span><br><span class="line"></span><br><span class="line">很少用到</span><br><span class="line"></span><br><span class="line">#### 1.4 相对定位 relative （重要）</span><br><span class="line"></span><br><span class="line">```选择器 &#123;positon: relative;&#125;```</span><br><span class="line"></span><br><span class="line">![相对定位.png](https://i.loli.net/2021/04/15/QowdBuY29RrVjS5.png)</span><br><span class="line"></span><br><span class="line">典型的应用是给绝对定位当爹的</span><br><span class="line"></span><br><span class="line">#### 1.5 绝对定位 absolute（重要）</span><br><span class="line"></span><br><span class="line">移动位置时，是相对于它的 **祖先元素** 来说的</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```选择器 &#123; position: absolute;&#125;```</span><br><span class="line"></span><br><span class="line">绝对定位的特点：</span><br><span class="line"></span><br><span class="line">1. 如果 **没有祖先元素** 或者 **祖先元素没有定位** ，则以浏览器为准定位（Document文档）</span><br><span class="line">2. 如果祖先元素有定位（相对，绝对，固定定位），则以最近一级的 **定位祖先元素** 为参考点移动位置</span><br><span class="line"></span><br><span class="line">3. 绝对定位不再占有原先位置（脱标）（飘得比浮动还高）（人死了，钱也没了）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.6 子绝父相</span><br><span class="line"></span><br><span class="line">**子级是绝对定位的话，父级要用相对定位**</span><br><span class="line"></span><br><span class="line">1. 子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子</span><br><span class="line">2. 父盒子需要加定位限制子盒子在父盒子内显示</span><br><span class="line">3. 父盒子布局时，需要占有位置，因此父亲只能是相对定位</span><br><span class="line"></span><br><span class="line">Absolution：元素会脱离文档流，定位是相对于离它最近的且不是static定位的父元素而言，若该元素没有设置宽度，则宽度由元素里面的内容决定，且宽度不会影响父元素，定位为absolution后，原来的位置相当于是空的，下面的的元素会来占据。</span><br><span class="line"></span><br><span class="line">Relative：元素仍处于文档流中，定位是相对于原本自身的位置，若没有设置宽度，则宽度为父元素的宽度，该元素的大小会影响父元素的大小。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.7 固定定位 fixed（重要）</span><br><span class="line"></span><br><span class="line">**固定定位** 是元素固定于浏览器可视区的位置。主要使用场景：可以在浏览器页面滚动时元素的位置不会改变</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```选择器 &#123; position: fixed;&#125;```</span><br><span class="line"></span><br><span class="line">固定定位的特点：</span><br><span class="line"></span><br><span class="line">1. 以浏览器的可视窗口为参照点移动元素</span><br><span class="line">   - 跟父元素没有任何关系</span><br><span class="line">   - 不随滚动条滚动</span><br><span class="line">2. 固定定位不占有原来位置（脱标），可看做特殊的绝对定位</span><br><span class="line"></span><br><span class="line">**固定定位小技巧：固定在版心右侧位置**</span><br><span class="line"></span><br><span class="line">小算法：</span><br><span class="line"></span><br><span class="line">1. 让固定定位的盒子 left: 50%，走到浏览器可视区（也可以看做版心）的一半位置</span><br><span class="line">2. 让固定定位的盒子 margin-left:版心宽度一半距离。多走版心宽度的一半位置</span><br><span class="line"></span><br><span class="line">#### 1.8 粘性定位sticky(了解)</span><br><span class="line"></span><br><span class="line">粘性定位可以被认为是相对定位和固定定位的混合。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```选择器 &#123; position: sticky;top:10px;&#125;```</span><br><span class="line"></span><br><span class="line">**粘性定位的特点：**</span><br><span class="line"></span><br><span class="line">1. 以浏览器的可视窗口为参照点移动元素（固定定位特点）</span><br><span class="line">2. 粘性定位占有原先的位置（相对定位特点）</span><br><span class="line">3. 必须添加top、left、right、bottom其中一个才有效</span><br><span class="line"></span><br><span class="line">#### 1.9 定位叠放顺序 z-index</span><br><span class="line"></span><br><span class="line">使用 **z-index** 控制盒子的前后次序（z轴）</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```选择器 &#123; z-index: 1;&#125;```</span><br><span class="line"></span><br><span class="line">- 数值可以是正整数，负整数或零，默认是auto，数值越大，盒子越靠上</span><br><span class="line">- 如果属性值相同，则按照书写顺序，后来居上</span><br><span class="line">- 数字后面不能加单位</span><br><span class="line">- 只有定位的盒子才有z-index属性</span><br><span class="line"></span><br><span class="line">### 2. 定位的拓展</span><br><span class="line"></span><br><span class="line"> 加了绝对定位的盒子不能通过 **margin:()auto** 水平居中，但是可以通过以下计算方法实现水平和垂直居中。</span><br><span class="line"></span><br><span class="line">1. left 50%:让盒子的左侧移动到父级元素的水平中心位置</span><br><span class="line">2. margin-left:-100px; 让盒子向左移动自身宽度的一半</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**定位的特殊属性**</span><br><span class="line"></span><br><span class="line">绝对定位和固定定位也和浮动类似。</span><br><span class="line"></span><br><span class="line">1. 行内元素添加绝对或者固定定位，可以直接设置高度和宽度</span><br><span class="line">2. 块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小</span><br><span class="line"></span><br><span class="line">**脱标的盒子不会触发外边距塌陷**</span><br><span class="line"></span><br><span class="line">浮动元素、绝对定位（固定定位）元素都不会触发外边距合并的问题</span><br><span class="line"></span><br><span class="line">**注意有设定[float](https://developer.mozilla.org/zh-CN/docs/Web/CSS/float)和[position=absolute](https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#absolute)的元素不会产生外边距重叠行为。**</span><br><span class="line"></span><br><span class="line">**绝对定位（固定定位）会完全压住盒子**</span><br><span class="line"></span><br><span class="line">浮动元素不会压住下面标准流的文字（图片），只会压住它下面标准流的盒子</span><br><span class="line"></span><br><span class="line">但是绝对定位（固定定位）会压住下面标准流的所有内容</span><br><span class="line"></span><br><span class="line">浮动之所以不会压住文字，是因为浮动产生的初衷就是为了让 文字能够环绕图片</span><br><span class="line"></span><br><span class="line">### 3. 网页布局总结</span><br><span class="line"></span><br><span class="line">1. 标准流</span><br><span class="line"></span><br><span class="line">可以让盒子上下排列或者左右排列，**垂直的块级盒子**显示就用标准流布局</span><br><span class="line"></span><br><span class="line">2. 浮动</span><br><span class="line"></span><br><span class="line">可以让多个块级元素一行显示或者左右对齐盒子，多个块级盒子水平显示就用浮动布局</span><br><span class="line"></span><br><span class="line">3. 定位</span><br><span class="line"></span><br><span class="line">定位最大的特点就是有层叠的概念，就是可以让多个盒子前后叠压来显示。如果元素自由在某个盒子内移动就用定位布局</span><br><span class="line"></span><br><span class="line">### 4. 元素的显示与隐藏</span><br><span class="line"></span><br><span class="line">本质： **让一个元素在页面中隐藏或者显示出来**</span><br><span class="line"></span><br><span class="line">#### 4.1 display属性</span><br><span class="line"></span><br><span class="line">- display:none ； 隐藏对象</span><br><span class="line">- display:block ; 除了转换为块级元素之外，同时还有显示元素的意思</span><br><span class="line"></span><br><span class="line">**display** 隐藏元素后，不再占有原来的位置</span><br><span class="line"></span><br><span class="line">后面应用及其广泛，搭配JS可以做很多的网页特效</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4.2 visibility 可见性</span><br><span class="line"></span><br><span class="line">用于指定一个元素是可见还是隐藏</span><br><span class="line"></span><br><span class="line">- visibility:visible ; 元素可视</span><br><span class="line">- visibility:hidden ; 元素隐藏</span><br><span class="line"></span><br><span class="line">**visibility 隐藏元素后，继续占有原来的位置**</span><br><span class="line"></span><br><span class="line">如果隐藏元素想要原来位置，就用visibility:hidden</span><br><span class="line"></span><br><span class="line">如果隐藏元素不想要原来位置，就用display：none（用处更多 重点）</span><br><span class="line"></span><br><span class="line">#### 4.3 overflow 溢出</span><br><span class="line"></span><br><span class="line">- overflow: visible;</span><br><span class="line">- overflow: hidden;</span><br><span class="line">- overflow:scroll;  溢出的部分显示滚动条，不溢出也显示滚动条</span><br><span class="line">- overflow:auto; 溢出的时候才显示滚动条，不溢出的时候不显示滚动条</span><br><span class="line"></span><br><span class="line">## CSS 高级技巧</span><br><span class="line"></span><br><span class="line">### 1. 精灵图</span><br><span class="line"></span><br><span class="line">#### 1.1 为什么需要精灵图</span><br><span class="line"></span><br><span class="line">一个网页中往往应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">因此，**为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度**，**出现了CSS精灵技术** （也称 CSS Sprites、CSS 雪碧）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**核心原理：将小图片整合到一张大图片中，因此只需要请求一次就可以了**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.2 精灵图(spirites)的使用</span><br><span class="line"></span><br><span class="line">使用精灵图核心：</span><br><span class="line"></span><br><span class="line">1. 精灵技术主要针对于背景图片使用。就是把多个小背景图片整合到一张大图片中</span><br><span class="line">2. 这个大图片也称为spirites精灵图或者雪碧图</span><br><span class="line">3. 移动背景图片位置，此时可以使用 **background-position**</span><br><span class="line">4. 移动的距离就是这个目标图片的 **x** 和 **y** 坐标。注意网页中的坐标有所不同（x轴右边走是正，左边走是负）</span><br><span class="line">5. 因为一般情况下都是往上往左移动，所以数值是负值</span><br><span class="line">6. 使用精灵图的时候需要精准测量，每个小背景图片的大小和位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2. 字体图标</span><br><span class="line"></span><br><span class="line">#### 2.1 字体图标的产生</span><br><span class="line"></span><br><span class="line">字体图标使用场景：主要用于显示网页中通用、常见的一些小图标</span><br><span class="line"></span><br><span class="line">精灵图的缺点：</span><br><span class="line"></span><br><span class="line">1. 图片文件还是比较大的</span><br><span class="line">2. 图片本身方法和缩小会失真</span><br><span class="line">3. 一旦图片制作完成想要更换非常复杂</span><br><span class="line"></span><br><span class="line">此时，便产生了 **字体图标iconfont**</span><br><span class="line"></span><br><span class="line">**展示的图标，本质属于字体**</span><br><span class="line"></span><br><span class="line">#### 2.2 字体图标的优点</span><br><span class="line"></span><br><span class="line">- 轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求</span><br><span class="line">- 灵活性：本质是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等</span><br><span class="line">- 兼容性： 几乎支持所有的浏览器，请放心使用</span><br><span class="line"></span><br><span class="line">注意：字体图标不能替代精灵技术，只是对工作中图标部分技术的提升和优化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**总结：**</span><br><span class="line"></span><br><span class="line">1. 如果遇到一些结构和样式比较简单的小图标，就用字体图标</span><br><span class="line">2. 如果遇到一些结构和样式比较复杂的小图片，就用精灵图</span><br><span class="line"></span><br><span class="line">#### 2.3 字体图标下载</span><br><span class="line"></span><br><span class="line">**Icomoon字库**</span><br><span class="line"></span><br><span class="line">**阿里iconfont 字库**</span><br><span class="line"></span><br><span class="line">#### 2.4 字体图标的引入</span><br><span class="line"></span><br><span class="line">1. 把下载包里的 **fonts** 文件夹翻入页面根目录下</span><br><span class="line">2. 在 CSS 样式中 全局声明字体：简单理解就是把这些字体文件通过 CSS 引入到我们页面中</span><br><span class="line"></span><br><span class="line">一定注意字体文件路径问题</span><br><span class="line"></span><br><span class="line">#### 2.5 字体图标的追加</span><br><span class="line"></span><br><span class="line">把压缩包里面的 **selection.json重新上传**，然后选中自己想要新的图标，重新下载压缩包，并替换原来的文件即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3. CSS 三角</span><br><span class="line"></span><br><span class="line">![CSS三角形制作.png](https://i.loli.net/2021/04/18/wVZKDu6bQRABeUj.png)</span><br><span class="line"></span><br><span class="line">### 4. CSS 用户界面样式</span><br><span class="line"></span><br><span class="line">#### 4.1 鼠标样式 cursor</span><br><span class="line"></span><br><span class="line">```li &#123; cursor : pointer; &#125;```</span><br><span class="line"></span><br><span class="line">| 属性值      | 描述      |</span><br><span class="line">| ----------- | --------- |</span><br><span class="line">| default     | 小白 默认 |</span><br><span class="line">| pointer     | 小手      |</span><br><span class="line">| move        | 移动      |</span><br><span class="line">| text        | 文本      |</span><br><span class="line">| not-allowed | 禁止      |</span><br><span class="line"></span><br><span class="line">#### 4.2 轮廓线 outline</span><br><span class="line"></span><br><span class="line">```input &#123;outline: none ;&#125;```</span><br><span class="line"></span><br><span class="line">#### 4.3 防止拖拽文本域</span><br><span class="line"></span><br><span class="line">```resize: none;```</span><br><span class="line"></span><br><span class="line">### 5. vertical-align 属性应用</span><br><span class="line"></span><br><span class="line">#### 5.1 图片、表单和文字对齐</span><br><span class="line"></span><br><span class="line">CSS的 **vertical-align** 属性使用场景：经常用于设置图片或者表单（行内块元素）和文字垂直对齐</span><br><span class="line"></span><br><span class="line">官方解释：用于设置一个元素的 **垂直对齐方式**，但是它只针对与**行内元素**和**行内块元素**有效</span><br><span class="line"></span><br><span class="line">```vertical-align:bottom|top|middle```</span><br><span class="line"></span><br><span class="line">底线 顶线 中线（默认基线对齐）</span><br><span class="line"></span><br><span class="line">eg.</span><br><span class="line"></span><br><span class="line">```HTML</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">img&#123;</span><br><span class="line">vertical-align:bottom</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">   &lt;img src=&quot;&quot; alt=&quot;&quot;&gt;lzrj </span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时该图片与文字底部对齐</p><p>注意有时候会出现一个小bug，就是比如说，在建立一个小盒子之后，在这个小盒子里面放上图片，然后图片后加上文字（基线对齐），我们给盒子加上边框。按常理来说，这个div的大小是图片的大小（图片多大它撑得有多大），但是由于后面加了文字，默认基线对齐，这个盒子的边框在下部会有白色空隙 </p><p>解决方法就是：1.不要是基线对齐即可2.把图片改成  <strong>块级元素</strong> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:blcok;</span><br></pre></td></tr></table></figure><p>推荐第一种</p><h3 id="6-让溢出的文字用省略号显示"><a href="#6-让溢出的文字用省略号显示" class="headerlink" title="6.让溢出的文字用省略号显示"></a>6.让溢出的文字用省略号显示</h3><p>1.单行文本溢出显示省略号</p><p><strong>必须满足三个条件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/*1.先强制一行内显示文本*/</span><br><span class="line">white-space:nowrap;(默认 normal自动换行)</span><br><span class="line">/*2.超出的部分隐藏*/</span><br><span class="line">overflow:hidden;</span><br><span class="line">/*3.文字用省略号替代超出的部分*/</span><br><span class="line">text-overflow:ellipsis;</span><br></pre></td></tr></table></figure><p>2.多行文本溢出显示省略号</p><p>多行文本溢出显示省略号，有较大兼容性问题，适合于webkit浏览器或移动端（移动端大部分是webkit内核）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">/*弹性伸缩盒子模型显示*/</span><br><span class="line">display:-webkit-box;</span><br><span class="line">/*限制在一个块元素显示的文本的行数*/</span><br><span class="line">-webkit-line-clamp:2;（此处是第二行显示省略号）</span><br><span class="line">/*设置或检索伸缩盒对象的子元素的排列方式*/</span><br><span class="line">-webkit-box-orient:vertical;</span><br></pre></td></tr></table></figure><h3 id="7-常见布局技巧"><a href="#7-常见布局技巧" class="headerlink" title="7.常见布局技巧"></a>7.常见布局技巧</h3><p>1.margin负值的应用</p><ol><li>让每个盒子margin往左侧移动 -1px 正好压住相邻盒子边框</li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可（如果没有定位，则加相对定位，如果有定位，则加z-index）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>:none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>:-<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">    &#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.文字围绕浮动元素</p><p><strong>利用浮动不会压住文字</strong></p><p>大盒子里标准流文字，然后加一个左浮动的盒子，文字就在左侧盒子的右侧显示</p><p>3.行内块的巧妙运用</p><p>父级元素里设置 <strong>text-align:center</strong> 和 调整 <strong>line-height</strong> 使其中的行内元素和行内块元素水平垂直居中</p><p>4.CSS三角强化</p><p>下代码会出现一个矩形内置四个等腰直角三角形</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">width:0;</span><br><span class="line">height:0;</span><br><span class="line">border-top:50px solid pink;</span><br><span class="line">border-right:50px solid blue;</span><br><span class="line">border-bottom:50px solid skyblue;</span><br><span class="line">border-bottom:50px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.box1 &#123;</span><br><span class="line">width:0;</span><br><span class="line">height:0;</span><br><span class="line">border-top:100px solid transparent;</span><br><span class="line">border-right:50px solid blue;</span><br><span class="line">border-bottom:0px solid skyblue;</span><br><span class="line">border-bottom:0px solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码会出现一个蓝色的直角三角形</p><h3 id="8-CSS初始化"><a href="#8-CSS初始化" class="headerlink" title="8.CSS初始化"></a>8.CSS初始化</h3><p>不同浏览器对有些标签的默认值是不同的，为了消除不同浏览器对HTML文本呈现的差异，照顾浏览器的兼容，我们需要对CSS初始化</p><p><strong>css reset</strong></p><p><strong>每个网页都需要CSS初始化</strong></p><p>一般的操作有：</p><ol><li><p>清除内外边距</p></li><li><p>斜体不倾斜</p></li><li><p>去掉li的小圆点 <strong>list-style:none</strong></p></li><li><p>图片边框设置为0，垂直居中</p><p>……</p></li></ol><h2 id="HTML5-和-CSS3-提高"><a href="#HTML5-和-CSS3-提高" class="headerlink" title="HTML5 和 CSS3 提高"></a>HTML5 和 CSS3 提高</h2><h3 id="1-HTML5-的新特性"><a href="#1-HTML5-的新特性" class="headerlink" title="1.HTML5 的新特性"></a>1.HTML5 的新特性</h3><h4 id="1-1HTML5-新增的语义化标签"><a href="#1-1HTML5-新增的语义化标签" class="headerlink" title="1.1HTML5 新增的语义化标签"></a>1.1HTML5 新增的语义化标签</h4><p>以前布局，我们基本用div来做。div对于搜索引擎来说，是没有语义的</p><ul><li><strong><header>  ：头部标签</strong></li><li><strong><nav>:导航标签</strong></li><li><strong><article>:内容标签</strong></li><li><strong><section>:定义文档某个区域</strong></li><li><strong><aside>:侧边栏标签</strong></li><li><strong><footer>：尾部标签</strong></li></ul><p><img src="https://i.loli.net/2021/05/17/5UjBgFrt6JmvceK.png" alt="新标签.png"></p><p><strong>注意：</strong></p><ul><li>这种语义化标准主要是针对 <strong>搜索引擎</strong> 的</li><li>这些新标签页面中可以使用 <strong>多次</strong></li><li>在 IE9 中，需要把这些元素转换为 <strong>块级元素</strong></li><li>其实，我们移动端更喜欢使用这些标签</li><li>HTML5 还增加了很多其他标签</li></ul><h4 id="1-2-HTML5-新增的多媒体标签"><a href="#1-2-HTML5-新增的多媒体标签" class="headerlink" title="1.2 HTML5 新增的多媒体标签"></a>1.2 HTML5 新增的多媒体标签</h4><p>新增的多媒体标签主要包含两个：</p><ol><li>音频:<audio></li><li>视频:<video></li></ol><p>在页面中嵌入音频和视频</p><p><strong>1.视频<video></strong></p><p>当前支持三种视频格式;尽量用 mp4 格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习笔记（一）</title>
      <link href="/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2022/02/27/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="1-网页"><a href="#1-网页" class="headerlink" title="1. 网页"></a>1. 网页</h3><ol><li><p>什么是网页？</p><p>网站是网页的集合，而网页是网站的“一页”，通常是 HTML 格式的文件，是构成网站的基本元素</p></li><li><p>什么是 HTML ？</p><p>是超文本标记语言，用来描述网页</p><p>标记语言是一套标记标签</p></li></ol><h3 id="2-常用浏览器"><a href="#2-常用浏览器" class="headerlink" title="2. 常用浏览器"></a>2. 常用浏览器</h3><p>​    IE、火狐、谷歌、Safari 和 Opera 等，平时称为五大浏览器</p><h3 id="3-Web-标准"><a href="#3-Web-标准" class="headerlink" title="3. Web 标准"></a>3. Web 标准</h3><p>​    Web标准是由 <strong>W3C</strong>（万维网联盟）组织和其他标准化组织指定的一系列标准的集合</p><h4 id="3-1-为什么需要Web-标准"><a href="#3-1-为什么需要Web-标准" class="headerlink" title="3.1 为什么需要Web 标准"></a>3.1 为什么需要Web 标准</h4><p>​    浏览器不同，它们显示页面或者排版就有些许差异</p><h4 id="3-2-Web-标准的构成"><a href="#3-2-Web-标准的构成" class="headerlink" title="3.2 Web 标准的构成"></a>3.2 Web 标准的构成</h4><p>​    主要包括<strong>结构</strong>、<strong>表现</strong>、<strong>行为</strong>三个方面</p><p>​    主要对应于 <strong>HTML</strong>、<strong>CSS</strong>、<strong>Javascript</strong></p><p>​    结构类似于身体，表现类似外观装饰，行为类似行为动作,三者中结构最为重要</p><h2 id="HTML-标签（上）"><a href="#HTML-标签（上）" class="headerlink" title="HTML 标签（上）"></a>HTML 标签（上）</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h3><h4 id="1-1-HTML-语法规范"><a href="#1-1-HTML-语法规范" class="headerlink" title="1.1 HTML 语法规范"></a>1.1 HTML 语法规范</h4><ol><li><p>1HTML 标签是由尖括号包括的关键词，例如<html></p></li><li><p>2HTML 标签通常是成对出现的，例如<html>和</html>，称为双标签。</p></li><li><p>3个别是单标签，如<br/></p></li></ol><h4 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h4><p>​    双标签关系可以分为两类：<strong>包含关系</strong> 和 <strong>并列关系</strong></p><h3 id="2-HTML-基本结构标签"><a href="#2-HTML-基本结构标签" class="headerlink" title="2. HTML 基本结构标签"></a>2. HTML 基本结构标签</h3><h4 id="2-1第一个-HTML-网页"><a href="#2-1第一个-HTML-网页" class="headerlink" title="2.1第一个 HTML 网页"></a>2.1第一个 HTML 网页</h4><p><strong>HTML 标签</strong> ：页面中最大的标签，根标签</p><figure class="highlight plaintext"><figcaption><span></head>``` ：文档的头部，必须要设置 titile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">**文档的标题 ** ：让页面拥有一个属于自己的网页标题</span><br><span class="line"></span><br><span class="line">**文档的主体** ：元素包含文档的所有内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3. 网页开发工具</span><br><span class="line"></span><br><span class="line">#### 3.1 文档类型声明标签</span><br><span class="line"></span><br><span class="line">**/*&lt;!DOCTYPE&gt;*/** :文档类型声明，作用就是告诉浏览器使用哪种 HTML 版本来显示网页</span><br><span class="line"></span><br><span class="line">#### 3.2 lang 语言种类</span><br><span class="line"></span><br><span class="line">用来定义当前文档显示的语言</span><br><span class="line"></span><br><span class="line">1. en 定义语言为英语</span><br><span class="line"></span><br><span class="line">2. zh-CN 定义语言为中文</span><br><span class="line"></span><br><span class="line">#### 3.3 字符集</span><br><span class="line"></span><br><span class="line">是多个字符的集合，在  ```&lt;head&gt;``` 标签内，可以通过 ```&lt;meta&gt; ```标签的 **charset** 属性来规定 HTML 文档应该使用哪种字符编码</span><br><span class="line"></span><br><span class="line">**charset**  常用的值有：GB2312 、BIG5、**UTF-8**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 4. HTML常用标签</span><br><span class="line"></span><br><span class="line">#### 4.1 标签语义</span><br><span class="line"></span><br><span class="line">根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰</span><br><span class="line"></span><br><span class="line">#### 4.2 标题标签</span><br><span class="line"></span><br><span class="line">```&lt;h1&gt;-&lt;h6&gt;```</span><br><span class="line"></span><br><span class="line">####  4.3 段落和换行标签</span><br><span class="line"></span><br><span class="line">```&lt;p&gt;&lt;/p&gt;```</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line"></span><br><span class="line">1. 文本在一个段落中会根据浏览器窗口大小自动换行</span><br><span class="line">2. 段落和段落之间保有空隙</span><br><span class="line"></span><br><span class="line">```&lt;br/&gt;```</span><br><span class="line"></span><br><span class="line">break,换行标签，另起一行</span><br><span class="line"></span><br><span class="line">#### 4.4 文本格式化标签</span><br><span class="line"></span><br><span class="line">设置  **粗体**、*斜体* 或者 &lt;u&gt;下划线&lt;/u&gt; 效果等</span><br><span class="line"></span><br><span class="line">```&lt;strong&gt;&lt;/strong&gt;``` 或者```&lt;b&gt;&lt;/b&gt;```: 加粗</span><br><span class="line"></span><br><span class="line">```&lt;em&gt;&lt;/em&gt;```或者```&lt;i&gt;&lt;/i&gt;```: 倾斜</span><br><span class="line"></span><br><span class="line">```&lt;del&gt;&lt;/del&gt;```或者```&lt;s&gt;&lt;/s&gt;```: 删除线</span><br><span class="line"></span><br><span class="line">```&lt;ins&gt;&lt;/ins&gt;```或者```&lt;u&gt;&lt;/u&gt;```: 下划线</span><br><span class="line"></span><br><span class="line">#### 4.5 ```&lt;div&gt;```和```&lt;span&gt;``` 标签</span><br><span class="line"></span><br><span class="line">无语义，都是一个用来装内容的盒子</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line"></span><br><span class="line">1.前者一行只能放一个，大盒子</span><br><span class="line"></span><br><span class="line">2.后者一行放多个，小盒子</span><br><span class="line"></span><br><span class="line">#### 4.6 图像标签和路径</span><br><span class="line"></span><br><span class="line">##### 1.图像标签</span><br><span class="line"></span><br><span class="line">```&lt;img src=&quot;图像url&quot;/&gt;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">一些属性：</span><br><span class="line"></span><br><span class="line">**scr** ：是```&lt;img&gt;``` 标签的 **必须属性** ，它用于指定图像文件的路径和文件名</span><br><span class="line"></span><br><span class="line">**alt** ：替换文本，图像不能显示时出现的文字</span><br><span class="line"></span><br><span class="line">**title** ：提示文本，鼠标放在图像上，显示的文字</span><br><span class="line"></span><br><span class="line">**width** ：设置图像的宽度</span><br><span class="line"></span><br><span class="line">**height** ：设置图像的高度</span><br><span class="line"></span><br><span class="line">**border** :  设置图像的边框粗细  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**一些注意点** ：</span><br><span class="line"></span><br><span class="line">1. 图像标签可以有多个属性，必须写到标签名后面</span><br><span class="line"></span><br><span class="line">2. 属性之间部分先后顺序，标签名与属性、属性与属性之间均用空格分开</span><br><span class="line"></span><br><span class="line">3. 属性采取键值对的格式，即key=  &quot;value&quot;的格式， 属性= “属性值”</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">   ##### 2.路径</span><br><span class="line"></span><br><span class="line">4. 目标文件夹和根目录</span><br><span class="line"></span><br><span class="line">5. 相对路径和绝对路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 4.7 超链接标签</span><br><span class="line"></span><br><span class="line">##### 1.链接的语法格式</span><br><span class="line"></span><br><span class="line">```&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;```</span><br><span class="line"></span><br><span class="line">**href** : 用于指定链接目标的url地址（必须属性）</span><br><span class="line"></span><br><span class="line">**target**：用于指定链接页面的打开方式，其中```_self``` 为默认值（即在当前页面打开），```_blank``` 为在新窗口打开</span><br><span class="line"></span><br><span class="line">##### 2.链接分类</span><br><span class="line"></span><br><span class="line">1. 外部链接</span><br><span class="line">2. 内部链接</span><br><span class="line">3. 空链接</span><br><span class="line">4. 下载链接</span><br><span class="line">5. 网页元素链接</span><br><span class="line">6. 锚点链接</span><br><span class="line"></span><br><span class="line">### 5. HTML 中的注释和特殊字符</span><br><span class="line"></span><br><span class="line">#### 5.1注释</span><br><span class="line"></span><br><span class="line">```&lt;!-- --!&gt;``</span><br><span class="line"></span><br><span class="line">&amp;nbsp:  空格</span><br><span class="line"></span><br><span class="line">&amp;lt:  小于号</span><br><span class="line"></span><br><span class="line">&amp;gt：大于号</span><br><span class="line"></span><br><span class="line">##  HTML 标签（下）</span><br><span class="line"></span><br><span class="line">### 1. 表格标签</span><br><span class="line"></span><br><span class="line">#### 1.1 表格标签的作用</span><br><span class="line"></span><br><span class="line">表格主要用于 **显示展示数据** </span><br><span class="line"></span><br><span class="line">#### 1.2 表格的基本语法</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;table&gt;</span><br><span class="line"></span><br><span class="line"> &lt;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;td&gt;&lt;/td&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>&lt;table&gt;&lt;/table&gt;</code>是用于定义表格的标签</li><li><code>&lt;tr&gt;&lt;/tr&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>中</li><li><code>&lt;td&gt;&lt;/td&gt;</code>用于定义表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>中</li><li>字母 td 指的是数据单元格中的内容</li></ol><h4 id="1-3-表格单元格标签"><a href="#1-3-表格单元格标签" class="headerlink" title="1.3 表格单元格标签"></a>1.3 表格单元格标签</h4><figure class="highlight plaintext"><figcaption><span>HTML 表格的表头部分（其内部文字会加粗居中显示）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#### 1.4 表格属性</span><br><span class="line"></span><br><span class="line">实际不常用，后面会通过CSS来设置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;属性名&lt;/th&gt;&lt;th&gt;属性值&lt;/th&gt;&lt;th&gt;描述&lt;/th&gt;    </span><br><span class="line">&lt;tr&gt;&lt;td&gt;align&lt;/td&gt;&lt;td&gt;left、center、right&lt;/td&gt;&lt;td&gt;规定表格相对周围元素的对齐方式&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;border&lt;/td&gt;&lt;td&gt;1或&quot;&quot;&lt;/td&gt;&lt;td&gt;规定表格单元是否拥有边框，默认为&quot;&quot;，表示没有边框&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;cellpadding&lt;/td&gt;&lt;td&gt;像素值&lt;/td&gt;&lt;td&gt;规定单元边沿与其内容之间的空白，默认1像素&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;cellspacing&lt;/td&gt;&lt;td&gt;像素值&lt;/td&gt;&lt;td&gt;规定单元格之间的空白，默认2像素&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;&lt;td&gt;width&lt;/td&gt;&lt;td&gt;像素值或百分比&lt;/td&gt;&lt;td&gt;规定表格的宽度&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.5 表格结构标签</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. ```&lt;thead&gt;``` 标签 表格的头部区域，内部必须拥有```&lt;tr&gt;```标签</span><br><span class="line"></span><br><span class="line">2. ```&lt;tbody&gt;``` 标签 表格的主体区域，主要用于存放数据本体</span><br><span class="line"></span><br><span class="line">3. 以上都放在```&lt;table&gt;``` 标签之中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 1.6 合并单元格</span><br><span class="line"></span><br><span class="line">**合并单元格的方式：** </span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;跨行合并：rowspan=&quot;合并单元格的个数&quot;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;跨行合并：colspan=&quot;合并单元格的个数&quot;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**合并单元格三部曲:**</span><br><span class="line"></span><br><span class="line">1. 先确定是跨行还是跨列合并</span><br><span class="line">2. 找到目标单元格，协商合并方式=合并的单元格数量，比如：```&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;```</span><br><span class="line">3. 删除多余的单元格</span><br><span class="line"></span><br><span class="line">#### 1.7 表格总结</span><br><span class="line"></span><br><span class="line">表格学习我把它整体分为三部分</span><br><span class="line"></span><br><span class="line">1. 表格的相关标签</span><br><span class="line">2. 表格的相关属性</span><br><span class="line">3. 合并单元格</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2. 列表标签</span><br><span class="line"></span><br><span class="line">表格是用来显示数据的，列表就是用来布局的</span><br><span class="line"></span><br><span class="line">其最大的特点就是整齐，整洁，有序</span><br><span class="line"></span><br><span class="line">分为三大类：**无序列表、有序列表 和 自定义列表** </span><br><span class="line"></span><br><span class="line">#### 2.1 无序列表</span><br><span class="line"></span><br><span class="line">```&lt;ul&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;li&gt;&lt;/li&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;li&gt;&lt;/li&gt;```</span><br><span class="line"></span><br><span class="line">​``````&lt;li&gt;&lt;/li&gt;``````</span><br><span class="line"></span><br><span class="line">​```...```</span><br><span class="line"></span><br><span class="line">```&lt;/ul&gt;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 无序列表中的各个列表项之间没有顺序级别之分，是并列的</span><br><span class="line">2. **```&lt;ul&gt;&lt;/ul&gt;```中只能嵌套```&lt;li&gt;&lt;/li&gt;```,直接在```&lt;ul&gt;&lt;/ul&gt;```标签中输入其他标签或者文字的做法是不被允许的**</span><br><span class="line">3. ```&lt;li&gt;```与```&lt;/li&gt;```之间相当于一个容器，可以**容纳所有元素**</span><br><span class="line">4. 无序列表会带有自己的样式属性，但在实际使用时，我们会使用 **CSS** 来设置</span><br><span class="line"></span><br><span class="line">#### 2.2 有序列表</span><br><span class="line"></span><br><span class="line">即为有排列顺序的列表</span><br><span class="line"></span><br><span class="line">```&lt;ol&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;li&gt;&lt;/li&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;li&gt;&lt;/li&gt;```</span><br><span class="line"></span><br><span class="line">​``````&lt;li&gt;&lt;/li&gt;``````</span><br><span class="line"></span><br><span class="line">​```...```</span><br><span class="line"></span><br><span class="line">```&lt;/ol&gt;```</span><br><span class="line"></span><br><span class="line">1. **```&lt;ol&gt;&lt;/ol&gt;```中只能嵌套```&lt;li&gt;&lt;/li&gt;```,直接在```&lt;ol&gt;&lt;/ol&gt;```标签中输入其他标签或者文字的做法是不被允许的**</span><br><span class="line"></span><br><span class="line">2. ```&lt;li&gt;```与```&lt;/li&gt;```之间相当于一个容器，可以容纳所有元素</span><br><span class="line">3. 有序列表会带有自己的样式属性，但在实际使用时，我们会使用 **CSS** 来设置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2.3 自定义列表</span><br><span class="line"></span><br><span class="line">```&lt;dl&gt;```用于定义描述列表，该标签会与```&lt;dt&gt;```(定义项目/名字)和```&lt;dd&gt;```（描述每一个项目/名字）一起使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​```&lt;dl&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;dt&gt;名词1&lt;/dt&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;dd&gt;名词1解释1&lt;/dd&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;dd&gt;名词1解释2&lt;/dd&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;/dl&gt;```</span><br><span class="line"></span><br><span class="line">#### 2.4 列表总结</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;标签名&lt;/th&gt;  &lt;th&gt;定义&lt;/th&gt;  &lt;th&gt;说明&lt;/th&gt; </span><br><span class="line">&lt;tr&gt;&lt;td&gt;&amp;lt ul &amp;gt&amp;lt /ul &amp;gt&lt;/td&gt;&lt;td&gt;无序标签&lt;/td&gt;&lt;td&gt;里面只能包含li 没有顺序，使用较多，li里面可以包含任何标签&lt;/td&gt;&lt;tr&gt;</span><br><span class="line"> &lt;tr&gt;&lt;td&gt;&amp;lt ol &amp;gt&amp;lt /ol&lt;/td&gt;&lt;td&gt;有序标签&lt;/td&gt;&lt;td&gt;里面只能包含li 没有顺序，使用较少，li里面可以包含任何标签&lt;/td&gt;&lt;tr&gt;</span><br><span class="line"> &lt;tr&gt;&lt;td&gt;&amp;lt dl &amp;gt&amp;lt /dl&lt;/td&gt;&lt;td&gt;自定义标签&lt;/td&gt;&lt;td&gt;里面只能包含dt和dl，dt和dl里面可以放任何标签&lt;/td&gt;&lt;tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.表单标签</span><br><span class="line"></span><br><span class="line">#### 3.1 为什么需要表单</span><br><span class="line"></span><br><span class="line">使用表单目的是为了 **收集用户信息** </span><br><span class="line"></span><br><span class="line">#### 3.2 表单的组成</span><br><span class="line"></span><br><span class="line">一个完整的表单通常由 **表单域、表单控件（表单元素）和  提示信息** 三部分构成</span><br><span class="line"></span><br><span class="line">#### 3.3 表单域</span><br><span class="line"></span><br><span class="line">**表单域** 是一个包含  **表单元素** 的区域</span><br><span class="line"></span><br><span class="line">```&lt;form&gt;```标签用于定义表单域，以实现用户信息的收集和传递</span><br><span class="line"></span><br><span class="line">此标签会把它范围内的表单元素信息提交给服务器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```&lt;form action=&quot;url地址&quot; method=&quot;提交方式&quot; name=&quot;表单域名称&quot;&gt; ```</span><br><span class="line"></span><br><span class="line">```...```</span><br><span class="line"></span><br><span class="line">```&lt;/form&gt;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">常用属性</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;属性&lt;/th&gt;    &lt;th&gt;属性值&lt;/th&gt;    &lt;th&gt;作用&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;action&lt;/td&gt; &lt;td&gt;url地址&lt;/td&gt;&lt;td&gt;用于指定接收并处理表单数据的服务器程序的url地址&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;method&lt;/td&gt; &lt;td&gt;get/post&lt;/td&gt;&lt;td&gt;用于设置表单数据的提交方式，其取值为get或post&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;name&lt;/td&gt; &lt;td&gt;名称&lt;/td&gt;&lt;td&gt;用于指定表单的名称，以区分同一个页面中的多个表单域&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当前只需要写上form标签即可……</span><br><span class="line"></span><br><span class="line">#### 3.4 表单控件</span><br><span class="line"></span><br><span class="line">1.  input 输入表单元素</span><br><span class="line">2.  select 下拉表单元素</span><br><span class="line">3.  textarea 文本域元素</span><br><span class="line"></span><br><span class="line">##### 3.4.1 ```&lt;input&gt;```表单元素</span><br><span class="line"></span><br><span class="line">```&lt;input type=&quot;属性值&quot;&gt;```</span><br><span class="line"></span><br><span class="line">&lt;ul&gt; </span><br><span class="line">    &lt;li&gt;&amp;lt input/&amp;gt标签为单标签&lt;/li&gt; </span><br><span class="line">    &lt;li&gt;type属性设置不同的属性值来指定不同的控件类型&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line"> &lt;th&gt;属性值&lt;/th&gt;    &lt;th&gt;描述&lt;/th&gt;  </span><br><span class="line">    &lt;tr&gt; &lt;td&gt;button&lt;/td&gt;  &lt;td&gt;按钮&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;checkbox&lt;/td&gt;  &lt;td&gt;定义复选框&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;file&lt;/td&gt;  &lt;td&gt;定义输入字段和“浏览”按钮，供文件上传&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;hidden&lt;/td&gt;  &lt;td&gt;定义隐藏的输入字段&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;image&lt;/td&gt;  &lt;td&gt;定义图像形式的提交按钮&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;password&lt;/td&gt;  &lt;td&gt;定义密码字段，该字段中的字符被掩码&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;radio&lt;/td&gt;  &lt;td&gt;定义单选按钮&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;reset&lt;/td&gt;  &lt;td&gt;定义重置按钮，清除表单中的所有数据&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;submit&lt;/td&gt;  &lt;td&gt;定义提交按钮&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">     &lt;tr&gt; &lt;td&gt;text&lt;/td&gt;  &lt;td&gt;定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">除了 type 属性之外，```&lt;input&gt;``` 标签还有其他很多属性，其常用属性如下：</span><br><span class="line"></span><br><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;th&gt;属性&lt;/th&gt;    &lt;th&gt;属性值&lt;/th&gt;   &lt;th&gt;描述&lt;/th&gt;</span><br><span class="line">    &lt;tr&gt; &lt;td&gt;name&lt;/td&gt;  &lt;td&gt;由用户自定义&lt;/td&gt;  &lt;td&gt;定义 input元素的名称&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt; &lt;td&gt;value&lt;/td&gt;  &lt;td&gt;由用户自定义&lt;/td&gt;  &lt;td&gt;规定input元素的值&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt; &lt;td&gt;checked&lt;/td&gt;  &lt;td&gt;checked&lt;/td&gt;  &lt;td&gt;规定此input元素首次加载时应当被选中&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line">      &lt;tr&gt; &lt;td&gt;maxlength&lt;/td&gt;  &lt;td&gt;正整数&lt;/td&gt;  &lt;td&gt;规定输入字段中的字符的最大长度&lt;/td&gt; &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. name 和 value 是每个表单元素都有的属性值，主要给后台人员使用</span><br><span class="line">2. name 表单元素的名字，要求 **单选按钮和复选框要有相同的name值**</span><br><span class="line"></span><br><span class="line">##### 3.4.2  ```&lt;label&gt;``` 标签</span><br><span class="line"></span><br><span class="line">用于绑定一个表单元素，当点击 ```&lt;label&gt;```标签内的文本时，浏览器会自动将焦点（光标）转到或者选择对应的表达元素上，来增加用户体验</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```&lt;label for=&quot;sex&quot;&gt;男&lt;/label&gt;```</span><br><span class="line"></span><br><span class="line">```&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;sex&quot;&gt;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**for属性** 应该与相关元素的 id 属性相同</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 3.4.3 ```&lt;select&gt;``` 表单元素</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```&lt;select&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;option&gt;选项1&lt;/option&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;option&gt;选项2&lt;/option&gt;```</span><br><span class="line"></span><br><span class="line">​```&lt;option&gt;选项3&lt;/option&gt;```</span><br><span class="line"></span><br><span class="line">```&lt;/select&gt;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. ```&lt;select&gt;``` 中至少包含一对```&lt;option&gt;```</span><br><span class="line">2. 在```&lt;option&gt;```中定selected=&quot;selected&quot;时，当前项即为默认选中项</span><br><span class="line"></span><br><span class="line">##### 3.4.4 ```&lt;textarea&gt;``` 表单元素</span><br><span class="line"></span><br><span class="line">该控件常见于留言板，评论</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">```&lt;textarea rows=&quot;10&quot; cols=&quot;20&gt;&quot;```</span><br><span class="line"></span><br><span class="line">​```文本内容```</span><br><span class="line"></span><br><span class="line">```&lt;/textarea&gt;```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**注意：** cols和rows在实际开发中都是通过CSS来改变大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**&lt;fieldset&gt;** 的用法！！</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;&quot;&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">&lt;legend&gt;Personal information:&lt;/legend&gt;</span><br><span class="line">Name: &lt;input type=&quot;text&quot; size=&quot;30&quot;&gt;&lt;br&gt;</span><br><span class="line">E-mail: &lt;input type=&quot;text&quot; size=&quot;30&quot;&gt;&lt;br&gt;</span><br><span class="line">Date of birth: &lt;input type=&quot;text&quot; size=&quot;10&quot;&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;&quot;&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">&lt;legend&gt;英雄选择&lt;/legend&gt;</span><br><span class="line">&lt;select&gt;</span><br><span class="line">&lt;option&gt;安其拉&lt;/option&gt;</span><br><span class="line">&lt;option&gt;吕布&lt;/option&gt;</span><br><span class="line">&lt;option&gt;赵信&lt;/option&gt;</span><br><span class="line">&lt;option selected&gt;张飞&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;fieldset&gt;</span><br><span class="line">&lt;legend&gt;最喜欢的几个英雄&lt;/legend&gt;</span><br><span class="line">&lt;label for=&quot;zhaoxin&quot;&gt;赵信&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hero&quot; id=&quot;zhaoxin&quot;&gt;</span><br><span class="line">&lt;label for=&quot;zhangfei&quot;&gt;张飞&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hero&quot; id=&quot;zhangfei&quot;&gt;</span><br><span class="line">&lt;label for=&quot;ali&quot;&gt;阿狸&lt;/label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;hero&quot; id=&quot;ali&quot;&gt;</span><br><span class="line">&lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;demo-form.php&quot;&gt;</span><br><span class="line">First name: &lt;input type=&quot;text&quot; name=&quot;FirstName&quot; value=&quot;Mickey&quot;&gt;&lt;br&gt;</span><br><span class="line">Last name: &lt;input type=&quot;text&quot; name=&quot;LastName&quot; value=&quot;Mouse&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;点击&quot;提交&quot;按钮，表单数据将被发送到服务器上的“demo-form.php”。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; </span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;h3&gt;发送邮件到 someone@example.com:&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;MAILTO:someone@example.com&quot; method=&quot;post&quot; enctype=&quot;text/plain&quot;&gt;</span><br><span class="line">Name:&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;your name&quot;&gt;&lt;br&gt;</span><br><span class="line">E-mail:&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;mail&quot; value=&quot;your email&quot;&gt;&lt;br&gt;</span><br><span class="line">Comment:&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; name=&quot;comment&quot; value=&quot;your comment&quot; size=&quot;50&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;发送&quot;&gt;</span><br><span class="line">&lt;input type=&quot;reset&quot; value=&quot;重置&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">##### 3.4.5 内联框架</span><br><span class="line"></span><br><span class="line">​eg. </span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; </span><br><span class="line">&lt;/head&gt; </span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;iframe src=&quot;//www.runoob.com&quot;&gt;</span><br><span class="line">  &lt;p&gt;您的浏览器不支持  iframe 标签。&lt;/p&gt;</span><br><span class="line">&lt;/iframe&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">##### 3.4.6 HTML中默认的URL链接</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt; </span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt; </span><br><span class="line">&lt;base href=&quot;//www.runoob.com/images/&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;img src=&quot;logo.png&quot;&gt; - 注意这里我们设置了图片的相对地址。能正常显示是因为我们在 head 部分设置了 base 标签，该标签指定了页面上所有链接的默认 URL，所以该图片的访问地址为 &quot;http://www.runoob.com/images/logo.png&quot;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;a href=&quot;//www.runoob.com&quot;&gt;菜鸟教程&lt;/a&gt; - 注意这个链接会在新窗口打开，即便它没有 target=&quot;_blank&quot; 属性。因为在 base 标签里我们已经设置了 target 属性的值为 &quot;_blank&quot;。</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello-world</title>
      <link href="/2022/02/27/hello-world/"/>
      <url>/2022/02/27/hello-world/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码输入错误，请重试" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8a9d77d8fbf2d416c920891ee98b5d72cb366542e7ee51852f24ca72eaf82187"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请在这里输入密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
